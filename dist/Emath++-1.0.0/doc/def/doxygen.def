AutoGen Definitions dummy;
class = {
  cp-id     = 'classemth_1_1Arithmetic';
  cp-name   = 'emth::Arithmetic';
  cp-section = {
    sec-kind = 'public-static-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Arithmetic_1adddfba367517025753ae37062ac6f483';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
static void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_divisors';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'n';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::vector< int > &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'v';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '74';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the all the positive divisors for an integer.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param n The integer to get the divisors for.
@param v The vector reference where to store the divisors.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/kopi/GitHub/EMath++/include/emath.h';
  cp-fileline  = '67';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Class with some functions for arithmetic math.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 The class consists of the functions that operate with real numbers.
_EnD_oF_dEf_TeXt_;
}; /* class */
class = {
  cp-id     = 'classemth_1_1Monomial';
  cp-name   = 'emth::Monomial';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Monomial';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '86';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Default constructor for when initialized with no arguments.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a70ba615f776f89452b3b11bb9dfe045e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Monomial';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'cf';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const int
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'dgr';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '92';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Normal constructor for initialization with coeff and degree.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param cf The coefficient as a double.
@param dgr The degree as a integer.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1aa5fc7752eb6a5db663872dd7298140c1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Monomial';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '97';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Copy constructor for when initialized with an lvalue Monomial object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The lvalue Monomial object.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a0d77a762defbcd2cb1925e3258f6158f';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Monomial';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
Monomial &&
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '102';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Move constructor for when initialized with an rvalue Monomial object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The rvalue Monomial object.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '108';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Assigment operator overload for when called with an lvalue.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The lvalue Monomial object.
@return (Monomial&) A reference to the lvalue of the operation
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a7ea9ffbef1c53c8e0f7a9bfda2dcb691';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
Monomial &&
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '114';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Move assigment operator overload for when called with an rvalue.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The rvalue Monomial object.
@return (Monomial&) A reference to the lvalue of the operation
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a2f9d14fa6443fc160258121c7907b989';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator==';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '121';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Equal logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to compare to.
@return (true) If Monomial objects coefficients and degrees match.
@return (false) If Monomial objects coefficients and degrees dont match. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1ab7f80ead25e2f5d4ad80cdbbfe49d5e3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator!=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '128';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Not equal logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to compare to.
@return (true) If Monomial objects coefficients and degrees dont match.
@return (false) If Monomial objects coefficients and degrees match. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a995abc13b689075b21b43a30ce043e72';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator>';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '135';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Greater than logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to compare to.
@return (true) If the Monomial object degree is greater than the degree of the passed Monomial.
@return (false) If the Monomial object degree is equal or less than the degree of the passed Monomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a33c3c8003322cc2a8f2c4f2e1b44a387';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator<';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '142';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Less than logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to compare to.
@return (true) If the Monomial object degree is less than the degree of the passed Monomial.
@return (false) If the Monomial object degree is equal or greater than the degree of the passed Monomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a36079411f2ae6f90e71a09b6723ecf35';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator>=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '149';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Greater or equal than logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to compare to.
@return (true) If the Monomial object degree is greater or equal than the degree of the passed Monomial.
@return (false) If the Monomial object degree is less than the degree of the passed Monomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a80fe0433858cf335c1e29ff15aa4bcb8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator<=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '156';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Less or equal than logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to compare to.
@return (true) If the Monomial object degree is less or equal than the degree of the passed Monomial.
@return (false) If the Monomial object degree is greater than the degree of the passed Monomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1aa545290af910fc7a0c68bc02decd41c5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator+';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '162';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Addition operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to add.
@return (Monomial) A brand new Monomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1aee07c6d65bc594b8eaaa4d0299840e05';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator-';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '168';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Substraction operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to substract by.
@return (Monomial) A brand new Monomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a98a931372dbd0ddafe82ce5601f30836';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator*';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '174';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Multiplication operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to multiply by.
@return (Monomial) A brand new Monomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a55982755a6223cbf977e55979fcad8ff';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator/';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '180';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Division operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to divide by.
@return (Monomial) A brand new Monomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a8316e22fbd1420a2302fcf8bd6d3b6c2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator%';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '186';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Modulus operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to divide by.
@return (Monomial) A brand new Monomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a7cac7880021c7cf783daa15ee00b94d1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator+=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '192';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Addition assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to add.
@return (Monomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a45a932afba1f1f38c5ca16b6c16fd3c8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator-=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '198';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Substraction assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to substract by.
@return (Monomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a59e6ec6722fe75349e84c6c3397279f5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator*=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '204';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Multiplication assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to multiply by.
@return (Monomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a1bdb99f916437cd3a7c127b71bec5787';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator/=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '210';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Division assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to divide by.
@return (Monomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1ab4c89014e13b2f35f264492486a935fe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Monomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator%=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '216';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Modulus assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Monomial object to divide by.
@return (Monomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_degree';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '235';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Getter function for getting the degree of the Monomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (int) The degree of the Monomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_coeff';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '240';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Getter function for getting the coefficient of the Monomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (double) The coefficient of the Monomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::string
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_expression';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '245';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Getter function for getting the expression of the Monomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (std::string) The expression of the Monomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_value';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'x';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '251';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Calculus function for getting the value of the Monomial at a point.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param x The point to evaluate.
@return (double) The result of the evaluation of the Monomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1aecedb04edd52a33ba0ee110eedbd74db';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = '~Monomial';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '255';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The class destructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Monomial_1a7cba04b35f6b0b4b3dfe909aca0391cb';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'swap';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '269';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The swap function for the copy-and-swap idiom implemented by the assigment operators.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The other Monomial to swap the data with.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classemth_1_1Monomial_1a997731ccf2707a956c8e236b25451702';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'coeff';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '260';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The coefficient of the Monomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classemth_1_1Monomial_1a7ac5ee0ccb8199fb3dc40d93059d95ba';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'degree';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '264';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The degree of the Monomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'signal';
    sec-member = {
      sec-mem-kind = 'friend';
      sec-mem-id   = 'classemth_1_1Monomial_1a01135c72790e63387bc07601dd3acc5b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
friend std::stringstream &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator<<';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::stringstream &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ss';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'm';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '223';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
A friend operator to insert the Monomial into a std::stringstream.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ss The std::stringstream.
@param m The Monomial object to insert.
@return (std::stringstream&) A reference to the std::stringstream.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'friend';
      sec-mem-id   = 'classemth_1_1Monomial_1ada77c9969b0422090c05636a895c0e8e';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
friend std::ostream &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator<<';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::ostream &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'out';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Monomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'm';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '230';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
A friend operator to insert the Monomial into a std::ostream.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param out The std::ostream.
@param m The Monomial object to insert.
@return (std::ostream&) A reference to the std::ostream.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/kopi/GitHub/EMath++/include/emath.h';
  cp-fileline  = '81';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Class for representing and operating monomials.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 The class consists of the constructors, the operators, the getters, the properties and some private functions.
_EnD_oF_dEf_TeXt_;
}; /* class */
class = {
  cp-id     = 'classemth_1_1Polynomial';
  cp-name   = 'emth::Polynomial';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Polynomial';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '281';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Default constructor for when initialized with no arguments.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1af0f389de210155a112852f013aaa18d3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Polynomial';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::map< int, Monomial >
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'mns';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '286';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Normal constructor for initialization with a std::map<int, Monomial>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param mns The std::map<int, Monomial>.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a98e8835f620927464b617d6b6ebd1329';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Polynomial';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::initializer_list< Monomial >
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'mns';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '291';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
List constructor for initialization with a std::initializer_list<Monomial>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param mns The std::initializer_list<Monomial>.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a084aed33935ade2f689f09103daaac53';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Polynomial';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const std::vector< Monomial >
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'mns';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '296';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Vector constructor for initialization with a std::vector<Monomial>
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param mns The std::vector<Monomial>.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a3612ca54a3bef015a9809d77af2be355';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Polynomial';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '301';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Copy constructor for when initialized with an lvalue Polynomial object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The lvalue Polynomial object.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a3f55b493797c89e9079c7019fb905059';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'Polynomial';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
Polynomial &&
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '306';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Move constructor for when initialized with an rvalue Polynomial object.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The rvalue Polynomial object.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a33ba807b5465ead26edd077d8289f4f3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '312';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Assigment operator overload for when called with an lvalue.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The lvalue Polynomial object.
@return (Polynomial&) A reference to the lvalue of the operation
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a93818b33532e3f8e80fa614ca8287479';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
Polynomial &&
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '318';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Move assigment operator overload for when called with an rvalue.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The rvalue Polynomial object.
@return (Polynomial&) A reference to the lvalue of the operation
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1ad042381e1713be21b332d3f8fbdfd0a7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator==';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '325';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Equal logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to compare to.
@return (true) If Polynomial objects degrees and monomials match.
@return (false) If Polynomial objects degrees and monomials dont match. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a40fefffeb0043d193d5aa7ecb3adba55';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator!=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '332';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Not equal logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to compare to.
@return (true) If Polynomial objects degrees and monomials dont match.
@return (false) If Polynomial objects degrees and monomials match. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1ae358f6f9b93783601af6999b67e0dafb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator>';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '339';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Greater than logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to compare to.
@return (true) If the Polynomial object degree is greater than the degree of the passed Polynomial.
@return (false) If the Polynomial object degree is equal or less than the degree of the passed Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a0f0640fcb0dd0a59b685a646d494bfc7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator<';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '346';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Less than logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to compare to.
@return (true) If the Polynomial object degree is less than the degree of the passed Polynomial.
@return (false) If the Polynomial object degree is equal or greater than the degree of the passed Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a2321b93b1482b6677dbd125739848724';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator>=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '353';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Greater or equal than logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to compare to.
@return (true) If the Polynomial object degree is greater or equal than the degree of the passed Polynomial.
@return (false) If the Polynomial object degree is less than the degree of the passed Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a7b234cebd032016c0a8ece92a4f68141';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
bool
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator<=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '360';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Less or equal than logic operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to compare to.
@return (true) If the Polynomial object degree is less or equal than the degree of the passed Polynomial.
@return (false) If the Polynomial object degree is greater than the degree of the passed Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a9d46082ad38edc17f875127208626281';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator+';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '366';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Addition operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to add.
@return (Polynomial) A brand new Polynomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a1cd22ae48bfcb14b53835730091e5f4d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator-';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '372';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Substraction operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to substract by.
@return (Polynomial) A brand new Polynomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1ac461b9aeb93c33d540f0a918bdefd203';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator*';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '378';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Multiplication operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to multiply by.
@return (Polynomial) A brand new Polynomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1aa2a054dcc203257bfc3d06621ce876b1';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator/';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '384';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Division operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to divide by.
@return (Polynomial) A brand new Polynomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a56a499385ad24715b1240611217277c5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator%';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '390';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Modulus operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to divide by.
@return (Polynomial) A brand new Polynomial that represents the result.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a791a5aa2207acd2fccc4124ff36eb0bf';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator+=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '396';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Addition assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to add.
@return (Polynomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1af545354b4dade3e286be26207d02a442';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator-=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '402';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Substraction assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to substract by.
@return (Polynomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1abdeb3769c43eec881ae8ed1a20a5d01d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator*=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '408';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Multiplication assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to multiply by.
@return (Polynomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1ac5a003db2381c99c97c4a78341145b26';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator/=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '414';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Division assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to divide by.
@return (Polynomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
      sec-mem-referenceto = {
        sec-mem-ref-id = 'src_2emath_8cpp_1a1a11b6043ddc48006fe37241bb6bc6d0';
        sec-mem-ref-line = '207';
        sec-mem-ref-name = 'emth::Monomial::get_degree';
    };
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a2e6bd9b16b732b38caabf950acfd5cb2';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator%=';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '420';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Modulus assigment operator overload.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The Polynomial object to divide by.
@return (Polynomial&) A reference to the lvalue of the operation.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_degree';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '439';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Getter function for getting the degree of the Polynomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (int) The degree of the Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::map< int, Monomial >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_monomials';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '444';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Getter function for getting the monomials of the Polynomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (std::map<int, Monomial>) The monomials of the Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::string
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_expression';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '449';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Getter function for getting the expression of the Polynomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (std::string) The expression of the Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
double
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_value';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const double &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'x';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '455';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Calculus function for getting the value of the Polynomial at a point.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param x The point to evaluate.
@return (double) The result of the evaluation of the Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_derivative';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '460';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Calculus function for getting the derivative of the Polynomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (Polynomial) The result of the derivative of the Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'get_integral';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '465';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Calculus function for getting the integral of the Polynomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (Polynomial) The result of the integral of the Polynomial.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a056e1df4102b0d0add0e8e2805401b82';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-name = '~Polynomial';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '469';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The class destructor.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a8b4f2d72f0fa4b1e5fc3d2fc434d1d52';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'swap';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ogn';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '479';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The swap function for the copy-and-swap idiom implemented by the assigment operators.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ogn The other Polynomial to swap the data with.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'classemth_1_1Polynomial_1a3d28b34143d180686a38f5b12900a38c';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
Polynomial &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'redux';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '483';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The redux function for removing the Monomials of zero coefficient.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'private-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'classemth_1_1Polynomial_1a5fe4c61292355d30836f1de02a255162';
      sec-mem-virt = normal;
      sec-mem-prot = private;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
std::map< int, Monomial >
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'monomials';
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '474';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The monomials of the Polynomial as a std::map<int, Monomial> where the key is the degree of the Monomial.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'signal';
    sec-member = {
      sec-mem-kind = 'friend';
      sec-mem-id   = 'classemth_1_1Polynomial_1a66068882dda621b9bca207d72a9fb2d7';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
friend std::stringstream &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator<<';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::stringstream &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ss';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '427';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
A friend operator to insert the Polynomial into a std::stringstream.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param ss The std::stringstream.
@param m The Polynomial object to insert.
@return (std::stringstream&) A reference to the std::stringstream.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'friend';
      sec-mem-id   = 'classemth_1_1Polynomial_1a444148f9a6121f040d0149c4b5d94ac5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
friend std::ostream &
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'operator<<';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
std::ostream &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'out';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
const Polynomial &
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'p';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/home/kopi/GitHub/EMath++/include/emath.h';
      sec-mem-desc-line = '434';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
A friend operator to insert the Polynomial into a std::ostream.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@param out The std::ostream.
@param m The Polynomial object to insert.
@return (std::ostream&) A reference to the std::ostream.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/home/kopi/GitHub/EMath++/include/emath.h';
  cp-fileline  = '276';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
Class for representing and operating polynomials.
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
 The class consists of the constructors, the operators, the getters, the properties and some private functions.
_EnD_oF_dEf_TeXt_;
}; /* class */
file = {
  file-id   = 'emath_8h';
  file-name = 'emath.h';
  file-full-name  = '/home/kopi/GitHub/EMath++/include/emath.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
This is the main header file for the emath library.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
 This file declares the functions of the emath library.\n
It consists of two classes, the Monomial class and the Polynomial class.\n
The Monomial class declares all the functions, operators, and properties for representing and operating monomials.\n
The Polynomial class declares all the functions, operators, and properties for representing and operating polynomials.\n
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'src_2emath_8cpp';
  file-name = 'emath.cpp';
  file-full-name  = '/home/kopi/GitHub/EMath++/src/emath.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
This is the main source file for the mathematical equation operations.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
 This file implements the functions declared in emath.h.\n
It consists of two classes, the Monomial class and the Polynomial class.\n
The Monomial class implements all the functions, operators, and properties for representing and operating monomials.\n
The Polynomial class implements all the functions, operators, and properties for representing and operating polynomials.\n
_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'test_2emath_8cpp';
  file-name = 'emath.cpp';
    func = {
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'test_monomial';
      func-mem-desc-file = '/home/kopi/GitHub/EMath++/test/emath.cpp';
      func-mem-desc-line = '15';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Runs all the monomial class tests.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (int) Returns 0 to specify to Meson that the tests finished correctly
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1ac0ea8a4e12483048519184c536c27124';
        func-mem-ref-line = '212';
        func-mem-ref-name = 'emth::Monomial::get_coeff';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1a1a11b6043ddc48006fe37241bb6bc6d0';
        func-mem-ref-line = '207';
        func-mem-ref-name = 'emth::Monomial::get_degree';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1a2940ea82172b382f8354fe4d1556b996';
        func-mem-ref-line = '217';
        func-mem-ref-name = 'emth::Monomial::get_expression';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1a50a76c251c4a66c3522b78f0aba3c157';
        func-mem-ref-line = '223';
        func-mem-ref-name = 'emth::Monomial::get_value';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'test_polynomial';
      func-mem-desc-file = '/home/kopi/GitHub/EMath++/test/emath.cpp';
      func-mem-desc-line = '102';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Runs all the polynomial class tests.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (int) Returns 0 to specify to Meson that the tests finished correctly
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1a7eb2c1c9bbbb013220d24f5d2a24a963';
        func-mem-ref-line = '438';
        func-mem-ref-name = 'emth::Polynomial::get_degree';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1a1f27fae485c94bb0f00a46c50214ab37';
        func-mem-ref-line = '463';
        func-mem-ref-name = 'emth::Polynomial::get_derivative';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b';
        func-mem-ref-line = '448';
        func-mem-ref-name = 'emth::Polynomial::get_expression';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1ac87df7094ce26a8e9cba6df79a3eaf2d';
        func-mem-ref-line = '474';
        func-mem-ref-name = 'emth::Polynomial::get_integral';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1a02fda10cd15abff226c5a8013f4928f7';
        func-mem-ref-line = '443';
        func-mem-ref-name = 'emth::Polynomial::get_monomials';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'src_2emath_8cpp_1a644cd3ebe3afa676cc3db99557f6eed3';
        func-mem-ref-line = '454';
        func-mem-ref-name = 'emth::Polynomial::get_value';
    };
    }; /* func-member */
    func-member = {
      func-mem-kind = 'function';
      func-mem-id   = 'test_2emath_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4';
      func-mem-virt = normal;
      func-mem-prot = public;
      func-mem-type = <<_EnD_oF_dEf_TeXt_
int
_EnD_oF_dEf_TeXt_;
      func-mem-name = 'main';
      func-mem-desc-file = '/home/kopi/GitHub/EMath++/test/emath.cpp';
      func-mem-desc-line = '206';
      func-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Calls the monomial and polynomial tests.
_EnD_oF_dEf_TeXt_;
      func-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return (int) The sum of the test_monomial and test_polynomial function wich should be zero when all tests pass
_EnD_oF_dEf_TeXt_;
      func-mem-referenceto = {
        func-mem-ref-id = 'test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f';
        func-mem-ref-line = '15';
        func-mem-ref-name = 'test_monomial';
    };
      func-mem-referenceto = {
        func-mem-ref-id = 'test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129';
        func-mem-ref-line = '102';
        func-mem-ref-name = 'test_polynomial';
    };
    }; /* func-member */
    };
  file-full-name  = '/home/kopi/GitHub/EMath++/test/emath.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_
This is the main test file of the emath library. It contains all the tests needed to assure that the library works properly.
_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_
 This file contains a main function that calls a function for the monomials and a function for the polynomials that test that every method works as it should.\n
If it doesn't then a message gets printed to the console describing the error. If this does happen open an issue on my github page.
_EnD_oF_dEf_TeXt_;
}; /* file */
  namespace = {
    ns-id   = 'namespaceemth';
    ns-name = 'emth';
  ns-filename  = '/home/kopi/GitHub/EMath++/include/emath.h';
  ns-fileline  = '57';
  ns-briefdesc = <<_EnD_oF_dEf_TeXt_
Englobes all the classes and functions of the emath library.
_EnD_oF_dEf_TeXt_;
  ns-documentation = <<_EnD_oF_dEf_TeXt_
 The emth namespace contains three classes: Arithmetic, Monomial and Polynomial. The first contains functions for arithmetic operations. The last two are wrappers on abstract algebraic concepts.
_EnD_oF_dEf_TeXt_;
  };
