<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classefc_1_1Terminal" kind="class" language="C++" prot="public">
    <compoundname>efc::Terminal</compoundname>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classefc_1_1Terminal_1ae5cb3d5788e8c462b43211dd585bc4d7" prot="private" static="yes" mutable="no">
        <type><ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref> *</type>
        <definition>Terminal * efc::Terminal::instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <qualifiedname>efc::Terminal::instance</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Singleton <ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref> instance pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="264" column="29" bodyfile="src/interface.cpp" bodystart="264" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classefc_1_1Terminal_1a522bbbc47d0ab5023d053af9898984c4" prot="private" static="no" mutable="no">
        <type><ref refid="classefc_1_1Window" kindref="compound">Window</ref> *</type>
        <definition>Window* efc::Terminal::lwin</definition>
        <argsstring></argsstring>
        <name>lwin</name>
        <qualifiedname>efc::Terminal::lwin</qualifiedname>
        <briefdescription>
<para>Pointers to all the Windows as the parent class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="268" column="20" bodyfile="src/interface.cpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classefc_1_1Terminal_1afe39d6953778243999d633f5fe2448d5" prot="private" static="no" mutable="no">
        <type><ref refid="classefc_1_1Window" kindref="compound">Window</ref> *</type>
        <definition>Window * efc::Terminal::rwin</definition>
        <argsstring></argsstring>
        <name>rwin</name>
        <qualifiedname>efc::Terminal::rwin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="268" column="25" bodyfile="src/interface.cpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classefc_1_1Terminal_1abf489ab89aa473897bc808d726960b8e" prot="private" static="no" mutable="no">
        <type><ref refid="classefc_1_1Window" kindref="compound">Window</ref> *</type>
        <definition>Window * efc::Terminal::bwin</definition>
        <argsstring></argsstring>
        <name>bwin</name>
        <qualifiedname>efc::Terminal::bwin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="268" column="30" bodyfile="src/interface.cpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classefc_1_1Terminal_1a7d909c25717e74f2e4227bed55e2dcbc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>efc::Terminal::Terminal</definition>
        <argsstring>()</argsstring>
        <name>Terminal</name>
        <qualifiedname>efc::Terminal::Terminal</qualifiedname>
        <briefdescription>
<para>Single constructor wich initializes curses, creates the Windows, adds the resize signal and computes the bounds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="272" column="13" bodyfile="src/interface.cpp" bodystart="272" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1a985ca5779ab03587d9c51cc6e24ecefa" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::cbounds</definition>
        <argsstring>()</argsstring>
        <name>cbounds</name>
        <qualifiedname>efc::Terminal::cbounds</qualifiedname>
        <briefdescription>
<para>Function with the single task of computing the <ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref> bounds and the bounds of the Windows. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="285" column="18" bodyfile="src/interface.cpp" bodystart="285" bodyend="298"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classefc_1_1Terminal_1a86da6924013493d6a129bb1140a81307" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void efc::Terminal::wflush</definition>
        <argsstring>(Window *&amp;win)</argsstring>
        <name>wflush</name>
        <qualifiedname>efc::Terminal::wflush</qualifiedname>
        <param>
          <type><ref refid="classefc_1_1Window" kindref="compound">Window</ref> *&amp;</type>
          <declname>win</declname>
        </param>
        <briefdescription>
<para>Private function that flushes one <ref refid="classefc_1_1Window" kindref="compound">Window</ref> to the <ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>win</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classefc_1_1Window" kindref="compound">Window</ref> reference to flush </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="303" column="25" bodyfile="src/interface.cpp" bodystart="303" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1acaf638a07e093298ba3c19fa0db448b6" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void efc::Terminal::resize</definition>
        <argsstring>(int signal)</argsstring>
        <name>resize</name>
        <qualifiedname>efc::Terminal::resize</qualifiedname>
        <param>
          <type>int</type>
          <declname>signal</declname>
        </param>
        <briefdescription>
<para>Resize handler called on <ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref> resize. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the calling signal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="323" column="32" bodyfile="src/interface.cpp" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1a298926a6d67a4cea719f24aeb8132f2d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void efc::Terminal::launch</definition>
        <argsstring>()</argsstring>
        <name>launch</name>
        <qualifiedname>efc::Terminal::launch</qualifiedname>
        <briefdescription>
<para>Static function that groups all the curses procedure for launching the <ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="339" column="32" bodyfile="src/interface.cpp" bodystart="339" bodyend="349"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classefc_1_1Terminal_1aa058bcd027c3dc1212fb53eb0a6ecafb" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref> *</type>
        <definition>static Terminal * efc::Terminal::init</definition>
        <argsstring>() noexcept</argsstring>
        <name>init</name>
        <qualifiedname>efc::Terminal::init</qualifiedname>
        <briefdescription>
<para>Static function for building the singleton static instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(Terminal*) The singleton instance pointer also stored at Terminal::instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="355" column="29" bodyfile="src/interface.cpp" bodystart="355" bodyend="358"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <qualifiedname>efc::Terminal::flush</qualifiedname>
        <briefdescription>
<para>Function for flushin all the <ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref>&apos;s Windows. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="362" column="25" bodyfile="src/interface.cpp" bodystart="362" bodyend="362"/>
        <references refid="classefc_1_1Window_1ab18720ed62461884b759594ed60fb824" compoundref="interface_8cpp" startline="77">efc::Window::o</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1a9103a252f46463cd09adc2bb2436fa30" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::set_ltitle</definition>
        <argsstring>(const ::std::string title) noexcept</argsstring>
        <name>set_ltitle</name>
        <qualifiedname>efc::Terminal::set_ltitle</qualifiedname>
        <param>
          <type>const ::std::string</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Function for setting the title of the left <ref refid="classefc_1_1Window" kindref="compound">Window</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The title as a std::string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="367" column="18" bodyfile="src/interface.cpp" bodystart="367" bodyend="367"/>
        <references refid="classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5" compoundref="interface_8cpp" startline="116" endline="116">efc::Window::set_title</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1acc6236b69a0d0a2b1c9ae9cb3e6b1056" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::set_rtitle</definition>
        <argsstring>(const ::std::string title) noexcept</argsstring>
        <name>set_rtitle</name>
        <qualifiedname>efc::Terminal::set_rtitle</qualifiedname>
        <param>
          <type>const ::std::string</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Function for setting the title of the right <ref refid="classefc_1_1Window" kindref="compound">Window</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The title as a std::string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="372" column="18" bodyfile="src/interface.cpp" bodystart="372" bodyend="372"/>
        <references refid="classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5" compoundref="interface_8cpp" startline="116" endline="116">efc::Window::set_title</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::set_prompt</definition>
        <argsstring>(const ::std::string prompt) noexcept</argsstring>
        <name>set_prompt</name>
        <qualifiedname>efc::Terminal::set_prompt</qualifiedname>
        <param>
          <type>const ::std::string</type>
          <declname>prompt</declname>
        </param>
        <briefdescription>
<para>Function for setting the prompt of the bottom <ref refid="classefc_1_1Window" kindref="compound">Window</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prompt</parametername>
</parameternamelist>
<parameterdescription>
<para>The prompt as a std::string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="377" column="18" bodyfile="src/interface.cpp" bodystart="377" bodyend="377"/>
        <references refid="classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5" compoundref="interface_8cpp" startline="116" endline="116">efc::Window::set_title</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1aa705ec16ca8fcc9549b90793c58b4d83" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::set_ldata</definition>
        <argsstring>(::std::vector&lt;::std::string &gt; data) noexcept</argsstring>
        <name>set_ldata</name>
        <qualifiedname>efc::Terminal::set_ldata</qualifiedname>
        <param>
          <type>::std::vector&lt;::std::string &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function for setting data vector of the left <ref refid="classefc_1_1Window" kindref="compound">Window</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data as a std::vector of std::string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="382" column="18" bodyfile="src/interface.cpp" bodystart="382" bodyend="382"/>
        <references refid="classefc_1_1OWindow_1ae8e1bfbd75a83c820e825a73765a5691" compoundref="interface_8cpp" startline="213" endline="213">efc::OWindow::set_data</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1ac9e693242036242db200bbbebc3d83e6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::set_rdata</definition>
        <argsstring>(::std::vector&lt;::std::string &gt; data) noexcept</argsstring>
        <name>set_rdata</name>
        <qualifiedname>efc::Terminal::set_rdata</qualifiedname>
        <param>
          <type>::std::vector&lt;::std::string &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function for setting data vector of the right <ref refid="classefc_1_1Window" kindref="compound">Window</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data as a std::vector of std::string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="387" column="18" bodyfile="src/interface.cpp" bodystart="387" bodyend="387"/>
        <references refid="classefc_1_1OWindow_1ae8e1bfbd75a83c820e825a73765a5691" compoundref="interface_8cpp" startline="213" endline="213">efc::OWindow::set_data</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1a966affe71a3fd3c461a907e41a609cc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const int</type>
        <definition>const int efc::Terminal::get_short_input</definition>
        <argsstring>() const</argsstring>
        <name>get_short_input</name>
        <qualifiedname>efc::Terminal::get_short_input</qualifiedname>
        <briefdescription>
<para>Function for getting short single char input from the <ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const int) Int representing the pressed key </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="392" column="23" bodyfile="src/interface.cpp" bodystart="392" bodyend="392"/>
        <references refid="classefc_1_1Window_1ab18720ed62461884b759594ed60fb824" compoundref="interface_8cpp" startline="77">efc::Window::o</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ::std::string</type>
        <definition>const ::std::string efc::Terminal::get_long_input</definition>
        <argsstring>() const</argsstring>
        <name>get_long_input</name>
        <qualifiedname>efc::Terminal::get_long_input</qualifiedname>
        <briefdescription>
<para>Function for getting long single string input from the <ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(::std::string) The input as a std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="397" column="33" bodyfile="src/interface.cpp" bodystart="397" bodyend="397"/>
        <references refid="classefc_1_1Window_1ab18720ed62461884b759594ed60fb824" compoundref="interface_8cpp" startline="77">efc::Window::o</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1ab06e104fb3af3517e2e0413e26accd9a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::scroll_down</definition>
        <argsstring>(const unsigned int id) noexcept</argsstring>
        <name>scroll_down</name>
        <qualifiedname>efc::Terminal::scroll_down</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Function for scrolling down the left or right window depending on the provided id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the window as a const unsigned int </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="402" column="18" bodyfile="src/interface.cpp" bodystart="402" bodyend="407"/>
        <references refid="classefc_1_1OWindow_1a360df1d628255154c3cefce86d88499d" compoundref="interface_8cpp" startline="221" endline="221">efc::OWindow::scroll_down</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1a2b2ddbc6125d3a7ffa8101e161066034" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::scroll_up</definition>
        <argsstring>(const unsigned int id) noexcept</argsstring>
        <name>scroll_up</name>
        <qualifiedname>efc::Terminal::scroll_up</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Function for scrolling up the left or right window depending on the provided id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the window as a const unsigned int </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="412" column="18" bodyfile="src/interface.cpp" bodystart="412" bodyend="417"/>
        <references refid="classefc_1_1OWindow_1aac80548173360aa9c8336b60330a14a8" compoundref="interface_8cpp" startline="217" endline="217">efc::OWindow::scroll_up</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::echo_result</definition>
        <argsstring>(const ::std::string &amp;result)</argsstring>
        <name>echo_result</name>
        <qualifiedname>efc::Terminal::echo_result</qualifiedname>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Echoes the provided result to the prompt and waits for a key press. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The result to echo as a const ::std::string&amp; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="422" column="18" bodyfile="src/interface.cpp" bodystart="422" bodyend="428"/>
        <references refid="classefc_1_1Window_1a933c7e9e67d7423b1facb73a26a9fba3" compoundref="interface_8cpp" startline="86" endline="86">efc::Window::get_title</references>
        <references refid="classefc_1_1Window_1ab18720ed62461884b759594ed60fb824" compoundref="interface_8cpp" startline="77">efc::Window::o</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1ad3b80961a79f1534316d8e57ec4ada30" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Terminal::swap_active</definition>
        <argsstring>(const unsigned int id) noexcept</argsstring>
        <name>swap_active</name>
        <qualifiedname>efc::Terminal::swap_active</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Swaps the active window to the one matching the provide id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the window as a const unsigned int </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="433" column="18" bodyfile="src/interface.cpp" bodystart="433" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Terminal_1a64a6c41cf5396f6a5ab91a75e44faac6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>efc::Terminal::~Terminal</definition>
        <argsstring>() noexcept</argsstring>
        <name>~Terminal</name>
        <qualifiedname>efc::Terminal::~Terminal</qualifiedname>
        <briefdescription>
<para>Default destructor, it deletes the <ref refid="classefc_1_1Window" kindref="compound">Window</ref> pointers, sets the singleton instance to nullptr, stops the signal listener and stops curses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="444" column="13" bodyfile="src/interface.cpp" bodystart="444" bodyend="451"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classefc_1_1Terminal" kindref="compound">Terminal</ref> class to manage the terminal through curses. </para>
    </briefdescription>
    <detaileddescription>
<para>It works as a singleton. Not generic in any way. </para>
    </detaileddescription>
    <location file="src/interface.cpp" line="259" column="5" bodyfile="src/interface.cpp" bodystart="259" bodyend="452"/>
    <listofallmembers>
      <member refid="classefc_1_1Terminal_1abf489ab89aa473897bc808d726960b8e" prot="private" virt="non-virtual"><scope>efc::Terminal</scope><name>bwin</name></member>
      <member refid="classefc_1_1Terminal_1a985ca5779ab03587d9c51cc6e24ecefa" prot="private" virt="non-virtual"><scope>efc::Terminal</scope><name>cbounds</name></member>
      <member refid="classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>echo_result</name></member>
      <member refid="classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>flush</name></member>
      <member refid="classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>get_long_input</name></member>
      <member refid="classefc_1_1Terminal_1a966affe71a3fd3c461a907e41a609cc8" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>get_short_input</name></member>
      <member refid="classefc_1_1Terminal_1aa058bcd027c3dc1212fb53eb0a6ecafb" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>init</name></member>
      <member refid="classefc_1_1Terminal_1ae5cb3d5788e8c462b43211dd585bc4d7" prot="private" virt="non-virtual"><scope>efc::Terminal</scope><name>instance</name></member>
      <member refid="classefc_1_1Terminal_1a298926a6d67a4cea719f24aeb8132f2d" prot="private" virt="non-virtual"><scope>efc::Terminal</scope><name>launch</name></member>
      <member refid="classefc_1_1Terminal_1a522bbbc47d0ab5023d053af9898984c4" prot="private" virt="non-virtual"><scope>efc::Terminal</scope><name>lwin</name></member>
      <member refid="classefc_1_1Terminal_1acaf638a07e093298ba3c19fa0db448b6" prot="private" virt="non-virtual"><scope>efc::Terminal</scope><name>resize</name></member>
      <member refid="classefc_1_1Terminal_1afe39d6953778243999d633f5fe2448d5" prot="private" virt="non-virtual"><scope>efc::Terminal</scope><name>rwin</name></member>
      <member refid="classefc_1_1Terminal_1ab06e104fb3af3517e2e0413e26accd9a" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>scroll_down</name></member>
      <member refid="classefc_1_1Terminal_1a2b2ddbc6125d3a7ffa8101e161066034" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>scroll_up</name></member>
      <member refid="classefc_1_1Terminal_1aa705ec16ca8fcc9549b90793c58b4d83" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>set_ldata</name></member>
      <member refid="classefc_1_1Terminal_1a9103a252f46463cd09adc2bb2436fa30" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>set_ltitle</name></member>
      <member refid="classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>set_prompt</name></member>
      <member refid="classefc_1_1Terminal_1ac9e693242036242db200bbbebc3d83e6" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>set_rdata</name></member>
      <member refid="classefc_1_1Terminal_1acc6236b69a0d0a2b1c9ae9cb3e6b1056" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>set_rtitle</name></member>
      <member refid="classefc_1_1Terminal_1ad3b80961a79f1534316d8e57ec4ada30" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>swap_active</name></member>
      <member refid="classefc_1_1Terminal_1a7d909c25717e74f2e4227bed55e2dcbc" prot="private" virt="non-virtual"><scope>efc::Terminal</scope><name>Terminal</name></member>
      <member refid="classefc_1_1Terminal_1a86da6924013493d6a129bb1140a81307" prot="private" virt="non-virtual"><scope>efc::Terminal</scope><name>wflush</name></member>
      <member refid="classefc_1_1Terminal_1a64a6c41cf5396f6a5ab91a75e44faac6" prot="public" virt="non-virtual"><scope>efc::Terminal</scope><name>~Terminal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
