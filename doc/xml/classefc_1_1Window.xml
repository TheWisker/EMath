<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classefc_1_1Window" kind="class" language="C++" prot="public">
    <compoundname>efc::Window</compoundname>
    <derivedcompoundref refid="classefc_1_1IWindow" prot="public" virt="non-virtual">efc::IWindow</derivedcompoundref>
    <derivedcompoundref refid="classefc_1_1OWindow" prot="public" virt="non-virtual">efc::OWindow</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool efc::Window::c</definition>
        <argsstring></argsstring>
        <name>c</name>
        <qualifiedname>efc::Window::c</qualifiedname>
        <briefdescription>
<para>Two booleans: c for knowing if contents changed, and a for knowing if window is active. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="64" column="18" bodyfile="src/interface.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classefc_1_1Window_1aea9ca4761c6305661f459b77f9e95f87" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool efc::Window::a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <qualifiedname>efc::Window::a</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="64" column="20" bodyfile="src/interface.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classefc_1_1Window_1a7dc5e87a2ff69618b81041809b052e70" prot="protected" static="no" mutable="no">
        <type>::std::string</type>
        <definition>::std::string efc::Window::t</definition>
        <argsstring></argsstring>
        <name>t</name>
        <qualifiedname>efc::Window::t</qualifiedname>
        <briefdescription>
<para>String t: window title. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="68" column="27" bodyfile="src/interface.cpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int efc::Window::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <qualifiedname>efc::Window::y</qualifiedname>
        <briefdescription>
<para>Four unsigned ints: x and y for the coordinates relative to the console window, w and h for the size of the window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="72" column="26" bodyfile="src/interface.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classefc_1_1Window_1a07e3095c7f4d7320c008d5fd67692b61" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int efc::Window::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <qualifiedname>efc::Window::x</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="72" column="28" bodyfile="src/interface.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classefc_1_1Window_1a282f9857345806e5232bbbb0bc88c60c" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int efc::Window::h</definition>
        <argsstring></argsstring>
        <name>h</name>
        <qualifiedname>efc::Window::h</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="72" column="30" bodyfile="src/interface.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classefc_1_1Window_1ac189a55138f75bc910051d1598957018" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int efc::Window::w</definition>
        <argsstring></argsstring>
        <name>w</name>
        <qualifiedname>efc::Window::w</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="72" column="32" bodyfile="src/interface.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classefc_1_1Window_1ab18720ed62461884b759594ed60fb824" prot="public" static="no" mutable="no">
        <type>WINDOW *</type>
        <definition>WINDOW* efc::Window::o</definition>
        <argsstring></argsstring>
        <name>o</name>
        <qualifiedname>efc::Window::o</qualifiedname>
        <briefdescription>
<para>Pointer to the curses WINDOW object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="77" column="20" bodyfile="src/interface.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classefc_1_1Window_1ae5fb6b6600ebc4b528d664e8c6947ab2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>efc::Window::Window</definition>
        <argsstring>() noexcept</argsstring>
        <name>Window</name>
        <qualifiedname>efc::Window::Window</qualifiedname>
        <briefdescription>
<para>Generic constructor with default values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="81" column="13" bodyfile="src/interface.cpp" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a933c7e9e67d7423b1facb73a26a9fba3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * efc::Window::get_title</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_title</name>
        <qualifiedname>efc::Window::get_title</qualifiedname>
        <briefdescription>
<para>Returns the c_str() const char pointer of the title std::string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const char*) The title as a char array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="86" column="24" bodyfile="src/interface.cpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a433fbcc875c6e134a8c273c46525bca2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const unsigned int &amp;</type>
        <definition>const unsigned int &amp; efc::Window::get_y</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_y</name>
        <qualifiedname>efc::Window::get_y</qualifiedname>
        <briefdescription>
<para>Returns the y coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const unsigned int&amp;) The y coordinate as a const unsigned int&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="91" column="32" bodyfile="src/interface.cpp" bodystart="91" bodyend="91"/>
        <references refid="classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0" compoundref="interface_8cpp" startline="72">y</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a1920c8ff02f120a08252797280a3a2aa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const unsigned int &amp;</type>
        <definition>const unsigned int &amp; efc::Window::get_x</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_x</name>
        <qualifiedname>efc::Window::get_x</qualifiedname>
        <briefdescription>
<para>Returns the x coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const unsigned int&amp;) The x coordinate as a const unsigned int&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="96" column="32" bodyfile="src/interface.cpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a0f64ddda75fb64027eaa7b7dd767ec4e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const unsigned int &amp;</type>
        <definition>const unsigned int &amp; efc::Window::get_height</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_height</name>
        <qualifiedname>efc::Window::get_height</qualifiedname>
        <briefdescription>
<para>Returns the height value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const unsigned int&amp;) The height value as a const unsigned int&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="101" column="32" bodyfile="src/interface.cpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a58e0eb74a3b1b20a268dae29d4525dad" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const unsigned int &amp;</type>
        <definition>const unsigned int &amp; efc::Window::get_width</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_width</name>
        <qualifiedname>efc::Window::get_width</qualifiedname>
        <briefdescription>
<para>Returns the width value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const unsigned int&amp;) The width value as a const unsigned int&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="106" column="32" bodyfile="src/interface.cpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1aad12ba19cc558f386a4f2f9e7b6f1acc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const unsigned int</type>
        <definition>const unsigned int efc::Window::get_title_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_title_size</name>
        <qualifiedname>efc::Window::get_title_size</qualifiedname>
        <briefdescription>
<para>Returns the title size. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const unsigned int) The title size as a const unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="111" column="32" bodyfile="src/interface.cpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Window::set_title</definition>
        <argsstring>(const ::std::string &amp;&amp;title) noexcept</argsstring>
        <name>set_title</name>
        <qualifiedname>efc::Window::set_title</qualifiedname>
        <param>
          <type>const ::std::string &amp;&amp;</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Sets the title. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>The title as a cons std::string&amp;&amp; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="116" column="18" bodyfile="src/interface.cpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1adb89ea880c531bb3e611378ec1f10f5f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Window::set_coords</definition>
        <argsstring>(const unsigned int y, const unsigned int x) noexcept</argsstring>
        <name>set_coords</name>
        <qualifiedname>efc::Window::set_coords</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Sets the y and x coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate as a const unsigned int y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate as a const unsigned int x </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="122" column="18" bodyfile="src/interface.cpp" bodystart="122" bodyend="122"/>
        <references refid="classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0" compoundref="interface_8cpp" startline="72">y</references>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1ad9f8b6f349dfe11addce9781a4e32ffb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Window::set_size</definition>
        <argsstring>(const unsigned int h, const unsigned int w) noexcept</argsstring>
        <name>set_size</name>
        <qualifiedname>efc::Window::set_size</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Sets the size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>The height as a const unsigned int y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The width as a const unsigned int x </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="128" column="18" bodyfile="src/interface.cpp" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a18c9f4d362aa8ae7cd322e038828e4de" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Window::set_active</definition>
        <argsstring>(const bool active) noexcept</argsstring>
        <name>set_active</name>
        <qualifiedname>efc::Window::set_active</qualifiedname>
        <param>
          <type>const bool</type>
          <declname>active</declname>
        </param>
        <briefdescription>
<para>Sets the active boolean to the provided value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>active</parametername>
</parameternamelist>
<parameterdescription>
<para>If it is a active as a const boolean </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="133" column="18" bodyfile="src/interface.cpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a910926d607d7ac88e4d5e6640a52836a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>const unsigned int</type>
        <definition>virtual const unsigned int efc::Window::get_title_y</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_title_y</name>
        <qualifiedname>efc::Window::get_title_y</qualifiedname>
        <reimplementedby refid="classefc_1_1OWindow_1a6fa50bf6b31b39e3c9c2a14cedd70aac">get_title_y</reimplementedby>
        <reimplementedby refid="classefc_1_1IWindow_1a84cb0d425e279cd2b15dc2b43cb520d2">get_title_y</reimplementedby>
        <briefdescription>
<para>Gets the title y coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const unsigned int) The title y coordinate as a const unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="138" column="40" bodyfile="src/interface.cpp" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a2e177d9c72e6f7fcf29371df5bc08bea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>const unsigned int</type>
        <definition>virtual const unsigned int efc::Window::get_title_x</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_title_x</name>
        <qualifiedname>efc::Window::get_title_x</qualifiedname>
        <reimplementedby refid="classefc_1_1OWindow_1aa0224c53de48b27b7bc791f3ff1fe9fc">get_title_x</reimplementedby>
        <reimplementedby refid="classefc_1_1IWindow_1a91e48b892bd02b7c11020fdfc7e7c05d">get_title_x</reimplementedby>
        <briefdescription>
<para>Gets the title x coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const unsigned int) The title x coordinate as a const unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="143" column="40" bodyfile="src/interface.cpp" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a2f46320775d22ce67fdbacf50772fd02" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool efc::Window::needs_update</definition>
        <argsstring>() noexcept</argsstring>
        <name>needs_update</name>
        <qualifiedname>efc::Window::needs_update</qualifiedname>
        <briefdescription>
<para>Gets if the window needs a redraw. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const bool) True if the window should be redrawed, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="148" column="24" bodyfile="src/interface.cpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a64f20e7199e6a9e85c1db282cd820ad6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool efc::Window::is_active</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_active</name>
        <qualifiedname>efc::Window::is_active</qualifiedname>
        <briefdescription>
<para>Gets if the window is active/focused. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(const bool) True if the window is active, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="153" column="24" bodyfile="src/interface.cpp" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1a2feeecd90c7c634a15c4e84a3921ee14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void efc::Window::place</definition>
        <argsstring>()</argsstring>
        <name>place</name>
        <qualifiedname>efc::Window::place</qualifiedname>
        <briefdescription>
<para>Deletes the WINDOW pointer and creates a new WINDOW at the class coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="157" column="18" bodyfile="src/interface.cpp" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classefc_1_1Window_1ac8ec94fb12450e4fc37ea2adc30f81f8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type></type>
        <definition>virtual efc::Window::~Window</definition>
        <argsstring>() noexcept</argsstring>
        <name>~Window</name>
        <qualifiedname>efc::Window::~Window</qualifiedname>
        <briefdescription>
<para>Calls curses delwin() function on the curses WINDOW object and returns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/interface.cpp" line="161" column="21" bodyfile="src/interface.cpp" bodystart="161" bodyend="161"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic class for wrapping a curses WINDOW. </para>
    </briefdescription>
    <detaileddescription>
<para>It wraps a curses WINDOW in a way that lets it manage some centralized structure. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>efc::IWindow</label>
        <link refid="classefc_1_1IWindow"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>efc::OWindow</label>
        <link refid="classefc_1_1OWindow"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>efc::Window</label>
        <link refid="classefc_1_1Window"/>
      </node>
    </inheritancegraph>
    <location file="src/interface.cpp" line="59" column="5" bodyfile="src/interface.cpp" bodystart="59" bodyend="162"/>
    <listofallmembers>
      <member refid="classefc_1_1Window_1aea9ca4761c6305661f459b77f9e95f87" prot="protected" virt="non-virtual"><scope>efc::Window</scope><name>a</name></member>
      <member refid="classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9" prot="protected" virt="non-virtual"><scope>efc::Window</scope><name>c</name></member>
      <member refid="classefc_1_1Window_1a0f64ddda75fb64027eaa7b7dd767ec4e" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>get_height</name></member>
      <member refid="classefc_1_1Window_1a933c7e9e67d7423b1facb73a26a9fba3" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>get_title</name></member>
      <member refid="classefc_1_1Window_1aad12ba19cc558f386a4f2f9e7b6f1acc" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>get_title_size</name></member>
      <member refid="classefc_1_1Window_1a2e177d9c72e6f7fcf29371df5bc08bea" prot="public" virt="virtual"><scope>efc::Window</scope><name>get_title_x</name></member>
      <member refid="classefc_1_1Window_1a910926d607d7ac88e4d5e6640a52836a" prot="public" virt="virtual"><scope>efc::Window</scope><name>get_title_y</name></member>
      <member refid="classefc_1_1Window_1a58e0eb74a3b1b20a268dae29d4525dad" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>get_width</name></member>
      <member refid="classefc_1_1Window_1a1920c8ff02f120a08252797280a3a2aa" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>get_x</name></member>
      <member refid="classefc_1_1Window_1a433fbcc875c6e134a8c273c46525bca2" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>get_y</name></member>
      <member refid="classefc_1_1Window_1a282f9857345806e5232bbbb0bc88c60c" prot="protected" virt="non-virtual"><scope>efc::Window</scope><name>h</name></member>
      <member refid="classefc_1_1Window_1a64f20e7199e6a9e85c1db282cd820ad6" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>is_active</name></member>
      <member refid="classefc_1_1Window_1a2f46320775d22ce67fdbacf50772fd02" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>needs_update</name></member>
      <member refid="classefc_1_1Window_1ab18720ed62461884b759594ed60fb824" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>o</name></member>
      <member refid="classefc_1_1Window_1a2feeecd90c7c634a15c4e84a3921ee14" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>place</name></member>
      <member refid="classefc_1_1Window_1a18c9f4d362aa8ae7cd322e038828e4de" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>set_active</name></member>
      <member refid="classefc_1_1Window_1adb89ea880c531bb3e611378ec1f10f5f" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>set_coords</name></member>
      <member refid="classefc_1_1Window_1ad9f8b6f349dfe11addce9781a4e32ffb" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>set_size</name></member>
      <member refid="classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>set_title</name></member>
      <member refid="classefc_1_1Window_1a7dc5e87a2ff69618b81041809b052e70" prot="protected" virt="non-virtual"><scope>efc::Window</scope><name>t</name></member>
      <member refid="classefc_1_1Window_1ac189a55138f75bc910051d1598957018" prot="protected" virt="non-virtual"><scope>efc::Window</scope><name>w</name></member>
      <member refid="classefc_1_1Window_1ae5fb6b6600ebc4b528d664e8c6947ab2" prot="public" virt="non-virtual"><scope>efc::Window</scope><name>Window</name></member>
      <member refid="classefc_1_1Window_1a07e3095c7f4d7320c008d5fd67692b61" prot="protected" virt="non-virtual"><scope>efc::Window</scope><name>x</name></member>
      <member refid="classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0" prot="protected" virt="non-virtual"><scope>efc::Window</scope><name>y</name></member>
      <member refid="classefc_1_1Window_1ac8ec94fb12450e4fc37ea2adc30f81f8" prot="public" virt="virtual"><scope>efc::Window</scope><name>~Window</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
