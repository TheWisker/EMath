<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="test_2emath_8cpp" kind="file" language="C++">
    <compoundname>emath.cpp</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">iostream</includes>
    <includes refid="emath_8h" local="yes">emath.h</includes>
    <incdepgraph>
      <node id="4">
        <label>emath.h</label>
        <link refid="emath_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>test/emath.cpp</label>
        <link refid="test_2emath_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cassert</label>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>complex</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="10">
        <label>set.h</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int test_monomial</definition>
        <argsstring>()</argsstring>
        <name>test_monomial</name>
        <briefdescription>
<para>Runs all the monomial class tests. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(int) Returns 0 to specify to Meson that the tests finished correctly </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/emath.cpp" line="15" column="5" bodyfile="test/emath.cpp" bodystart="15" bodyend="97"/>
        <references refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" compoundref="src_2emath_8cpp" startline="212" endline="212">emth::Monomial::get_coeff</references>
        <references refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" compoundref="src_2emath_8cpp" startline="207" endline="207">emth::Monomial::get_degree</references>
        <references refid="classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996" compoundref="src_2emath_8cpp" startline="217" endline="217">emth::Monomial::get_expression</references>
        <references refid="classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157" compoundref="src_2emath_8cpp" startline="223" endline="223">emth::Monomial::get_value</references>
      </memberdef>
      <memberdef kind="function" id="test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int test_polynomial</definition>
        <argsstring>()</argsstring>
        <name>test_polynomial</name>
        <briefdescription>
<para>Runs all the polynomial class tests. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(int) Returns 0 to specify to Meson that the tests finished correctly </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/emath.cpp" line="102" column="5" bodyfile="test/emath.cpp" bodystart="102" bodyend="201"/>
        <references refid="classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963" compoundref="src_2emath_8cpp" startline="438" endline="438">emth::Polynomial::get_degree</references>
        <references refid="classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37" compoundref="src_2emath_8cpp" startline="463" endline="469">emth::Polynomial::get_derivative</references>
        <references refid="classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b" compoundref="src_2emath_8cpp" startline="448" endline="448">emth::Polynomial::get_expression</references>
        <references refid="classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d" compoundref="src_2emath_8cpp" startline="474" endline="480">emth::Polynomial::get_integral</references>
        <references refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" compoundref="src_2emath_8cpp" startline="443" endline="443">emth::Polynomial::get_monomials</references>
        <references refid="classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3" compoundref="src_2emath_8cpp" startline="454" endline="458">emth::Polynomial::get_value</references>
      </memberdef>
      <memberdef kind="function" id="test_2emath_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
<para>Calls the monomial and polynomial tests. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(int) The sum of the test_monomial and test_polynomial function wich should be zero when all tests pass </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/emath.cpp" line="206" column="5" bodyfile="test/emath.cpp" bodystart="206" bodyend="206"/>
        <references refid="test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f" compoundref="test_2emath_8cpp" startline="15" endline="97">test_monomial</references>
        <references refid="test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129" compoundref="test_2emath_8cpp" startline="102" endline="201">test_polynomial</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the main test file of the emath library. It contains all the tests needed to assure that the library works properly. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains a main function that calls a function for the monomials and a function for the polynomials that test that every method works as it should.<linebreak/>
If it doesn&apos;t then a message gets printed to the console describing the error. If this does happen open an issue on my github page. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="emath_8h" kindref="compound">emath.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceemth" kindref="compound">emth</ref>;</highlight></codeline>
<codeline lineno="15" refid="test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f" kindref="member">test_monomial</ref>()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONSTRUCTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/>md;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((md.<ref refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" kindref="member">get_coeff</ref>()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>default<sp/>Monomial<sp/>constructor:<sp/>coeff<sp/>is<sp/>not<sp/>default!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((md.<ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>default<sp/>Monomial<sp/>constructor:<sp/>degree<sp/>is<sp/>not<sp/>default!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/>mn(1,<sp/>1);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mn.<ref refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" kindref="member">get_coeff</ref>()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>normal<sp/>Monomial<sp/>constructor:<sp/>coeff<sp/>is<sp/>not<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mn.<ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>normal<sp/>Monomial<sp/>constructor:<sp/>degree<sp/>is<sp/>not<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/>mc(mn);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mc.<ref refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" kindref="member">get_coeff</ref>()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>Monomial<sp/>constructor:<sp/>coeff<sp/>is<sp/>not<sp/>copy<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mc.<ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>Monomial<sp/>constructor:<sp/>degree<sp/>is<sp/>not<sp/>copy<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/>mm(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,2));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mm.<ref refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" kindref="member">get_coeff</ref>()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>Monomial<sp/>constructor:<sp/>coeff<sp/>is<sp/>not<sp/>move<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mm.<ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>Monomial<sp/>constructor:<sp/>degree<sp/>is<sp/>not<sp/>move<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSIGMENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>assigment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>mc<sp/>=<sp/>mm;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mc.<ref refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" kindref="member">get_coeff</ref>()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>assigment<sp/>operator:<sp/>coeff<sp/>is<sp/>not<sp/>copy<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mc.<ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>assigment<sp/>operator:<sp/>degree<sp/>is<sp/>not<sp/>copy<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>assigment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>mm<sp/>=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mm.<ref refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" kindref="member">get_coeff</ref>()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>assigment<sp/>operator:<sp/>coeff<sp/>is<sp/>not<sp/>move<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((mm.<ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>assigment<sp/>operator:<sp/>degree<sp/>is<sp/>not<sp/>move<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMPARISON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/>m1(1,<sp/>1),<sp/>m2(2,<sp/>2);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Equality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((m1<sp/>==<sp/>m1)<sp/>&amp;&amp;<sp/>(m1<sp/>==<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>==<sp/>m1)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>==<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>equal<sp/>operator:<sp/>equal<sp/>monomials<sp/>are<sp/>not<sp/>diffent!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((m1<sp/>!=<sp/>m2)<sp/>&amp;&amp;<sp/>(m1<sp/>!=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)<sp/>!=<sp/>m1)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>!=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>equal<sp/>operator:<sp/>diffent<sp/>monomials<sp/>are<sp/>not<sp/>equal!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((m2<sp/>&gt;<sp/>m1)<sp/>&amp;&amp;<sp/>(m2<sp/>&gt;<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)<sp/>&gt;<sp/>m1)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)<sp/>&gt;<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>greater<sp/>monomial<sp/>operator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((m1<sp/>&lt;<sp/>m2)<sp/>&amp;&amp;<sp/>(m1<sp/>&lt;<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>&lt;<sp/>m2)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>&lt;<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>lesser<sp/>monomial<sp/>operator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((m2<sp/>&gt;=<sp/>m1<sp/>&amp;&amp;<sp/>m2<sp/>&gt;=<sp/>m2)<sp/>&amp;&amp;<sp/>(m2<sp/>&gt;=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>&amp;&amp;<sp/>m2<sp/>&gt;=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)<sp/>&gt;=<sp/>m1<sp/>&amp;&amp;<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)<sp/>&gt;=<sp/>m2)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)<sp/>&gt;=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>&amp;&amp;<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)<sp/>&gt;=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>greater<sp/>or<sp/>equal<sp/>monomial<sp/>operator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((m1<sp/>&lt;=<sp/>m2<sp/>&amp;&amp;<sp/>m1<sp/>&lt;=<sp/>m1)<sp/>&amp;&amp;<sp/>(m1<sp/>&lt;=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)<sp/>&amp;&amp;<sp/>m1<sp/>&lt;=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>&lt;=<sp/>m2<sp/>&amp;&amp;<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>&lt;=<sp/>m1)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>&lt;=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)<sp/>&amp;&amp;<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)<sp/>&gt;=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>lesser<sp/>or<sp/>equal<sp/>monomial<sp/>operator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARITHMETIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/>m3(3,<sp/>3),<sp/>m4(4,<sp/>4),<sp/>mn3(-3,<sp/>-3),<sp/>mn4(-4,<sp/>-4);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((m3<sp/>+<sp/>m4).get_coeff()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/>((m3<sp/>+<sp/>m4).get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>addition<sp/>operator:<sp/>different<sp/>degree<sp/>monomials<sp/>addition<sp/>didnt<sp/>return<sp/>default<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((m3<sp/>+<sp/>m3).get_coeff()<sp/>==<sp/>6)<sp/>&amp;&amp;<sp/>((m3<sp/>+<sp/>m3).get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)<sp/>+<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)).get_coeff()<sp/>==<sp/>6)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)<sp/>+<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)).get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>addition<sp/>operator:<sp/>positive<sp/>values<sp/>addition<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((mn3<sp/>+<sp/>mn3).get_coeff()<sp/>==<sp/>-6)<sp/>&amp;&amp;<sp/>((mn3<sp/>+<sp/>mn3).get_degree()<sp/>==<sp/>-3)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)<sp/>+<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)).get_coeff()<sp/>==<sp/>-6)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)<sp/>+<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)).get_degree()<sp/>==<sp/>-3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>addition<sp/>operator:<sp/>negative<sp/>values<sp/>addition<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Substraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((m3<sp/>-<sp/>m4).get_coeff()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/>((m3<sp/>-<sp/>m4).get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>substraction<sp/>operator:<sp/>different<sp/>degree<sp/>monomials<sp/>substraction<sp/>didnt<sp/>return<sp/>default<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((m3<sp/>-<sp/>m3).get_coeff()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>((m3<sp/>-<sp/>m3).get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)<sp/>-<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)).get_coeff()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)<sp/>-<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)).get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>substraction<sp/>operator:<sp/>positive<sp/>values<sp/>substraction<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((mn3<sp/>-<sp/>mn3).get_coeff()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>((mn3<sp/>-<sp/>mn3).get_degree()<sp/>==<sp/>-3)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)<sp/>-<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)).get_coeff()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)<sp/>-<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)).get_degree()<sp/>==<sp/>-3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>substraction<sp/>operator:<sp/>negative<sp/>values<sp/>substraction<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((m3<sp/>*<sp/>m4).get_coeff()<sp/>==<sp/>12)<sp/>&amp;&amp;<sp/>((m3<sp/>*<sp/>m4).get_degree()<sp/>==<sp/>7)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)<sp/>*<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)).get_coeff()<sp/>==<sp/>12)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)<sp/>*<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)).get_degree()<sp/>==<sp/>7)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>multiplication<sp/>operator:<sp/>positive<sp/>values<sp/>multiplication<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((mn3<sp/>*<sp/>mn4).get_coeff()<sp/>==<sp/>12)<sp/>&amp;&amp;<sp/>((mn3<sp/>*<sp/>mn4).get_degree()<sp/>==<sp/>-7)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)<sp/>*<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-4,<sp/>-4)).get_coeff()<sp/>==<sp/>12)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)<sp/>*<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-4,<sp/>-4)).get_degree()<sp/>==<sp/>-7)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>multiplication<sp/>operator:<sp/>negative<sp/>values<sp/>multiplication<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((m3<sp/>/<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(0,<sp/>0)).get_coeff()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/>((m3<sp/>/<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(0,<sp/>0)).get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>division<sp/>operator:<sp/>divide<sp/>by<sp/>zero<sp/>didnt<sp/>return<sp/>default<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((m3<sp/>/<sp/>m4).get_coeff()<sp/>==<sp/>0.75)<sp/>&amp;&amp;<sp/>((m3<sp/>/<sp/>m4).get_degree()<sp/>==<sp/>-1)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)<sp/>/<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)).get_coeff()<sp/>==<sp/>0.75)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)<sp/>/<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)).get_degree()<sp/>==<sp/>-1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>division<sp/>operator:<sp/>positive<sp/>values<sp/>division<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((mn3<sp/>/<sp/>mn4).get_coeff()<sp/>==<sp/>0.75)<sp/>&amp;&amp;<sp/>((mn3<sp/>/<sp/>mn4).get_degree()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)<sp/>/<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-4,<sp/>-4)).get_coeff()<sp/>==<sp/>0.75)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)<sp/>/<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-4,<sp/>-4)).get_degree()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>division<sp/>operator:<sp/>negative<sp/>values<sp/>division<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((m3<sp/>%<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(0,<sp/>0)).get_coeff()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/>((m3<sp/>%<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(0,<sp/>0)).get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>modulus<sp/>operator:<sp/>divide<sp/>by<sp/>zero<sp/>didnt<sp/>return<sp/>default<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((m4<sp/>%<sp/>m3).get_coeff()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>((m4<sp/>%<sp/>m3).get_degree()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)<sp/>%<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)).get_coeff()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)<sp/>%<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)).get_degree()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>modulus<sp/>operator:<sp/>positive<sp/>values<sp/>modulus<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((mn4<sp/>%<sp/>mn3).get_coeff()<sp/>==<sp/>-1)<sp/>&amp;&amp;<sp/>((mn4<sp/>%<sp/>mn3).get_degree()<sp/>==<sp/>-1)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-4,<sp/>-4)<sp/>%<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)).get_coeff()<sp/>==<sp/>-1)<sp/>&amp;&amp;<sp/>((<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-4,<sp/>-4)<sp/>%<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>-3)).get_degree()<sp/>==<sp/>-1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>modulus<sp/>operator:<sp/>negative<sp/>values<sp/>modulus<sp/>failed!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss,<sp/>sss;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/>m5(5,<sp/>5),<sp/>mn5(-5,<sp/>-5);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((ss<sp/>&lt;&lt;<sp/>m5).str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;5x^5&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>((sss<sp/>&lt;&lt;<sp/>mn5).str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-5x^-5&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>stream<sp/>operator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MISC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expression<sp/>getter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((m5.get_expression()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;5x^5&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(mn5.<ref refid="classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996" kindref="member">get_expression</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-5x^-5&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>expression<sp/>getter!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>getter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((m5.get_value(2)<sp/>==<sp/>160)<sp/>&amp;&amp;<sp/>(mn5.<ref refid="classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157" kindref="member">get_value</ref>(2)<sp/>==<sp/>-0.15625)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>value<sp/>getter!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Well<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Monomial<sp/>tests<sp/>passed!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102" refid="test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129" kindref="member">test_polynomial</ref>()<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONSTRUCTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>pd;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pd.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_coeff()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>default<sp/>Polynomial<sp/>constructor:<sp/>monomial<sp/>coeff<sp/>is<sp/>not<sp/>default!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pd.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_degree()<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>default<sp/>Polynomial<sp/>constructor:<sp/>monomial<sp/>degree<sp/>is<sp/>not<sp/>default!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>pn(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)}}));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pn.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_coeff()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>normal<sp/>Polynomial<sp/>constructor:<sp/>monomial<sp/>coeff<sp/>is<sp/>not<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pn.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_degree()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>normal<sp/>Polynomial<sp/>constructor:<sp/>monomial<sp/>degree<sp/>is<sp/>not<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pn.<ref refid="classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963" kindref="member">get_degree</ref>()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>normal<sp/>Polynomial<sp/>constructor:<sp/>polynomial<sp/>degree<sp/>is<sp/>not<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>pl({<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)});</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pl.get_monomials().crbegin()-&gt;second.get_coeff()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>list<sp/>Polynomial<sp/>constructor:<sp/>last<sp/>monomial<sp/>coeff<sp/>is<sp/>not<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pl.get_monomials().crbegin()-&gt;second.get_degree()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>list<sp/>Polynomial<sp/>constructor:<sp/>last<sp/>monomial<sp/>degree<sp/>is<sp/>not<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pl.get_monomials().cbegin()-&gt;second.get_coeff()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>list<sp/>Polynomial<sp/>constructor:<sp/>first<sp/>monomial<sp/>coeff<sp/>is<sp/>not<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pl.get_monomials().cbegin()-&gt;second.get_degree()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>list<sp/>Polynomial<sp/>constructor:<sp/>first<sp/>monomial<sp/>degree<sp/>is<sp/>not<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pl.get_degree()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>list<sp/>Polynomial<sp/>constructor:<sp/>polynomial<sp/>degree<sp/>is<sp/>not<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>pv(std::vector&lt;Monomial&gt;({<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pv.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_coeff()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>vector<sp/>Polynomial<sp/>constructor:<sp/>last<sp/>monomial<sp/>coeff<sp/>is<sp/>not<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pv.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_degree()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>vector<sp/>Polynomial<sp/>constructor:<sp/>last<sp/>monomial<sp/>degree<sp/>is<sp/>not<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pv.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().cbegin()-&gt;second.get_coeff()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>vector<sp/>Polynomial<sp/>constructor:<sp/>first<sp/>monomial<sp/>coeff<sp/>is<sp/>not<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pv.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().cbegin()-&gt;second.get_degree()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>vector<sp/>Polynomial<sp/>constructor:<sp/>first<sp/>monomial<sp/>degree<sp/>is<sp/>not<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pv.<ref refid="classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963" kindref="member">get_degree</ref>()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>vector<sp/>Polynomial<sp/>constructor:<sp/>polynomial<sp/>degree<sp/>is<sp/>not<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>pc(pn);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pc.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_coeff()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>Polynomial<sp/>constructor:<sp/>coeff<sp/>is<sp/>not<sp/>copy<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pc.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_degree()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>Polynomial<sp/>constructor:<sp/>degree<sp/>is<sp/>not<sp/>copy<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pc.<ref refid="classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963" kindref="member">get_degree</ref>()<sp/>==<sp/>1)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>Polynomial<sp/>constructor:<sp/>polynomial<sp/>degree<sp/>is<sp/>not<sp/>copy<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>pm(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}})));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pm.get_monomials().crbegin()-&gt;second.get_coeff()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>Polynomial<sp/>constructor:<sp/>coeff<sp/>is<sp/>not<sp/>move<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pm.get_monomials().crbegin()-&gt;second.get_degree()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>Polynomial<sp/>constructor:<sp/>degree<sp/>is<sp/>not<sp/>move<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pm.get_degree()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>Polynomial<sp/>constructor:<sp/>polynomial<sp/>degree<sp/>is<sp/>not<sp/>move<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSIGMENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>assigment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>pc<sp/>=<sp/>pm;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pc.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_coeff()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>assigment<sp/>operator:<sp/>coeff<sp/>is<sp/>not<sp/>copy<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pc.<ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">get_monomials</ref>().crbegin()-&gt;second.get_degree()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>assigment<sp/>operator:<sp/>degree<sp/>is<sp/>not<sp/>copy<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pc.<ref refid="classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963" kindref="member">get_degree</ref>()<sp/>==<sp/>2)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>copy<sp/>assigment<sp/>operator:<sp/>polynomial<sp/>degree<sp/>is<sp/>not<sp/>copy<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>assigment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>pm<sp/>=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)}}));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pm.get_monomials().crbegin()-&gt;second.get_coeff()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>assigment<sp/>operator:<sp/>coeff<sp/>is<sp/>not<sp/>move<sp/>coeff!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pm.get_monomials().crbegin()-&gt;second.get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>assigment<sp/>operator:<sp/>degree<sp/>is<sp/>not<sp/>move<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((pm.get_degree()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>move<sp/>assigment<sp/>operator:<sp/>polynomial<sp/>degree<sp/>is<sp/>not<sp/>move<sp/>degree!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMPARISON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>p2(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}})),<sp/>p4(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Equality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p2<sp/>==<sp/>p2)<sp/>&amp;&amp;<sp/>(p2<sp/>==<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}})))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>==<sp/>p2)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>==<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}})))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>equal<sp/>operator:<sp/>equal<sp/>monomials<sp/>are<sp/>not<sp/>diffent!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p2<sp/>!=<sp/>p4)<sp/>&amp;&amp;<sp/>(p2<sp/>!=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}})))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}))<sp/>!=<sp/>p2)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>!=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}})))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>equal<sp/>operator:<sp/>diffent<sp/>monomials<sp/>are<sp/>not<sp/>equal!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p4<sp/>&gt;<sp/>p2)<sp/>&amp;&amp;<sp/>(p4<sp/>&gt;<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}})))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}))<sp/>&gt;<sp/>p2)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}))<sp/>&gt;<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}})))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>greater<sp/>monomial<sp/>operator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p2<sp/>&lt;<sp/>p4)<sp/>&amp;&amp;<sp/>(p2<sp/>&lt;<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}})))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>&lt;<sp/>p4)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>&lt;<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}})))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>lesser<sp/>monomial<sp/>operator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p4<sp/>&gt;=<sp/>p2<sp/>&amp;&amp;<sp/>p4<sp/>&gt;=<sp/>p4)<sp/>&amp;&amp;<sp/>(p4<sp/>&gt;=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>&amp;&amp;<sp/>p4<sp/>&gt;=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}})))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}))<sp/>&gt;=<sp/>p2<sp/>&amp;&amp;<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}))<sp/>&gt;=<sp/>p4)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}))<sp/>&gt;=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>&amp;&amp;<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}))<sp/>&gt;=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}})))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>greater<sp/>or<sp/>equal<sp/>monomial<sp/>operator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((p2<sp/>&lt;=<sp/>p4<sp/>&amp;&amp;<sp/>p2<sp/>&lt;=<sp/>p2)<sp/>&amp;&amp;<sp/>(p2<sp/>&lt;=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}))<sp/>&amp;&amp;<sp/>p2<sp/>&lt;=<sp/>Polynomial(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}})))<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>&lt;=<sp/>p4<sp/>&amp;&amp;<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>&lt;=<sp/>p2)<sp/>&amp;&amp;<sp/>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>&lt;=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>4)}}))<sp/>&amp;&amp;<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}}))<sp/>&gt;=<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}})))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>lesser<sp/>or<sp/>equal<sp/>monomial<sp/>operator!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARITHMETIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>pn1(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)}})),<sp/>pn3(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>1)},<sp/>{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)}}));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pn1<sp/>+<sp/>pn3<sp/>==<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)},<sp/>{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(3,<sp/>3)}}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>addition<sp/>operator:<sp/>wrong<sp/>results&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Substraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pn1<sp/>-<sp/>pn3<sp/>==<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>2)},<sp/>{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-3,<sp/>3)}}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>substraction<sp/>operator:<sp/>wrong<sp/>results&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pn1<sp/>*<sp/>pn3<sp/>==<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>2)},<sp/>{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(4,<sp/>3)},<sp/>{4,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(6,<sp/>4)},<sp/>{5,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(6,<sp/>5)}}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>multiplication<sp/>operator:<sp/>wrong<sp/>results&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pn3<sp/>/<sp/>pn1<sp/>==<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{0,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(-1.5,<sp/>0)},<sp/>{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1.5,<sp/>1)}}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>division<sp/>operator:<sp/>wrong<sp/>results&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pn3<sp/>%<sp/>pn1<sp/>==<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(5,<sp/>1)}}))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>modulus<sp/>operator:<sp/>wrong<sp/>results&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>ps(std::map&lt;int,<sp/>Monomial&gt;({{0,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>0)},<sp/>{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>2)}}));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(((ss<sp/>&lt;&lt;<sp/>ps).str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1x^2<sp/>1x^1<sp/>1x^0<sp/>&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>stream<sp/>operator!&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//&quot;x^2<sp/>+<sp/>x<sp/>+<sp/>1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MISC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expression<sp/>getter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((ps.<ref refid="classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b" kindref="member">get_expression</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1x^2<sp/>1x^1<sp/>1x^0<sp/>&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>expression<sp/>getter!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>getter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((ps.<ref refid="classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3" kindref="member">get_value</ref>(1)<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/>(ps.<ref refid="classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3" kindref="member">get_value</ref>(2)<sp/>==<sp/>7)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>value<sp/>getter!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CALCULUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Derivative<sp/>getter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((ps.<ref refid="classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37" kindref="member">get_derivative</ref>()<sp/>==<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{0,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>0)},<sp/>{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(2,<sp/>1)}})))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>derivative<sp/>getter!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Integral<sp/>getter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((ps.<ref refid="classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d" kindref="member">get_integral</ref>()<sp/>==<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(std::map&lt;int,<sp/>Monomial&gt;({{1,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1,<sp/>1)},<sp/>{2,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(0.5,<sp/>2)},<sp/>{3,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>(1.0/3.0,<sp/>3)}})))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>on<sp/>integral<sp/>getter!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Well<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Polynomial<sp/>tests<sp/>passed!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206" refid="test_2emath_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_2emath_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f" kindref="member">test_monomial</ref>()<sp/>+<sp/><ref refid="test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129" kindref="member">test_polynomial</ref>();}</highlight></codeline>
    </programlisting>
    <location file="test/emath.cpp"/>
  </compounddef>
</doxygen>
