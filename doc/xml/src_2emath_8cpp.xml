<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="src_2emath_8cpp" kind="file" language="C++">
    <compoundname>emath.cpp</compoundname>
    <includes refid="emath_8h" local="yes">emath.h</includes>
    <incdepgraph>
      <node id="2">
        <label>emath.h</label>
        <link refid="emath_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/emath.cpp</label>
        <link refid="src_2emath_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>complex</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="9">
        <label>set.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="8">
        <label>unsupported/Eigen/Polynomials</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
<para>This is the main source file for the mathematical equation operations. </para>
    </briefdescription>
    <detaileddescription>
<para>This file implements the functions declared in <ref refid="emath_8h" kindref="compound">emath.h</ref>.<linebreak/>
It consists of two classes, the Monomial class and the Polynomial class.<linebreak/>
The Monomial class implements all the functions, operators, and properties for representing and operating monomials.<linebreak/>
The Polynomial class implements all the functions, operators, and properties for representing and operating polynomials.<linebreak/>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="emath_8h" kindref="compound">emath.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="classemth_1_1Arithmetic_1adddfba367517025753ae37062ac6f483" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Arithmetic_1adddfba367517025753ae37062ac6f483" kindref="member">emth::Arithmetic::get_divisors</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>std::vector&lt;int&gt;&amp;<sp/>v)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit(std::sqrt(n));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>limit;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fmod(n,<sp/>i)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(i);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>n<sp/>/<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(n<sp/>/<sp/>i);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30" refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" kindref="member">emth::Monomial::Monomial</ref>()<sp/>noexcept<sp/>:<sp/>coeff(0),<sp/>degree(0)<sp/>{}</highlight></codeline>
<codeline lineno="36" refid="classemth_1_1Monomial_1a70ba615f776f89452b3b11bb9dfe045e" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" kindref="member">emth::Monomial::Monomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgr)<sp/>noexcept<sp/>:<sp/>coeff(cf),<sp/>degree(dgr)<sp/>{}</highlight></codeline>
<codeline lineno="41" refid="classemth_1_1Monomial_1aa5fc7752eb6a5db663872dd7298140c1" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" kindref="member">emth::Monomial::Monomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/>noexcept<sp/>:<sp/>coeff(ogn.coeff),<sp/>degree(ogn.degree)<sp/>{}</highlight></codeline>
<codeline lineno="46" refid="classemth_1_1Monomial_1a0d77a762defbcd2cb1925e3258f6158f" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" kindref="member">emth::Monomial::Monomial</ref>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;&amp;<sp/>ogn)<sp/>noexcept<sp/>:<sp/>coeff(std::move(ogn.coeff)),<sp/>degree(std::move(ogn.degree))<sp/>{}</highlight></codeline>
<codeline lineno="52" refid="classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4" kindref="member">emth::Monomial::operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/>copy(ogn);<sp/>this-&gt;swap(copy);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="58" refid="classemth_1_1Monomial_1a7ea9ffbef1c53c8e0f7a9bfda2dcb691" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4" kindref="member">emth::Monomial::operator =</ref>(<ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{this-&gt;swap(ogn);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="65" refid="classemth_1_1Monomial_1a2f9d14fa6443fc160258121c7907b989" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a2f9d14fa6443fc160258121c7907b989" kindref="member">emth::Monomial::operator ==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((this-&gt;coeff<sp/>==<sp/>ogn.coeff)<sp/>&amp;&amp;<sp/>(this-&gt;degree<sp/>==<sp/>ogn.degree));}</highlight></codeline>
<codeline lineno="72" refid="classemth_1_1Monomial_1ab7f80ead25e2f5d4ad80cdbbfe49d5e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1ab7f80ead25e2f5d4ad80cdbbfe49d5e3" kindref="member">emth::Monomial::operator !=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>ogn));}</highlight></codeline>
<codeline lineno="79" refid="classemth_1_1Monomial_1a995abc13b689075b21b43a30ce043e72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a995abc13b689075b21b43a30ce043e72" kindref="member">emth::Monomial::operator &gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;degree<sp/>&gt;<sp/>ogn.degree);};</highlight></codeline>
<codeline lineno="86" refid="classemth_1_1Monomial_1a33c3c8003322cc2a8f2c4f2e1b44a387" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a33c3c8003322cc2a8f2c4f2e1b44a387" kindref="member">emth::Monomial::operator &lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;degree<sp/>&lt;<sp/>ogn.degree);};</highlight></codeline>
<codeline lineno="93" refid="classemth_1_1Monomial_1a36079411f2ae6f90e71a09b6723ecf35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a36079411f2ae6f90e71a09b6723ecf35" kindref="member">emth::Monomial::operator &gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;degree<sp/>&gt;=<sp/>ogn.degree);};</highlight></codeline>
<codeline lineno="100" refid="classemth_1_1Monomial_1a80fe0433858cf335c1e29ff15aa4bcb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a80fe0433858cf335c1e29ff15aa4bcb8" kindref="member">emth::Monomial::operator &lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;degree<sp/>&lt;=<sp/>ogn.degree);};</highlight></codeline>
<codeline lineno="106" refid="classemth_1_1Monomial_1aa545290af910fc7a0c68bc02decd41c5" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1aa545290af910fc7a0c68bc02decd41c5" kindref="member">emth::Monomial::operator +</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>+=<sp/>ogn;}</highlight></codeline>
<codeline lineno="112" refid="classemth_1_1Monomial_1aee07c6d65bc594b8eaaa4d0299840e05" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1aee07c6d65bc594b8eaaa4d0299840e05" kindref="member">emth::Monomial::operator -</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>-=<sp/>ogn;}</highlight></codeline>
<codeline lineno="118" refid="classemth_1_1Monomial_1a98a931372dbd0ddafe82ce5601f30836" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1a98a931372dbd0ddafe82ce5601f30836" kindref="member">emth::Monomial::operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>*=<sp/>ogn;}</highlight></codeline>
<codeline lineno="124" refid="classemth_1_1Monomial_1a55982755a6223cbf977e55979fcad8ff" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1a55982755a6223cbf977e55979fcad8ff" kindref="member">emth::Monomial::operator /</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>/=<sp/>ogn;}</highlight></codeline>
<codeline lineno="130" refid="classemth_1_1Monomial_1a8316e22fbd1420a2302fcf8bd6d3b6c2" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1a8316e22fbd1420a2302fcf8bd6d3b6c2" kindref="member">emth::Monomial::operator %</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>%=<sp/>ogn;}</highlight></codeline>
<codeline lineno="136" refid="classemth_1_1Monomial_1a7cac7880021c7cf783daa15ee00b94d1" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a7cac7880021c7cf783daa15ee00b94d1" kindref="member">emth::Monomial::operator +=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((this-&gt;degree<sp/>==<sp/>ogn.degree)<sp/>||<sp/>this-&gt;coeff<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;coeff<sp/>==<sp/>0)<sp/>{this-&gt;degree<sp/>=<sp/>ogn.degree;}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;coeff<sp/>+=<sp/>ogn.coeff;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148" refid="classemth_1_1Monomial_1a45a932afba1f1f38c5ca16b6c16fd3c8" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a45a932afba1f1f38c5ca16b6c16fd3c8" kindref="member">emth::Monomial::operator -=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((this-&gt;degree<sp/>==<sp/>ogn.degree)<sp/>||<sp/>this-&gt;coeff<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;coeff<sp/>==<sp/>0)<sp/>{this-&gt;degree<sp/>=<sp/>ogn.degree;}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;coeff<sp/>-=<sp/>ogn.coeff;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160" refid="classemth_1_1Monomial_1a59e6ec6722fe75349e84c6c3397279f5" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a59e6ec6722fe75349e84c6c3397279f5" kindref="member">emth::Monomial::operator *=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;coeff<sp/>*=<sp/>ogn.coeff;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;degree<sp/>+=<sp/>ogn.degree;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170" refid="classemth_1_1Monomial_1a1bdb99f916437cd3a7c127b71bec5787" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a1bdb99f916437cd3a7c127b71bec5787" kindref="member">emth::Monomial::operator /=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ogn.coeff<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;coeff<sp/>/=<sp/>ogn.coeff;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;degree<sp/>-=<sp/>ogn.degree;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182" refid="classemth_1_1Monomial_1ab4c89014e13b2f35f264492486a935fe" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1ab4c89014e13b2f35f264492486a935fe" kindref="member">emth::Monomial::operator %=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ogn.coeff<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;coeff<sp/>=<sp/>std::fmod(this-&gt;coeff,<sp/>ogn.coeff);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;degree<sp/>-=<sp/>ogn.degree;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">std::stringstream&amp;<sp/>emth::operator&lt;&lt;(std::stringstream&amp;<sp/>ss,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.coeff<sp/>!=<sp/>1.0<sp/>||<sp/>m.degree<sp/>==<sp/>0)<sp/>{ss<sp/>&lt;&lt;<sp/>m.coeff;}<sp/></highlight><highlight class="comment">//if<sp/>(m.coeff<sp/>&gt;<sp/>0)<sp/>{ss<sp/>&lt;&lt;<sp/>&quot;+<sp/>&quot;;}<sp/>else<sp/>{ss<sp/>&lt;&lt;<sp/>&quot;-<sp/>&quot;;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m.degree)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x^&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m.degree;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal">std::ostream&amp;<sp/>emth::operator&lt;&lt;(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.coeff<sp/>!=<sp/>1.0<sp/>||<sp/>m.degree<sp/>==<sp/>0)<sp/>{out<sp/>&lt;&lt;<sp/>m.coeff;}<sp/></highlight><highlight class="comment">//if<sp/>(m.coeff<sp/>&gt;<sp/>0)<sp/>{out<sp/>&lt;&lt;<sp/>&quot;+<sp/>&quot;;}<sp/>else<sp/>{out<sp/>&lt;&lt;<sp/>&quot;-<sp/>&quot;;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m.degree)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x^&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m.degree;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221" refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" kindref="member">emth::Monomial::get_coeff</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;coeff;}</highlight></codeline>
<codeline lineno="226" refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">emth::Monomial::get_degree</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;degree;}</highlight></codeline>
<codeline lineno="231" refid="classemth_1_1Monomial_1adae9aaac815a7c86ec651e5bdb3d3043" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1adae9aaac815a7c86ec651e5bdb3d3043" kindref="member">emth::Monomial::set_coeff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cf)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{this-&gt;coeff<sp/>=<sp/>cf;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="236" refid="classemth_1_1Monomial_1ab695cba07bcbf08cfec7d32e0bf4cc20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1ab695cba07bcbf08cfec7d32e0bf4cc20" kindref="member">emth::Monomial::set_degree</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgr)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{this-&gt;degree<sp/>=<sp/>dgr;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="241" refid="classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996" kindref="member">emth::Monomial::get_expression</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::stringstream()<sp/>&lt;&lt;<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">).str();}</highlight></codeline>
<codeline lineno="247" refid="classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157" kindref="member">emth::Monomial::get_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;coeff<sp/>*<sp/>std::pow(x,<sp/>this-&gt;degree));};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>emth::Monomial::swap(<ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(this-&gt;coeff,<sp/>ogn.coeff);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(this-&gt;degree,<sp/>ogn.degree);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="classemth_1_1Monomial_1aecedb04edd52a33ba0ee110eedbd74db" kindref="member">emth::Monomial::~Monomial</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264" refid="classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206" kindref="member">emth::Polynomial::Polynomial</ref>()<sp/>noexcept<sp/>{this-&gt;monomials[0]<sp/>=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(0,<sp/>0);}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><ref refid="classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206" kindref="member">emth::Polynomial::Polynomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>emth::Monomial&gt;<sp/>mns)<sp/>noexcept<sp/>:<sp/>monomials(mns)<sp/>{}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><ref refid="classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206" kindref="member">emth::Polynomial::Polynomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;emth::Monomial&gt;<sp/>mns)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>mn:<sp/>mns)<sp/>{this-&gt;monomials.emplace(mn.get_degree(),<sp/>mn);}}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><ref refid="classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206" kindref="member">emth::Polynomial::Polynomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;emth::Monomial&gt;<sp/>mns)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>mn:<sp/>mns)<sp/>{this-&gt;monomials.emplace(mn.get_degree(),<sp/>mn);}}</highlight></codeline>
<codeline lineno="284" refid="classemth_1_1Polynomial_1a3612ca54a3bef015a9809d77af2be355" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206" kindref="member">emth::Polynomial::Polynomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/>noexcept<sp/>:<sp/>monomials(ogn.monomials)<sp/>{}<sp/></highlight></codeline>
<codeline lineno="289" refid="classemth_1_1Polynomial_1a3f55b493797c89e9079c7019fb905059" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206" kindref="member">emth::Polynomial::Polynomial</ref>(<ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;&amp;<sp/>ogn)<sp/>noexcept<sp/>:<sp/>monomials(std::move(ogn.monomials))<sp/>{}</highlight></codeline>
<codeline lineno="295" refid="classemth_1_1Polynomial_1a33ba807b5465ead26edd077d8289f4f3" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Polynomial_1a33ba807b5465ead26edd077d8289f4f3" kindref="member">emth::Polynomial::operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref><sp/>copy(ogn);<sp/>this-&gt;swap(copy);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="301" refid="classemth_1_1Polynomial_1a93818b33532e3f8e80fa614ca8287479" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Polynomial_1a33ba807b5465ead26edd077d8289f4f3" kindref="member">emth::Polynomial::operator =</ref>(<ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{this-&gt;swap(ogn);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="308" refid="classemth_1_1Polynomial_1ad042381e1713be21b332d3f8fbdfd0a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1ad042381e1713be21b332d3f8fbdfd0a7" kindref="member">emth::Polynomial::operator ==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((this-&gt;get_degree()<sp/>==<sp/>ogn.get_degree())<sp/>&amp;&amp;<sp/>(this-&gt;monomials<sp/>==<sp/>ogn.monomials));}</highlight></codeline>
<codeline lineno="315" refid="classemth_1_1Polynomial_1a40fefffeb0043d193d5aa7ecb3adba55" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1a40fefffeb0043d193d5aa7ecb3adba55" kindref="member">emth::Polynomial::operator !=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>ogn));}</highlight></codeline>
<codeline lineno="322" refid="classemth_1_1Polynomial_1ae358f6f9b93783601af6999b67e0dafb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1ae358f6f9b93783601af6999b67e0dafb" kindref="member">emth::Polynomial::operator &gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;get_degree()<sp/>&gt;<sp/>ogn.get_degree());};</highlight></codeline>
<codeline lineno="329" refid="classemth_1_1Polynomial_1a0f0640fcb0dd0a59b685a646d494bfc7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1a0f0640fcb0dd0a59b685a646d494bfc7" kindref="member">emth::Polynomial::operator &lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;get_degree()<sp/>&lt;<sp/>ogn.get_degree());};</highlight></codeline>
<codeline lineno="336" refid="classemth_1_1Polynomial_1a2321b93b1482b6677dbd125739848724" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1a2321b93b1482b6677dbd125739848724" kindref="member">emth::Polynomial::operator &gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;get_degree()<sp/>&gt;=<sp/>ogn.get_degree());};</highlight></codeline>
<codeline lineno="343" refid="classemth_1_1Polynomial_1a7b234cebd032016c0a8ece92a4f68141" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1a7b234cebd032016c0a8ece92a4f68141" kindref="member">emth::Polynomial::operator &lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;get_degree()<sp/>&lt;=<sp/>ogn.get_degree());};</highlight></codeline>
<codeline lineno="349" refid="classemth_1_1Polynomial_1a9d46082ad38edc17f875127208626281" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref><sp/><ref refid="classemth_1_1Polynomial_1a9d46082ad38edc17f875127208626281" kindref="member">emth::Polynomial::operator +</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>+=<sp/>ogn;}</highlight></codeline>
<codeline lineno="355" refid="classemth_1_1Polynomial_1a1cd22ae48bfcb14b53835730091e5f4d" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref><sp/><ref refid="classemth_1_1Polynomial_1a1cd22ae48bfcb14b53835730091e5f4d" kindref="member">emth::Polynomial::operator -</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>-=<sp/>ogn;}</highlight></codeline>
<codeline lineno="361" refid="classemth_1_1Polynomial_1ac461b9aeb93c33d540f0a918bdefd203" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref><sp/><ref refid="classemth_1_1Polynomial_1ac461b9aeb93c33d540f0a918bdefd203" kindref="member">emth::Polynomial::operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>*=<sp/>ogn;}</highlight></codeline>
<codeline lineno="367" refid="classemth_1_1Polynomial_1aa2a054dcc203257bfc3d06621ce876b1" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref><sp/><ref refid="classemth_1_1Polynomial_1aa2a054dcc203257bfc3d06621ce876b1" kindref="member">emth::Polynomial::operator /</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>/=<sp/>ogn;}</highlight></codeline>
<codeline lineno="373" refid="classemth_1_1Polynomial_1a56a499385ad24715b1240611217277c5" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref><sp/><ref refid="classemth_1_1Polynomial_1a56a499385ad24715b1240611217277c5" kindref="member">emth::Polynomial::operator %</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>%=<sp/>ogn;}</highlight></codeline>
<codeline lineno="379" refid="classemth_1_1Polynomial_1a791a5aa2207acd2fccc4124ff36eb0bf" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Polynomial_1a791a5aa2207acd2fccc4124ff36eb0bf" kindref="member">emth::Polynomial::operator +=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>int,<sp/>emth::Monomial&gt;&amp;<sp/>kv<sp/>:<sp/>ogn.monomials)<sp/>{this-&gt;monomials[kv.first]<sp/>+=<sp/>kv.second;}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;redux();</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388" refid="classemth_1_1Polynomial_1af545354b4dade3e286be26207d02a442" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Polynomial_1af545354b4dade3e286be26207d02a442" kindref="member">emth::Polynomial::operator -=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>int,<sp/>emth::Monomial&gt;&amp;<sp/>kv<sp/>:<sp/>ogn.monomials)<sp/>{this-&gt;monomials[kv.first]<sp/>-=<sp/>kv.second;}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;redux();</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397" refid="classemth_1_1Polynomial_1abdeb3769c43eec881ae8ed1a20a5d01d" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Polynomial_1abdeb3769c43eec881ae8ed1a20a5d01d" kindref="member">emth::Polynomial::operator *=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>emth::Monomial&gt;<sp/>rs;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>int,<sp/>emth::Monomial&gt;&amp;<sp/>kv<sp/>:<sp/>this-&gt;monomials)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>int,<sp/>emth::Monomial&gt;&amp;<sp/>kkvv<sp/>:<sp/>ogn.monomials)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rs[kv.first<sp/>+<sp/>kkvv.first]<sp/>+=<sp/>kv.second<sp/>*<sp/>kkvv.second;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;monomials<sp/>=<sp/>std::move(rs);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;redux();</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412" refid="classemth_1_1Polynomial_1ac5a003db2381c99c97c4a78341145b26" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Polynomial_1ac5a003db2381c99c97c4a78341145b26" kindref="member">emth::Polynomial::operator /=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ogn.monomials.empty())<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref><sp/>quotient;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!this-&gt;monomials.empty()<sp/>&amp;&amp;<sp/>this-&gt;monomials.crbegin()-&gt;second.get_degree()<sp/>&gt;=<sp/>ogn.monomials.crbegin()-&gt;second.get_degree())<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref><sp/>mon<sp/>=<sp/>this-&gt;monomials.crbegin()-&gt;second<sp/>/<sp/>ogn.monomials.crbegin()-&gt;second;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quotient.monomials[mon.<ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()]<sp/>=<sp/>mon;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-=<sp/>(ogn<sp/>*<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>({mon}));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;monomials<sp/>=<sp/>quotient.monomials;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;redux();</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429" refid="classemth_1_1Polynomial_1a2e6bd9b16b732b38caabf950acfd5cb2" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Polynomial_1a2e6bd9b16b732b38caabf950acfd5cb2" kindref="member">emth::Polynomial::operator %=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ogn.monomials.empty())<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!this-&gt;monomials.empty()<sp/>&amp;&amp;<sp/>this-&gt;monomials.crbegin()-&gt;second.get_degree()<sp/>&gt;=<sp/>ogn.monomials.crbegin()-&gt;second.get_degree())<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref><sp/>mon<sp/>=<sp/>this-&gt;monomials.crbegin()-&gt;second<sp/>/<sp/>ogn.monomials.crbegin()-&gt;second;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-=<sp/>(ogn<sp/>*<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>({mon}));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;redux();</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal">std::stringstream&amp;<sp/>emth::operator&lt;&lt;(std::stringstream&amp;<sp/>ss,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>p)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse_iterator&lt;std::map&lt;const<sp/>int,<sp/>emth::Monomial&gt;::const_iterator&gt;<sp/>it<sp/>=<sp/>p.monomials.crbegin();<sp/>ss<sp/>&lt;&lt;<sp/>it++-&gt;second;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::reverse_iterator&lt;std::map&lt;const<sp/>int,<sp/>emth::Monomial&gt;::const_iterator&gt;<sp/>_it<sp/>=<sp/>it;<sp/>_it<sp/>!=<sp/>p.monomials.crend();<sp/>_it++)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_it-&gt;second.get_coeff()<sp/>&gt;<sp/>0)<sp/>{ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal">;<sp/>ss<sp/>&lt;&lt;<sp/>_it-&gt;second;}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal">;<sp/>ss<sp/>&lt;&lt;<sp/>_it-&gt;second.get_expression().erase(0,<sp/>1);}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal">std::ostream&amp;<sp/>emth::operator&lt;&lt;(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>p)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse_iterator&lt;std::map&lt;const<sp/>int,<sp/>emth::Monomial&gt;::const_iterator&gt;<sp/>it<sp/>=<sp/>p.monomials.crbegin();<sp/>out<sp/>&lt;&lt;<sp/>it++-&gt;second;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::reverse_iterator&lt;std::map&lt;const<sp/>int,<sp/>emth::Monomial&gt;::const_iterator&gt;<sp/>_it<sp/>=<sp/>it;<sp/>_it<sp/>!=<sp/>p.monomials.crend();<sp/>_it++)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_it-&gt;second.get_coeff()<sp/>&gt;<sp/>0)<sp/>{out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal">;<sp/>out<sp/>&lt;&lt;<sp/>_it-&gt;second;}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal">;<sp/>out<sp/>&lt;&lt;<sp/>_it-&gt;second.get_expression().erase(0,<sp/>1);}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468" refid="classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963" kindref="member">emth::Polynomial::get_degree</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;monomials.crbegin()-&gt;first;}</highlight></codeline>
<codeline lineno="473" refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" refkind="member"><highlight class="normal">std::map&lt;int,<sp/>emth::Monomial&gt;<sp/><ref refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" kindref="member">emth::Polynomial::get_monomials</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;monomials;}</highlight></codeline>
<codeline lineno="478" refid="classemth_1_1Polynomial_1a66649c1d2b624555d375096e27bc9855" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1a66649c1d2b624555d375096e27bc9855" kindref="member">emth::Polynomial::is_empty</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;monomials.empty();}</highlight></codeline>
<codeline lineno="484" refid="classemth_1_1Polynomial_1a1dc4825c3d5005949f0869e204e4fedc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1a1dc4825c3d5005949f0869e204e4fedc" kindref="member">emth::Polynomial::push_monomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;<sp/>m)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;push_monomial(<ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(m));};</highlight></codeline>
<codeline lineno="490" refid="classemth_1_1Polynomial_1acd1befa11dd8d4e3da213114dc88cff7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1a1dc4825c3d5005949f0869e204e4fedc" kindref="member">emth::Polynomial::push_monomial</ref>(<ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>&amp;&amp;<sp/>m)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.<ref refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" kindref="member">get_coeff</ref>()<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;monomials[m.<ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()]<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;redux();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal">};</highlight></codeline>
<codeline lineno="500" refid="classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b" kindref="member">emth::Polynomial::get_expression</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::stringstream()<sp/>&lt;&lt;<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">).str();}</highlight></codeline>
<codeline lineno="506" refid="classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3" kindref="member">emth::Polynomial::get_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>int,<sp/>emth::Monomial&gt;&amp;<sp/>kv:<sp/>this-&gt;monomials)<sp/>{y<sp/>+=<sp/>kv.second.get_value(x);}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">};</highlight></codeline>
<codeline lineno="515" refid="classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref><sp/><ref refid="classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37" kindref="member">emth::Polynomial::get_derivative</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>emth::Monomial&gt;<sp/>fdx;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>int,<sp/>emth::Monomial&gt;&amp;<sp/>kv:<sp/>this-&gt;monomials)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kv.second.get_degree()<sp/>!=<sp/>0)<sp/>{fdx[kv.second.get_degree()<sp/>-<sp/>1]<sp/>=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(kv.second.get_coeff()<sp/>*<sp/>kv.second.get_degree(),<sp/>kv.second.get_degree()<sp/>-<sp/>1);}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>(std::move(fdx)).redux();</highlight></codeline>
<codeline lineno="521"><highlight class="normal">};</highlight></codeline>
<codeline lineno="526" refid="classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d" refkind="member"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref><sp/><ref refid="classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d" kindref="member">emth::Polynomial::get_integral</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>emth::Monomial&gt;<sp/>sdx;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>int,<sp/>emth::Monomial&gt;&amp;<sp/>kv:<sp/>this-&gt;monomials)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdx[kv.second.get_degree()<sp/>+<sp/>1]<sp/>=<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(kv.second.get_coeff()<sp/>/<sp/>(kv.second.get_degree()<sp/>+<sp/>1),<sp/>kv.second.get_degree()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>(std::move(sdx)).redux();</highlight></codeline>
<codeline lineno="532"><highlight class="normal">};</highlight></codeline>
<codeline lineno="538" refid="classemth_1_1Polynomial_1adcba2128b5bfcc6ee15023684edc53f2" refkind="member"><highlight class="normal">std::vector&lt;std::complex&lt;double&gt;&gt;<sp/><ref refid="classemth_1_1Polynomial_1adcba2128b5bfcc6ee15023684edc53f2" kindref="member">emth::Polynomial::get_roots</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>cfs(this-&gt;get_degree()+1);<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>int,<sp/>emth::Monomial&gt;&amp;<sp/>kv:<sp/>this-&gt;monomials)<sp/>{cfs[kv.first]<sp/>=<sp/>kv.second.get_coeff();}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::PolynomialSolver&lt;double,<sp/>Eigen::Dynamic&gt;::RootsType<sp/>rts<sp/>=<sp/><sp/>Eigen::PolynomialSolver&lt;double,<sp/>Eigen::Dynamic&gt;(cfs).roots();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::complex&lt;double&gt;&gt;<sp/>roots;<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rt:<sp/>rts)<sp/>{roots.push_back(std::complex(rt.real(),<sp/>rt.imag()));};</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>roots;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>emth::Polynomial::swap(<ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(this-&gt;monomials,<sp/>ogn.monomials);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>&amp;<sp/>emth::Polynomial::redux()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>ks;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>int,<sp/>emth::Monomial&gt;&amp;<sp/>kv:<sp/>this-&gt;monomials)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kv.second.get_coeff()<sp/>==<sp/>0)<sp/>{ks.push_back(kv.first);}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>k:<sp/>ks)<sp/>{this-&gt;monomials.erase(k);}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><ref refid="classemth_1_1Polynomial_1a056e1df4102b0d0add0e8e2805401b82" kindref="member">emth::Polynomial::~Polynomial</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
    </programlisting>
    <location file="src/emath.cpp"/>
  </compounddef>
</doxygen>
