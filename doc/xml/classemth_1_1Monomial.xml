<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classemth_1_1Monomial" kind="class" language="C++" prot="public">
    <compoundname>emth::Monomial</compoundname>
    <includes refid="emath_8h" local="no">emath.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemth_1_1Monomial_1a997731ccf2707a956c8e236b25451702" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double emth::Monomial::coeff</definition>
        <argsstring></argsstring>
        <name>coeff</name>
        <qualifiedname>emth::Monomial::coeff</qualifiedname>
        <briefdescription>
<para>The coefficient of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="376" column="20" bodyfile="include/emath.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemth_1_1Monomial_1a7ac5ee0ccb8199fb3dc40d93059d95ba" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int emth::Monomial::degree</definition>
        <argsstring></argsstring>
        <name>degree</name>
        <qualifiedname>emth::Monomial::degree</qualifiedname>
        <briefdescription>
<para>The degree of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="380" column="17" bodyfile="include/emath.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Monomial::Monomial</definition>
        <argsstring>() noexcept</argsstring>
        <name>Monomial</name>
        <qualifiedname>emth::Monomial::Monomial</qualifiedname>
        <briefdescription>
<para>Default constructor for when initialized with no arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="192" column="13" bodyfile="src/emath.cpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a70ba615f776f89452b3b11bb9dfe045e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Monomial::Monomial</definition>
        <argsstring>(const double cf, const int dgr) noexcept</argsstring>
        <name>Monomial</name>
        <qualifiedname>emth::Monomial::Monomial</qualifiedname>
        <param>
          <type>const double</type>
          <declname>cf</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dgr</declname>
        </param>
        <briefdescription>
<para>Normal constructor for initialization with coeff and degree. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cf</parametername>
</parameternamelist>
<parameterdescription>
<para>The coefficient as a double. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dgr</parametername>
</parameternamelist>
<parameterdescription>
<para>The degree as a integer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="198" column="13" bodyfile="src/emath.cpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1aa5fc7752eb6a5db663872dd7298140c1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Monomial::Monomial</definition>
        <argsstring>(const Monomial &amp;ogn) noexcept</argsstring>
        <name>Monomial</name>
        <qualifiedname>emth::Monomial::Monomial</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Copy constructor for when initialized with an lvalue <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The lvalue <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="203" column="13" bodyfile="src/emath.cpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a0d77a762defbcd2cb1925e3258f6158f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Monomial::Monomial</definition>
        <argsstring>(Monomial &amp;&amp;ogn) noexcept</argsstring>
        <name>Monomial</name>
        <qualifiedname>emth::Monomial::Monomial</qualifiedname>
        <param>
          <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;&amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Move constructor for when initialized with an rvalue <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The rvalue <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="208" column="13" bodyfile="src/emath.cpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
        <definition>emth::Monomial &amp; emth::Monomial::operator=</definition>
        <argsstring>(const Monomial &amp;ogn) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>emth::Monomial::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Assigment operator overload for when called with an lvalue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The lvalue <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;) A reference to the lvalue of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="214" column="22" bodyfile="src/emath.cpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a7ea9ffbef1c53c8e0f7a9bfda2dcb691" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
        <definition>emth::Monomial &amp; emth::Monomial::operator=</definition>
        <argsstring>(Monomial &amp;&amp;ogn) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>emth::Monomial::operator=</qualifiedname>
        <param>
          <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;&amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Move assigment operator overload for when called with an rvalue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The rvalue <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;) A reference to the lvalue of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="220" column="22" bodyfile="src/emath.cpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a2f9d14fa6443fc160258121c7907b989" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Monomial::operator==</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>emth::Monomial::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Equal logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> objects coefficients and degrees match. </para>
</simplesect>
<simplesect kind="return"><para>(false) If <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> objects coefficients and degrees dont match. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="227" column="18" bodyfile="src/emath.cpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1ab7f80ead25e2f5d4ad80cdbbfe49d5e3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Monomial::operator!=</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>emth::Monomial::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Not equal logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> objects coefficients and degrees dont match. </para>
</simplesect>
<simplesect kind="return"><para>(false) If <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> objects coefficients and degrees match. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="234" column="18" bodyfile="src/emath.cpp" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a995abc13b689075b21b43a30ce043e72" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Monomial::operator&gt;</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>emth::Monomial::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Greater than logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object degree is greater than the degree of the passed <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
<simplesect kind="return"><para>(false) If the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object degree is equal or less than the degree of the passed <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="241" column="18" bodyfile="src/emath.cpp" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a33c3c8003322cc2a8f2c4f2e1b44a387" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Monomial::operator&lt;</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>emth::Monomial::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Less than logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object degree is less than the degree of the passed <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
<simplesect kind="return"><para>(false) If the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object degree is equal or greater than the degree of the passed <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="248" column="13" bodyfile="src/emath.cpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a36079411f2ae6f90e71a09b6723ecf35" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Monomial::operator&gt;=</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>emth::Monomial::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Greater or equal than logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object degree is greater or equal than the degree of the passed <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
<simplesect kind="return"><para>(false) If the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object degree is less than the degree of the passed <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="255" column="18" bodyfile="src/emath.cpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a80fe0433858cf335c1e29ff15aa4bcb8" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Monomial::operator&lt;=</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>emth::Monomial::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Less or equal than logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object degree is less or equal than the degree of the passed <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
<simplesect kind="return"><para>(false) If the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object degree is greater than the degree of the passed <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="262" column="13" bodyfile="src/emath.cpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1aa545290af910fc7a0c68bc02decd41c5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref></type>
        <definition>emth::Monomial emth::Monomial::operator+</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>emth::Monomial::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Addition operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>) A brand new <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="268" column="22" bodyfile="src/emath.cpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1aee07c6d65bc594b8eaaa4d0299840e05" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref></type>
        <definition>emth::Monomial emth::Monomial::operator-</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>emth::Monomial::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Substraction operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to substract by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>) A brand new <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="274" column="22" bodyfile="src/emath.cpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a98a931372dbd0ddafe82ce5601f30836" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref></type>
        <definition>emth::Monomial emth::Monomial::operator*</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>emth::Monomial::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Multiplication operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>) A brand new <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="280" column="22" bodyfile="src/emath.cpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a55982755a6223cbf977e55979fcad8ff" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref></type>
        <definition>emth::Monomial emth::Monomial::operator/</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>emth::Monomial::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Division operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>) A brand new <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="286" column="22" bodyfile="src/emath.cpp" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a8316e22fbd1420a2302fcf8bd6d3b6c2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref></type>
        <definition>emth::Monomial emth::Monomial::operator%</definition>
        <argsstring>(const Monomial &amp;ogn) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>emth::Monomial::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Modulus operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>) A brand new <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="292" column="22" bodyfile="src/emath.cpp" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a7cac7880021c7cf783daa15ee00b94d1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
        <definition>emth::Monomial &amp; emth::Monomial::operator+=</definition>
        <argsstring>(const Monomial &amp;ogn) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>emth::Monomial::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Addition assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="298" column="22" bodyfile="src/emath.cpp" bodystart="136" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a45a932afba1f1f38c5ca16b6c16fd3c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
        <definition>emth::Monomial &amp; emth::Monomial::operator-=</definition>
        <argsstring>(const Monomial &amp;ogn) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>emth::Monomial::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Substraction assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to substract by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="304" column="22" bodyfile="src/emath.cpp" bodystart="148" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a59e6ec6722fe75349e84c6c3397279f5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
        <definition>emth::Monomial &amp; emth::Monomial::operator*=</definition>
        <argsstring>(const Monomial &amp;ogn) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>emth::Monomial::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Multiplication assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="310" column="22" bodyfile="src/emath.cpp" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a1bdb99f916437cd3a7c127b71bec5787" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
        <definition>emth::Monomial &amp; emth::Monomial::operator/=</definition>
        <argsstring>(const Monomial &amp;ogn) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>emth::Monomial::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Division assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="316" column="22" bodyfile="src/emath.cpp" bodystart="170" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1ab4c89014e13b2f35f264492486a935fe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
        <definition>emth::Monomial &amp; emth::Monomial::operator%=</definition>
        <argsstring>(const Monomial &amp;ogn) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>emth::Monomial::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Modulus assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="322" column="22" bodyfile="src/emath.cpp" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double emth::Monomial::get_coeff</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_coeff</name>
        <qualifiedname>emth::Monomial::get_coeff</qualifiedname>
        <briefdescription>
<para>Getter function for getting the coefficient of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(double) The coefficient of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="341" column="20" bodyfile="src/emath.cpp" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int emth::Monomial::get_degree</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_degree</name>
        <qualifiedname>emth::Monomial::get_degree</qualifiedname>
        <briefdescription>
<para>Getter function for getting the degree of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(int) The degree of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="346" column="17" bodyfile="src/emath.cpp" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1adae9aaac815a7c86ec651e5bdb3d3043" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emth::Monomial::set_coeff</definition>
        <argsstring>(double cf) noexcept</argsstring>
        <name>set_coeff</name>
        <qualifiedname>emth::Monomial::set_coeff</qualifiedname>
        <param>
          <type>double</type>
          <declname>cf</declname>
        </param>
        <briefdescription>
<para>Setter function for setting the coefficient of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cf</parametername>
</parameternamelist>
<parameterdescription>
<para>The coefficient to set to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="351" column="18" bodyfile="src/emath.cpp" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1ab695cba07bcbf08cfec7d32e0bf4cc20" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emth::Monomial::set_degree</definition>
        <argsstring>(int dgr) noexcept</argsstring>
        <name>set_degree</name>
        <qualifiedname>emth::Monomial::set_degree</qualifiedname>
        <param>
          <type>int</type>
          <declname>dgr</declname>
        </param>
        <briefdescription>
<para>Setter function for setting the degree of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dgr</parametername>
</parameternamelist>
<parameterdescription>
<para>The degree to set to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="356" column="18" bodyfile="src/emath.cpp" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string emth::Monomial::get_expression</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_expression</name>
        <qualifiedname>emth::Monomial::get_expression</qualifiedname>
        <briefdescription>
<para>Getter function for getting the expression of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(std::string) The expression of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="361" column="25" bodyfile="src/emath.cpp" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double emth::Monomial::get_value</definition>
        <argsstring>(const double &amp;x) const noexcept</argsstring>
        <name>get_value</name>
        <qualifiedname>emth::Monomial::get_value</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculus function for getting the value of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> at a point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(double) The result of the evaluation of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="367" column="20" bodyfile="src/emath.cpp" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Monomial_1aecedb04edd52a33ba0ee110eedbd74db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>emth::Monomial::~Monomial</definition>
        <argsstring>()</argsstring>
        <name>~Monomial</name>
        <qualifiedname>emth::Monomial::~Monomial</qualifiedname>
        <briefdescription>
<para>The class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="371" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classemth_1_1Monomial_1a01135c72790e63387bc07601dd3acc5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::stringstream &amp;</type>
        <definition>std::stringstream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::stringstream &amp;ss, const Monomial &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>emth::Monomial::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::stringstream &amp;</type>
          <declname>ss</declname>
        </param>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>A friend operator to insert the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> into a std::stringstream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ss</parametername>
</parameternamelist>
<parameterdescription>
<para>The std::stringstream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(std::stringstream&amp;) A reference to the std::stringstream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="329" column="20"/>
      </memberdef>
      <memberdef kind="friend" id="classemth_1_1Monomial_1ada77c9969b0422090c05636a895c0e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Monomial &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>emth::Monomial::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>A friend operator to insert the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> into a std::ostream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The std::ostream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(std::ostream&amp;) A reference to the std::ostream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="336" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classemth_1_1Monomial_1a7cba04b35f6b0b4b3dfe909aca0391cb" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emth::Monomial::swap</definition>
        <argsstring>(Monomial &amp;ogn) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>emth::Monomial::swap</qualifiedname>
        <param>
          <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>The swap function for the copy-and-swap idiom implemented by the assigment operators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> to swap the data with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="385" column="18" bodyfile="src/emath.cpp" bodystart="252" bodyend="256"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for representing and operating monomials. </para>
    </briefdescription>
    <detaileddescription>
<para>The class consists of the constructors, the operators, the getters, the properties and some private functions. </para>
    </detaileddescription>
    <location file="include/emath.h" line="187" column="5" bodyfile="include/emath.h" bodystart="187" bodyend="386"/>
    <listofallmembers>
      <member refid="classemth_1_1Monomial_1a997731ccf2707a956c8e236b25451702" prot="private" virt="non-virtual"><scope>emth::Monomial</scope><name>coeff</name></member>
      <member refid="classemth_1_1Monomial_1a7ac5ee0ccb8199fb3dc40d93059d95ba" prot="private" virt="non-virtual"><scope>emth::Monomial</scope><name>degree</name></member>
      <member refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>get_coeff</name></member>
      <member refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>get_degree</name></member>
      <member refid="classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>get_expression</name></member>
      <member refid="classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>get_value</name></member>
      <member refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>Monomial</name></member>
      <member refid="classemth_1_1Monomial_1a70ba615f776f89452b3b11bb9dfe045e" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>Monomial</name></member>
      <member refid="classemth_1_1Monomial_1aa5fc7752eb6a5db663872dd7298140c1" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>Monomial</name></member>
      <member refid="classemth_1_1Monomial_1a0d77a762defbcd2cb1925e3258f6158f" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>Monomial</name></member>
      <member refid="classemth_1_1Monomial_1ab7f80ead25e2f5d4ad80cdbbfe49d5e3" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator!=</name></member>
      <member refid="classemth_1_1Monomial_1a8316e22fbd1420a2302fcf8bd6d3b6c2" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator%</name></member>
      <member refid="classemth_1_1Monomial_1ab4c89014e13b2f35f264492486a935fe" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator%=</name></member>
      <member refid="classemth_1_1Monomial_1a98a931372dbd0ddafe82ce5601f30836" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator*</name></member>
      <member refid="classemth_1_1Monomial_1a59e6ec6722fe75349e84c6c3397279f5" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator*=</name></member>
      <member refid="classemth_1_1Monomial_1aa545290af910fc7a0c68bc02decd41c5" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator+</name></member>
      <member refid="classemth_1_1Monomial_1a7cac7880021c7cf783daa15ee00b94d1" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator+=</name></member>
      <member refid="classemth_1_1Monomial_1aee07c6d65bc594b8eaaa4d0299840e05" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator-</name></member>
      <member refid="classemth_1_1Monomial_1a45a932afba1f1f38c5ca16b6c16fd3c8" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator-=</name></member>
      <member refid="classemth_1_1Monomial_1a55982755a6223cbf977e55979fcad8ff" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator/</name></member>
      <member refid="classemth_1_1Monomial_1a1bdb99f916437cd3a7c127b71bec5787" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator/=</name></member>
      <member refid="classemth_1_1Monomial_1a33c3c8003322cc2a8f2c4f2e1b44a387" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator&lt;</name></member>
      <member refid="classemth_1_1Monomial_1a01135c72790e63387bc07601dd3acc5b" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator&lt;&lt;</name></member>
      <member refid="classemth_1_1Monomial_1ada77c9969b0422090c05636a895c0e8e" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator&lt;&lt;</name></member>
      <member refid="classemth_1_1Monomial_1a80fe0433858cf335c1e29ff15aa4bcb8" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator&lt;=</name></member>
      <member refid="classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator=</name></member>
      <member refid="classemth_1_1Monomial_1a7ea9ffbef1c53c8e0f7a9bfda2dcb691" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator=</name></member>
      <member refid="classemth_1_1Monomial_1a2f9d14fa6443fc160258121c7907b989" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator==</name></member>
      <member refid="classemth_1_1Monomial_1a995abc13b689075b21b43a30ce043e72" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator&gt;</name></member>
      <member refid="classemth_1_1Monomial_1a36079411f2ae6f90e71a09b6723ecf35" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>operator&gt;=</name></member>
      <member refid="classemth_1_1Monomial_1adae9aaac815a7c86ec651e5bdb3d3043" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>set_coeff</name></member>
      <member refid="classemth_1_1Monomial_1ab695cba07bcbf08cfec7d32e0bf4cc20" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>set_degree</name></member>
      <member refid="classemth_1_1Monomial_1a7cba04b35f6b0b4b3dfe909aca0391cb" prot="private" virt="non-virtual"><scope>emth::Monomial</scope><name>swap</name></member>
      <member refid="classemth_1_1Monomial_1aecedb04edd52a33ba0ee110eedbd74db" prot="public" virt="non-virtual"><scope>emth::Monomial</scope><name>~Monomial</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
