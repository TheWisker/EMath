<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="emath_8h" kind="file" language="C++">
    <compoundname>emath.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">cmath</includes>
    <includes local="no">complex</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">unsupported/Eigen/Polynomials</includes>
    <includes local="yes">set.h</includes>
    <includedby refid="eparser_8h" local="yes">include/eparser.h</includedby>
    <includedby refid="src_2emath_8cpp" local="yes">src/emath.cpp</includedby>
    <includedby refid="interface_8cpp" local="yes">src/interface.cpp</includedby>
    <includedby refid="test_2emath_8cpp" local="yes">test/emath.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/emath.h</label>
        <link refid="emath_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>complex</label>
      </node>
      <node id="2">
        <label>map</label>
      </node>
      <node id="8">
        <label>set.h</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="7">
        <label>unsupported/Eigen/Polynomials</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/emath.h</label>
        <link refid="emath_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/eparser.h</label>
        <link refid="eparser_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/emath.cpp</label>
        <link refid="src_2emath_8cpp"/>
      </node>
      <node id="3">
        <label>src/eparser.cpp</label>
        <link refid="src_2eparser_8cpp"/>
      </node>
      <node id="4">
        <label>src/interface.cpp</label>
        <link refid="interface_8cpp"/>
      </node>
      <node id="7">
        <label>test/emath.cpp</label>
        <link refid="test_2emath_8cpp"/>
      </node>
      <node id="5">
        <label>test/eparser.cpp</label>
        <link refid="test_2eparser_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classemth_1_1Arithmetic" prot="public">emth::Arithmetic</innerclass>
    <innerclass refid="classemth_1_1Monomial" prot="public">emth::Monomial</innerclass>
    <innerclass refid="classemth_1_1Polynomial" prot="public">emth::Polynomial</innerclass>
    <innernamespace refid="namespaceemth">emth</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="emath_8h_1acdecae10545d6a882ff7b96070c917dc" prot="public" static="no">
        <name>R_TOL</name>
        <initializer>std::numeric_limits&lt;double&gt;::epsilon()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="166" column="13" bodyfile="include/emath.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="emath_8h_1afb3809880866f9d0fcfdf6384742b15b" prot="public" static="no">
        <name>R_ITR</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="167" column="13" bodyfile="include/emath.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the main header file for the emath library. </para>
    </briefdescription>
    <detaileddescription>
<para>This file declares the functions of the emath library.<linebreak/>
It consists of two classes, the Monomial class and the Polynomial class.<linebreak/>
The Monomial class declares all the functions, operators, and properties for representing and operating monomials.<linebreak/>
The Polynomial class declares all the functions, operators, and properties for representing and operating polynomials.<linebreak/>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EMATH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EMATH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unsupported/Eigen/Polynomials&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;set.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceemth" kindref="compound">emth</ref><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>R_TOL<sp/>std::numeric_limits&lt;double&gt;::epsilon()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>R_ITR<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="classemth_1_1Arithmetic" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classemth_1_1Arithmetic" kindref="compound">Arithmetic</ref><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Arithmetic_1adddfba367517025753ae37062ac6f483" kindref="member">get_divisors</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>std::vector&lt;int&gt;&amp;<sp/>v)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="187" refid="classemth_1_1Monomial" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" kindref="member">Monomial</ref>()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Default<sp/>constructor</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" kindref="member">Monomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgr)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Constructor</highlight></codeline>
<codeline lineno="203"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" kindref="member">Monomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Copy<sp/>constructor</highlight></codeline>
<codeline lineno="208"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7" kindref="member">Monomial</ref>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Move<sp/>constructor</highlight></codeline>
<codeline lineno="214"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4" kindref="member">operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Assigment<sp/>operator</highlight></codeline>
<codeline lineno="220"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4" kindref="member">operator =</ref>(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Move<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="227"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a2f9d14fa6443fc160258121c7907b989" kindref="member">operator ==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Equal<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="234"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1ab7f80ead25e2f5d4ad80cdbbfe49d5e3" kindref="member">operator !=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Not<sp/>Equal<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="241"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a995abc13b689075b21b43a30ce043e72" kindref="member">operator &gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Greater<sp/>than<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="248"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a33c3c8003322cc2a8f2c4f2e1b44a387" kindref="member">operator &lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Less<sp/>than<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="255"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a36079411f2ae6f90e71a09b6723ecf35" kindref="member">operator &gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Greater<sp/>or<sp/>Equal<sp/>than<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="262"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a80fe0433858cf335c1e29ff15aa4bcb8" kindref="member">operator &lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Less<sp/>or<sp/>Equal<sp/>than<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="268"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1aa545290af910fc7a0c68bc02decd41c5" kindref="member">operator +</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Addition<sp/>operator</highlight></codeline>
<codeline lineno="274"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1aee07c6d65bc594b8eaaa4d0299840e05" kindref="member">operator -</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Substraction<sp/>operator</highlight></codeline>
<codeline lineno="280"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1a98a931372dbd0ddafe82ce5601f30836" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Multiplication<sp/>operator</highlight></codeline>
<codeline lineno="286"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1a55982755a6223cbf977e55979fcad8ff" kindref="member">operator /</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Division<sp/>operator</highlight></codeline>
<codeline lineno="292"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref><sp/><ref refid="classemth_1_1Monomial_1a8316e22fbd1420a2302fcf8bd6d3b6c2" kindref="member">operator %</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Modulus<sp/>operator</highlight></codeline>
<codeline lineno="298"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a7cac7880021c7cf783daa15ee00b94d1" kindref="member">operator +=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Addition<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a45a932afba1f1f38c5ca16b6c16fd3c8" kindref="member">operator -=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Substraction<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="310"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a59e6ec6722fe75349e84c6c3397279f5" kindref="member">operator *=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Multiplication<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="316"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a1bdb99f916437cd3a7c127b71bec5787" kindref="member">operator /=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Division<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="322"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1ab4c89014e13b2f35f264492486a935fe" kindref="member">operator %=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Modulus<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="329" refid="classemth_1_1Monomial_1a01135c72790e63387bc07601dd3acc5b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::stringstream&amp;<sp/><ref refid="classemth_1_1Monomial_1a01135c72790e63387bc07601dd3acc5b" kindref="member">operator&lt;&lt;</ref>(std::stringstream&amp;<sp/>ss,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>m);<sp/></highlight><highlight class="comment">//Stream<sp/>operator</highlight></codeline>
<codeline lineno="336" refid="classemth_1_1Monomial_1ada77c9969b0422090c05636a895c0e8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="classemth_1_1Monomial_1ada77c9969b0422090c05636a895c0e8e" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>m);<sp/></highlight><highlight class="comment">//Stream<sp/>operator</highlight></codeline>
<codeline lineno="341"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124" kindref="member">get_coeff</ref>()<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//Coefficient<sp/>getter</highlight></codeline>
<codeline lineno="346"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//Degree<sp/>getter</highlight></codeline>
<codeline lineno="351"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1adae9aaac815a7c86ec651e5bdb3d3043" kindref="member">set_coeff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cf)<sp/>noexcept;<sp/></highlight><highlight class="comment">//Coefficient<sp/>setter</highlight></codeline>
<codeline lineno="356"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1ab695cba07bcbf08cfec7d32e0bf4cc20" kindref="member">set_degree</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dgr)<sp/>noexcept;<sp/></highlight><highlight class="comment">//Degree<sp/>setter</highlight></codeline>
<codeline lineno="361"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996" kindref="member">get_expression</ref>()<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//String<sp/>expression<sp/>getter</highlight></codeline>
<codeline lineno="367"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157" kindref="member">get_value</ref>(const<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x)<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//Value<sp/>for<sp/>x<sp/>getter</highlight></codeline>
<codeline lineno="371" refid="classemth_1_1Monomial_1aecedb04edd52a33ba0ee110eedbd74db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>();<sp/></highlight><highlight class="comment">//Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coeff;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>degree;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>ogn)<sp/>noexcept;<sp/></highlight><highlight class="comment">//Swap<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="392" refid="classemth_1_1Polynomial" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Default<sp/>constructor</highlight></codeline>
<codeline lineno="402" refid="classemth_1_1Polynomial_1af0f389de210155a112852f013aaa18d3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial_1af0f389de210155a112852f013aaa18d3" kindref="member">Polynomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>Monomial&gt;<sp/>mns)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Constructor</highlight></codeline>
<codeline lineno="407" refid="classemth_1_1Polynomial_1a98e8835f620927464b617d6b6ebd1329" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial_1a98e8835f620927464b617d6b6ebd1329" kindref="member">Polynomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Monomial&gt;<sp/>mns)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//List<sp/>Constructor</highlight></codeline>
<codeline lineno="412" refid="classemth_1_1Polynomial_1a084aed33935ade2f689f09103daaac53" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial_1a084aed33935ade2f689f09103daaac53" kindref="member">Polynomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Monomial&gt;<sp/>mns)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Vector<sp/>Constructor</highlight></codeline>
<codeline lineno="417"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Copy<sp/>constructor</highlight></codeline>
<codeline lineno="422"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Move<sp/>constructor</highlight></codeline>
<codeline lineno="428"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4" kindref="member">operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Assigment<sp/>operator</highlight></codeline>
<codeline lineno="434"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4" kindref="member">operator =</ref>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Move<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="441"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a2f9d14fa6443fc160258121c7907b989" kindref="member">operator ==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Equal<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="448"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1ab7f80ead25e2f5d4ad80cdbbfe49d5e3" kindref="member">operator !=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Not<sp/>equal<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="455"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a995abc13b689075b21b43a30ce043e72" kindref="member">operator &gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Greater<sp/>than<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="462"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a33c3c8003322cc2a8f2c4f2e1b44a387" kindref="member">operator &lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Lesser<sp/>than<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="469"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a36079411f2ae6f90e71a09b6723ecf35" kindref="member">operator &gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Greater<sp/>or<sp/>Equal<sp/>than<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="476"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a80fe0433858cf335c1e29ff15aa4bcb8" kindref="member">operator &lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Lesser<sp/>or<sp/>Equal<sp/>than<sp/>logic<sp/>operator</highlight></codeline>
<codeline lineno="482"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/><ref refid="classemth_1_1Monomial_1aa545290af910fc7a0c68bc02decd41c5" kindref="member">operator +</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Addition<sp/>operator</highlight></codeline>
<codeline lineno="488"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/><ref refid="classemth_1_1Monomial_1aee07c6d65bc594b8eaaa4d0299840e05" kindref="member">operator -</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Substraction<sp/>operator</highlight></codeline>
<codeline lineno="494"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/><ref refid="classemth_1_1Monomial_1a98a931372dbd0ddafe82ce5601f30836" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Multiplication<sp/>operator</highlight></codeline>
<codeline lineno="500"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/><ref refid="classemth_1_1Monomial_1a55982755a6223cbf977e55979fcad8ff" kindref="member">operator /</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Division<sp/>operator</highlight></codeline>
<codeline lineno="506"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/><ref refid="classemth_1_1Monomial_1a8316e22fbd1420a2302fcf8bd6d3b6c2" kindref="member">operator %</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Modulus<sp/>operator</highlight></codeline>
<codeline lineno="512"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a7cac7880021c7cf783daa15ee00b94d1" kindref="member">operator +=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Addition<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="518"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a45a932afba1f1f38c5ca16b6c16fd3c8" kindref="member">operator -=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Substraction<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="524"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a59e6ec6722fe75349e84c6c3397279f5" kindref="member">operator *=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Multiplication<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="530"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1a1bdb99f916437cd3a7c127b71bec5787" kindref="member">operator /=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Division<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="536"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/><ref refid="classemth_1_1Monomial_1ab4c89014e13b2f35f264492486a935fe" kindref="member">operator %=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Modulus<sp/>assigment<sp/>operator</highlight></codeline>
<codeline lineno="543" refid="classemth_1_1Polynomial_1a66068882dda621b9bca207d72a9fb2d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::stringstream&amp;<sp/><ref refid="classemth_1_1Polynomial_1a66068882dda621b9bca207d72a9fb2d7" kindref="member">operator&lt;&lt;</ref>(std::stringstream&amp;<sp/>ss,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>p)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Stream<sp/>operator</highlight></codeline>
<codeline lineno="550" refid="classemth_1_1Polynomial_1a444148f9a6121f040d0149c4b5d94ac5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="classemth_1_1Polynomial_1a444148f9a6121f040d0149c4b5d94ac5" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>p)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//Stream<sp/>operator</highlight></codeline>
<codeline lineno="555"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" kindref="member">get_degree</ref>()<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//Degree<sp/>getter</highlight></codeline>
<codeline lineno="560"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&gt;<sp/>get_monomials()<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//Monomials<sp/>getter</highlight></codeline>
<codeline lineno="565"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_empty()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>push_monomial(const<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;<sp/>m)<sp/>noexcept;<sp/></highlight><highlight class="comment">//Monomials<sp/>appender</highlight></codeline>
<codeline lineno="577"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>push_monomial(<ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&amp;&amp;<sp/>m)<sp/>noexcept;<sp/></highlight><highlight class="comment">//Monomials<sp/>appender</highlight></codeline>
<codeline lineno="582"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996" kindref="member">get_expression</ref>()<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//String<sp/>expression<sp/>getter</highlight></codeline>
<codeline lineno="588"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157" kindref="member">get_value</ref>(const<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x)<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//Value<sp/>for<sp/>x<sp/>getter</highlight></codeline>
<codeline lineno="593"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>get_derivative()<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//Gets<sp/>the<sp/>derivative</highlight></codeline>
<codeline lineno="598"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref><sp/>get_integral()<sp/>const<sp/>noexcept;<sp/></highlight><highlight class="comment">//Gets<sp/>the<sp/>integral</highlight></codeline>
<codeline lineno="603"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::complex&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;&gt;<sp/>get_roots()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="607" refid="classemth_1_1Polynomial_1a056e1df4102b0d0add0e8e2805401b82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>();<sp/></highlight><highlight class="comment">//Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>&gt;<sp/>monomials;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>ogn)<sp/>noexcept;<sp/></highlight><highlight class="comment">//Swap<sp/>function</highlight></codeline>
<codeline lineno="621"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;<sp/>redux()<sp/>noexcept;<sp/></highlight><highlight class="comment">//Reduces<sp/>the<sp/>polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="623"><highlight class="normal">};</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/emath.h"/>
  </compounddef>
</doxygen>
