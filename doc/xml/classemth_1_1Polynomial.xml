<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classemth_1_1Polynomial" kind="class" language="C++" prot="public">
    <compoundname>emth::Polynomial</compoundname>
    <includes refid="emath_8h" local="no">emath.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemth_1_1Polynomial_1a5fe4c61292355d30836f1de02a255162" prot="private" static="no" mutable="no">
        <type>std::map&lt; int, <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &gt;</type>
        <definition>std::map&lt;int, Monomial&gt; emth::Polynomial::monomials</definition>
        <argsstring></argsstring>
        <name>monomials</name>
        <qualifiedname>emth::Polynomial::monomials</qualifiedname>
        <briefdescription>
<para>The monomials of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> as a std::map&lt;int, Monomial&gt; where the key is the degree of the <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="496" column="22" bodyfile="include/emath.h" bodystart="496" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Polynomial::Polynomial</definition>
        <argsstring>() noexcept</argsstring>
        <name>Polynomial</name>
        <qualifiedname>emth::Polynomial::Polynomial</qualifiedname>
        <briefdescription>
<para>Default constructor for when initialized with no arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="291" column="13" bodyfile="src/emath.cpp" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1af0f389de210155a112852f013aaa18d3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Polynomial::Polynomial</definition>
        <argsstring>(const std::map&lt; int, Monomial &gt; mns) noexcept</argsstring>
        <name>Polynomial</name>
        <qualifiedname>emth::Polynomial::Polynomial</qualifiedname>
        <param>
          <type>const std::map&lt; int, <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &gt;</type>
          <declname>mns</declname>
        </param>
        <briefdescription>
<para>Normal constructor for initialization with a std::map&lt;int, Monomial&gt; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mns</parametername>
</parameternamelist>
<parameterdescription>
<para>The std::map&lt;int, Monomial&gt;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="296" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a98e8835f620927464b617d6b6ebd1329" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Polynomial::Polynomial</definition>
        <argsstring>(const std::initializer_list&lt; Monomial &gt; mns) noexcept</argsstring>
        <name>Polynomial</name>
        <qualifiedname>emth::Polynomial::Polynomial</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &gt;</type>
          <declname>mns</declname>
        </param>
        <briefdescription>
<para>List constructor for initialization with a std::initializer_list&lt;Monomial&gt; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mns</parametername>
</parameternamelist>
<parameterdescription>
<para>The std::initializer_list&lt;Monomial&gt;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="301" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a084aed33935ade2f689f09103daaac53" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Polynomial::Polynomial</definition>
        <argsstring>(const std::vector&lt; Monomial &gt; mns) noexcept</argsstring>
        <name>Polynomial</name>
        <qualifiedname>emth::Polynomial::Polynomial</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &gt;</type>
          <declname>mns</declname>
        </param>
        <briefdescription>
<para>Vector constructor for initialization with a std::vector&lt;Monomial&gt; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mns</parametername>
</parameternamelist>
<parameterdescription>
<para>The std::vector&lt;Monomial&gt;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="306" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a3612ca54a3bef015a9809d77af2be355" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Polynomial::Polynomial</definition>
        <argsstring>(const Polynomial &amp;ogn) noexcept</argsstring>
        <name>Polynomial</name>
        <qualifiedname>emth::Polynomial::Polynomial</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Copy constructor for when initialized with an lvalue <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The lvalue <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="311" column="13" bodyfile="src/emath.cpp" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a3f55b493797c89e9079c7019fb905059" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emth::Polynomial::Polynomial</definition>
        <argsstring>(Polynomial &amp;&amp;ogn) noexcept</argsstring>
        <name>Polynomial</name>
        <qualifiedname>emth::Polynomial::Polynomial</qualifiedname>
        <param>
          <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;&amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Move constructor for when initialized with an rvalue <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The rvalue <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="316" column="13" bodyfile="src/emath.cpp" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a33ba807b5465ead26edd077d8289f4f3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>emth::Polynomial &amp; emth::Polynomial::operator=</definition>
        <argsstring>(const Polynomial &amp;ogn) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>emth::Polynomial::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Assigment operator overload for when called with an lvalue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The lvalue <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;) A reference to the lvalue of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="322" column="24" bodyfile="src/emath.cpp" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a93818b33532e3f8e80fa614ca8287479" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>emth::Polynomial &amp; emth::Polynomial::operator=</definition>
        <argsstring>(Polynomial &amp;&amp;ogn) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>emth::Polynomial::operator=</qualifiedname>
        <param>
          <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;&amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Move assigment operator overload for when called with an rvalue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The rvalue <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;) A reference to the lvalue of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="328" column="24" bodyfile="src/emath.cpp" bodystart="287" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1ad042381e1713be21b332d3f8fbdfd0a7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Polynomial::operator==</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>emth::Polynomial::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Equal logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> objects degrees and monomials match. </para>
</simplesect>
<simplesect kind="return"><para>(false) If <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> objects degrees and monomials dont match. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="335" column="18" bodyfile="src/emath.cpp" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a40fefffeb0043d193d5aa7ecb3adba55" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Polynomial::operator!=</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>emth::Polynomial::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Not equal logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> objects degrees and monomials dont match. </para>
</simplesect>
<simplesect kind="return"><para>(false) If <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> objects degrees and monomials match. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="342" column="18" bodyfile="src/emath.cpp" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1ae358f6f9b93783601af6999b67e0dafb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Polynomial::operator&gt;</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>emth::Polynomial::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Greater than logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object degree is greater than the degree of the passed <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
<simplesect kind="return"><para>(false) If the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object degree is equal or less than the degree of the passed <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="349" column="18" bodyfile="src/emath.cpp" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a0f0640fcb0dd0a59b685a646d494bfc7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Polynomial::operator&lt;</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>emth::Polynomial::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Less than logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object degree is less than the degree of the passed <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
<simplesect kind="return"><para>(false) If the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object degree is equal or greater than the degree of the passed <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="356" column="13" bodyfile="src/emath.cpp" bodystart="315" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a2321b93b1482b6677dbd125739848724" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Polynomial::operator&gt;=</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>emth::Polynomial::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Greater or equal than logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object degree is greater or equal than the degree of the passed <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
<simplesect kind="return"><para>(false) If the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object degree is less than the degree of the passed <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="363" column="18" bodyfile="src/emath.cpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a7b234cebd032016c0a8ece92a4f68141" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Polynomial::operator&lt;=</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>emth::Polynomial::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Less or equal than logic operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to compare to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(true) If the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object degree is less or equal than the degree of the passed <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
<simplesect kind="return"><para>(false) If the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object degree is greater than the degree of the passed <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="370" column="13" bodyfile="src/emath.cpp" bodystart="329" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a9d46082ad38edc17f875127208626281" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref></type>
        <definition>emth::Polynomial emth::Polynomial::operator+</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>emth::Polynomial::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Addition operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>) A brand new <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="376" column="24" bodyfile="src/emath.cpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a1cd22ae48bfcb14b53835730091e5f4d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref></type>
        <definition>emth::Polynomial emth::Polynomial::operator-</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>emth::Polynomial::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Substraction operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to substract by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>) A brand new <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="382" column="24" bodyfile="src/emath.cpp" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1ac461b9aeb93c33d540f0a918bdefd203" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref></type>
        <definition>emth::Polynomial emth::Polynomial::operator*</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>emth::Polynomial::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Multiplication operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>) A brand new <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="388" column="24" bodyfile="src/emath.cpp" bodystart="347" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1aa2a054dcc203257bfc3d06621ce876b1" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref></type>
        <definition>emth::Polynomial emth::Polynomial::operator/</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>emth::Polynomial::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Division operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>) A brand new <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="394" column="24" bodyfile="src/emath.cpp" bodystart="353" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a56a499385ad24715b1240611217277c5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref></type>
        <definition>emth::Polynomial emth::Polynomial::operator%</definition>
        <argsstring>(const Polynomial &amp;ogn) const noexcept</argsstring>
        <name>operator%</name>
        <qualifiedname>emth::Polynomial::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Modulus operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>) A brand new <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> that represents the result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="400" column="24" bodyfile="src/emath.cpp" bodystart="359" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a791a5aa2207acd2fccc4124ff36eb0bf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>emth::Polynomial &amp; emth::Polynomial::operator+=</definition>
        <argsstring>(const Polynomial &amp;ogn) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>emth::Polynomial::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Addition assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="406" column="24" bodyfile="src/emath.cpp" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1af545354b4dade3e286be26207d02a442" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>emth::Polynomial &amp; emth::Polynomial::operator-=</definition>
        <argsstring>(const Polynomial &amp;ogn) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>emth::Polynomial::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Substraction assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to substract by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="412" column="24" bodyfile="src/emath.cpp" bodystart="374" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1abdeb3769c43eec881ae8ed1a20a5d01d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>emth::Polynomial &amp; emth::Polynomial::operator*=</definition>
        <argsstring>(const Polynomial &amp;ogn) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>emth::Polynomial::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Multiplication assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to multiply by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="418" column="24" bodyfile="src/emath.cpp" bodystart="383" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1ac5a003db2381c99c97c4a78341145b26" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>emth::Polynomial &amp; emth::Polynomial::operator/=</definition>
        <argsstring>(const Polynomial &amp;ogn) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>emth::Polynomial::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Division assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="424" column="24" bodyfile="src/emath.cpp" bodystart="398" bodyend="409"/>
        <references refid="classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0" compoundref="src_2emath_8cpp" startline="212" endline="212">emth::Monomial::get_degree</references>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a2e6bd9b16b732b38caabf950acfd5cb2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>emth::Polynomial &amp; emth::Polynomial::operator%=</definition>
        <argsstring>(const Polynomial &amp;ogn) noexcept</argsstring>
        <name>operator%=</name>
        <qualifiedname>emth::Polynomial::operator%=</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Modulus assigment operator overload. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to divide by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>&amp;) A reference to the lvalue of the operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="430" column="24" bodyfile="src/emath.cpp" bodystart="415" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int emth::Polynomial::get_degree</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_degree</name>
        <qualifiedname>emth::Polynomial::get_degree</qualifiedname>
        <briefdescription>
<para>Getter function for getting the degree of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(int) The degree of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="449" column="17" bodyfile="src/emath.cpp" bodystart="448" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::map&lt; int, <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &gt;</type>
        <definition>std::map&lt; int, emth::Monomial &gt; emth::Polynomial::get_monomials</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_monomials</name>
        <qualifiedname>emth::Polynomial::get_monomials</qualifiedname>
        <briefdescription>
<para>Getter function for getting the monomials of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(std::map&lt;int, Monomial&gt;) The monomials of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="454" column="22" bodyfile="src/emath.cpp" bodystart="453" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a1dc4825c3d5005949f0869e204e4fedc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Polynomial::push_monomial</definition>
        <argsstring>(const Monomial &amp;m) noexcept</argsstring>
        <name>push_monomial</name>
        <qualifiedname>emth::Polynomial::push_monomial</qualifiedname>
        <param>
          <type>const <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Function for appending a lvalue monomial to the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to append. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(bool) If the operation was successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="460" column="18" bodyfile="src/emath.cpp" bodystart="459" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1acd1befa11dd8d4e3da213114dc88cff7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool emth::Polynomial::push_monomial</definition>
        <argsstring>(Monomial &amp;&amp;m) noexcept</argsstring>
        <name>push_monomial</name>
        <qualifiedname>emth::Polynomial::push_monomial</qualifiedname>
        <param>
          <type><ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Function for appending a rvalue monomial to the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Monomial" kindref="compound">Monomial</ref> object to append. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(bool) If the operation was successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="466" column="18" bodyfile="src/emath.cpp" bodystart="465" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string emth::Polynomial::get_expression</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_expression</name>
        <qualifiedname>emth::Polynomial::get_expression</qualifiedname>
        <briefdescription>
<para>Getter function for getting the expression of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(std::string) The expression of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="471" column="25" bodyfile="src/emath.cpp" bodystart="475" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double emth::Polynomial::get_value</definition>
        <argsstring>(const double &amp;x) const noexcept</argsstring>
        <name>get_value</name>
        <qualifiedname>emth::Polynomial::get_value</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculus function for getting the value of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> at a point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to evaluate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(double) The result of the evaluation of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="477" column="20" bodyfile="src/emath.cpp" bodystart="481" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref></type>
        <definition>emth::Polynomial emth::Polynomial::get_derivative</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_derivative</name>
        <qualifiedname>emth::Polynomial::get_derivative</qualifiedname>
        <briefdescription>
<para>Calculus function for getting the derivative of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>) The result of the derivative of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="482" column="24" bodyfile="src/emath.cpp" bodystart="490" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref></type>
        <definition>emth::Polynomial emth::Polynomial::get_integral</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_integral</name>
        <qualifiedname>emth::Polynomial::get_integral</qualifiedname>
        <briefdescription>
<para>Calculus function for getting the integral of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>) The result of the integral of the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="487" column="24" bodyfile="src/emath.cpp" bodystart="501" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a056e1df4102b0d0add0e8e2805401b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>emth::Polynomial::~Polynomial</definition>
        <argsstring>()</argsstring>
        <name>~Polynomial</name>
        <qualifiedname>emth::Polynomial::~Polynomial</qualifiedname>
        <briefdescription>
<para>The class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="491" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classemth_1_1Polynomial_1a66068882dda621b9bca207d72a9fb2d7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::stringstream &amp;</type>
        <definition>std::stringstream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::stringstream &amp;ss, const Polynomial &amp;p) noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>emth::Polynomial::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::stringstream &amp;</type>
          <declname>ss</declname>
        </param>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>A friend operator to insert the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> into a std::stringstream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ss</parametername>
</parameternamelist>
<parameterdescription>
<para>The std::stringstream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(std::stringstream&amp;) A reference to the std::stringstream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="437" column="20"/>
      </memberdef>
      <memberdef kind="friend" id="classemth_1_1Polynomial_1a444148f9a6121f040d0149c4b5d94ac5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Polynomial &amp;p) noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>emth::Polynomial::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>A friend operator to insert the <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> into a std::ostream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The std::ostream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> object to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(std::ostream&amp;) A reference to the std::ostream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="444" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classemth_1_1Polynomial_1a8b4f2d72f0fa4b1e5fc3d2fc434d1d52" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emth::Polynomial::swap</definition>
        <argsstring>(Polynomial &amp;ogn) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>emth::Polynomial::swap</qualifiedname>
        <param>
          <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>The swap function for the copy-and-swap idiom implemented by the assigment operators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> to swap the data with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="501" column="18" bodyfile="src/emath.cpp" bodystart="512" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classemth_1_1Polynomial_1a3d28b34143d180686a38f5b12900a38c" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>emth::Polynomial &amp; emth::Polynomial::redux</definition>
        <argsstring>() noexcept</argsstring>
        <name>redux</name>
        <qualifiedname>emth::Polynomial::redux</qualifiedname>
        <briefdescription>
<para>The redux function for removing the Monomials of zero coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emath.h" line="505" column="24" bodyfile="src/emath.cpp" bodystart="519" bodyend="526"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for representing and operating polynomials. </para>
    </briefdescription>
    <detaileddescription>
<para>The class consists of the constructors, the operators, the getters, the properties and some private functions. </para>
    </detaileddescription>
    <location file="include/emath.h" line="286" column="5" bodyfile="include/emath.h" bodystart="286" bodyend="506"/>
    <listofallmembers>
      <member refid="classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>get_degree</name></member>
      <member refid="classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>get_derivative</name></member>
      <member refid="classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>get_expression</name></member>
      <member refid="classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>get_integral</name></member>
      <member refid="classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>get_monomials</name></member>
      <member refid="classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>get_value</name></member>
      <member refid="classemth_1_1Polynomial_1a5fe4c61292355d30836f1de02a255162" prot="private" virt="non-virtual"><scope>emth::Polynomial</scope><name>monomials</name></member>
      <member refid="classemth_1_1Polynomial_1a40fefffeb0043d193d5aa7ecb3adba55" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator!=</name></member>
      <member refid="classemth_1_1Polynomial_1a56a499385ad24715b1240611217277c5" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator%</name></member>
      <member refid="classemth_1_1Polynomial_1a2e6bd9b16b732b38caabf950acfd5cb2" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator%=</name></member>
      <member refid="classemth_1_1Polynomial_1ac461b9aeb93c33d540f0a918bdefd203" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator*</name></member>
      <member refid="classemth_1_1Polynomial_1abdeb3769c43eec881ae8ed1a20a5d01d" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator*=</name></member>
      <member refid="classemth_1_1Polynomial_1a9d46082ad38edc17f875127208626281" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator+</name></member>
      <member refid="classemth_1_1Polynomial_1a791a5aa2207acd2fccc4124ff36eb0bf" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator+=</name></member>
      <member refid="classemth_1_1Polynomial_1a1cd22ae48bfcb14b53835730091e5f4d" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator-</name></member>
      <member refid="classemth_1_1Polynomial_1af545354b4dade3e286be26207d02a442" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator-=</name></member>
      <member refid="classemth_1_1Polynomial_1aa2a054dcc203257bfc3d06621ce876b1" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator/</name></member>
      <member refid="classemth_1_1Polynomial_1ac5a003db2381c99c97c4a78341145b26" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator/=</name></member>
      <member refid="classemth_1_1Polynomial_1a0f0640fcb0dd0a59b685a646d494bfc7" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator&lt;</name></member>
      <member refid="classemth_1_1Polynomial_1a66068882dda621b9bca207d72a9fb2d7" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator&lt;&lt;</name></member>
      <member refid="classemth_1_1Polynomial_1a444148f9a6121f040d0149c4b5d94ac5" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator&lt;&lt;</name></member>
      <member refid="classemth_1_1Polynomial_1a7b234cebd032016c0a8ece92a4f68141" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator&lt;=</name></member>
      <member refid="classemth_1_1Polynomial_1a33ba807b5465ead26edd077d8289f4f3" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator=</name></member>
      <member refid="classemth_1_1Polynomial_1a93818b33532e3f8e80fa614ca8287479" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator=</name></member>
      <member refid="classemth_1_1Polynomial_1ad042381e1713be21b332d3f8fbdfd0a7" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator==</name></member>
      <member refid="classemth_1_1Polynomial_1ae358f6f9b93783601af6999b67e0dafb" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator&gt;</name></member>
      <member refid="classemth_1_1Polynomial_1a2321b93b1482b6677dbd125739848724" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>operator&gt;=</name></member>
      <member refid="classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classemth_1_1Polynomial_1af0f389de210155a112852f013aaa18d3" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classemth_1_1Polynomial_1a98e8835f620927464b617d6b6ebd1329" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classemth_1_1Polynomial_1a084aed33935ade2f689f09103daaac53" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classemth_1_1Polynomial_1a3612ca54a3bef015a9809d77af2be355" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classemth_1_1Polynomial_1a3f55b493797c89e9079c7019fb905059" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>Polynomial</name></member>
      <member refid="classemth_1_1Polynomial_1a1dc4825c3d5005949f0869e204e4fedc" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>push_monomial</name></member>
      <member refid="classemth_1_1Polynomial_1acd1befa11dd8d4e3da213114dc88cff7" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>push_monomial</name></member>
      <member refid="classemth_1_1Polynomial_1a3d28b34143d180686a38f5b12900a38c" prot="private" virt="non-virtual"><scope>emth::Polynomial</scope><name>redux</name></member>
      <member refid="classemth_1_1Polynomial_1a8b4f2d72f0fa4b1e5fc3d2fc434d1d52" prot="private" virt="non-virtual"><scope>emth::Polynomial</scope><name>swap</name></member>
      <member refid="classemth_1_1Polynomial_1a056e1df4102b0d0add0e8e2805401b82" prot="public" virt="non-virtual"><scope>emth::Polynomial</scope><name>~Polynomial</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
