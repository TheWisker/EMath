<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="test_2eparser_8cpp" kind="file" language="C++">
    <compoundname>eparser.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="eparser_8h" local="yes">eparser.h</includes>
    <incdepgraph>
      <node id="5">
        <label>emath.h</label>
        <link refid="emath_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>eparser.h</label>
        <link refid="eparser_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>test/eparser.cpp</label>
        <link refid="test_2eparser_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>complex</label>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="11">
        <label>set.h</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="10">
        <label>unsupported/Eigen/Polynomials</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classEParserTest" prot="public">EParserTest</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EParserTest, Lexer)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classEParserTest" kindref="compound">EParserTest</ref></type>
        </param>
        <param>
          <type>Lexer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000001"><xreftitle>Test</xreftitle><xrefdescription><para>Test lexer functionality with simple expressions </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/eparser.cpp" line="42" column="1" bodyfile="test/eparser.cpp" bodystart="42" bodyend="73"/>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba5a13d17b3d73d6aa1a545e430284ec6d" compoundref="eparser_8h" startline="48">emthp::T_EOF</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba7b607d6341806fa8bc4505c44670de8c" compoundref="eparser_8h" startline="44">emthp::T_EXPONENT</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba636464f87ad08d661e8f664b4a5903db" compoundref="eparser_8h" startline="32">emthp::T_MINUS</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" compoundref="eparser_8h" startline="36">emthp::T_NUMBER</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba6aa4d0d8ca8e058abc4e4e38f466bbd2" compoundref="eparser_8h" startline="40">emthp::T_VARIABLE</references>
        <references refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" compoundref="eparser_8h" startline="59">emthp::Token::type</references>
        <references refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" compoundref="eparser_8h" startline="63">emthp::Token::value</references>
      </memberdef>
      <memberdef kind="function" id="test_2eparser_8cpp_1a9d00584eda85ad91bd3b865309697a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EParserTest, CompoundLexer)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classEParserTest" kindref="compound">EParserTest</ref></type>
        </param>
        <param>
          <type>CompoundLexer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000002"><xreftitle>Test</xreftitle><xrefdescription><para>Test lexer functionality with compund expressions </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/eparser.cpp" line="77" column="1" bodyfile="test/eparser.cpp" bodystart="77" bodyend="100"/>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba5a13d17b3d73d6aa1a545e430284ec6d" compoundref="eparser_8h" startline="48">emthp::T_EOF</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba7b607d6341806fa8bc4505c44670de8c" compoundref="eparser_8h" startline="44">emthp::T_EXPONENT</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" compoundref="eparser_8h" startline="36">emthp::T_NUMBER</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba6aa4d0d8ca8e058abc4e4e38f466bbd2" compoundref="eparser_8h" startline="40">emthp::T_VARIABLE</references>
        <references refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" compoundref="eparser_8h" startline="59">emthp::Token::type</references>
        <references refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" compoundref="eparser_8h" startline="63">emthp::Token::value</references>
      </memberdef>
      <memberdef kind="function" id="test_2eparser_8cpp_1a9bae16de43d72897f903e5977107c60a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EParserTest, ArithmeticLexer)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classEParserTest" kindref="compound">EParserTest</ref></type>
        </param>
        <param>
          <type>ArithmeticLexer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000003"><xreftitle>Test</xreftitle><xrefdescription><para>Test lexer functionality with arithmetic expressions </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/eparser.cpp" line="104" column="1" bodyfile="test/eparser.cpp" bodystart="104" bodyend="127"/>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba5a13d17b3d73d6aa1a545e430284ec6d" compoundref="eparser_8h" startline="48">emthp::T_EOF</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba7b607d6341806fa8bc4505c44670de8c" compoundref="eparser_8h" startline="44">emthp::T_EXPONENT</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" compoundref="eparser_8h" startline="36">emthp::T_NUMBER</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba6aa4d0d8ca8e058abc4e4e38f466bbd2" compoundref="eparser_8h" startline="40">emthp::T_VARIABLE</references>
        <references refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" compoundref="eparser_8h" startline="59">emthp::Token::type</references>
        <references refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" compoundref="eparser_8h" startline="63">emthp::Token::value</references>
      </memberdef>
      <memberdef kind="function" id="test_2eparser_8cpp_1a7ed288e238950900345be1751b543ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EParserTest, Variables)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classEParserTest" kindref="compound">EParserTest</ref></type>
        </param>
        <param>
          <type>Variables</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000004"><xreftitle>Test</xreftitle><xrefdescription><para>Test parser functionality with monomial expressions </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/eparser.cpp" line="131" column="1" bodyfile="test/eparser.cpp" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="test_2eparser_8cpp_1a21f8c875c668e6dc3d1a1423cdba58a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EParserTest, Compound)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classEParserTest" kindref="compound">EParserTest</ref></type>
        </param>
        <param>
          <type>Compound</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000005"><xreftitle>Test</xreftitle><xrefdescription><para>Test parser functionality with polynomial expressions </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/eparser.cpp" line="140" column="1" bodyfile="test/eparser.cpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="test_2eparser_8cpp_1aee28f89b9e4ebad2361a1f87e5068314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EParserTest, Signs)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classEParserTest" kindref="compound">EParserTest</ref></type>
        </param>
        <param>
          <type>Signs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000006"><xreftitle>Test</xreftitle><xrefdescription><para>Test parser functionality with sign expressions </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/eparser.cpp" line="144" column="1" bodyfile="test/eparser.cpp" bodystart="144" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="test_2eparser_8cpp_1a8178a3e2dd566ffdd7520265ce0c2fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EParserTest, Noise)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classEParserTest" kindref="compound">EParserTest</ref></type>
        </param>
        <param>
          <type>Noise</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000007"><xreftitle>Test</xreftitle><xrefdescription><para>Test parser functionality with noise in the expressions </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/eparser.cpp" line="154" column="1" bodyfile="test/eparser.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="test_2eparser_8cpp_1aeed0ae0397e5f82225fde1a6ba4f65a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(EParserTest, Edge)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classEParserTest" kindref="compound">EParserTest</ref></type>
        </param>
        <param>
          <type>Edge</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000008"><xreftitle>Test</xreftitle><xrefdescription><para>Test parser edge cases </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/eparser.cpp" line="161" column="1" bodyfile="test/eparser.cpp" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="test_2eparser_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Function that runs all the declared tests. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>The console arguments count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The console arguments as a array of char arrays </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(0) If all tests passed </para>
</simplesect>
<simplesect kind="return"><para>(1) If one or more tests failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/eparser.cpp" line="169" column="5" bodyfile="test/eparser.cpp" bodystart="169" bodyend="169"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the main test file for the equation parser. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains a text fixture class and all the test cases.<linebreak/>
It consists of the <ref refid="classEParserTest" kindref="compound">EParserTest</ref> classe that provides the test fixture for all the tests.<linebreak/>
Then it contains all the test cases, for testing correct execution. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="eparser_8h" kindref="compound">eparser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="classEParserTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classEParserTest" kindref="compound">EParserTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20" refid="classEParserTest_1abcb56f6fe9d5fd3ca9320b5f981bc52c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEParserTest_1abcb56f6fe9d5fd3ca9320b5f981bc52c" kindref="member">EParserTest</ref>()<sp/>:<sp/><ref refid="classEParserTest_1a84cd16fd9d2f4b968c36ec280b7a7423" kindref="member">lexer</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),<sp/><ref refid="classEParserTest_1a272d2e82239321467bce8dacd326bf6f" kindref="member">parser</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{};</highlight></codeline>
<codeline lineno="25" refid="classEParserTest_1a3f86e942a3c31352d1a6019e22fabe14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classEParserTest_1a3f86e942a3c31352d1a6019e22fabe14" kindref="member">set_input</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classEParserTest_1a84cd16fd9d2f4b968c36ec280b7a7423" kindref="member">lexer</ref><sp/>=<sp/><ref refid="classemthp_1_1Lexer" kindref="compound">emthp::Lexer</ref>(input);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classEParserTest_1a272d2e82239321467bce8dacd326bf6f" kindref="member">parser</ref><sp/>=<sp/><ref refid="classemthp_1_1Parser" kindref="compound">emthp::Parser</ref>(input);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33" refid="classEParserTest_1a84cd16fd9d2f4b968c36ec280b7a7423" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemthp_1_1Lexer" kindref="compound">emthp::Lexer</ref><sp/><ref refid="classEParserTest_1a84cd16fd9d2f4b968c36ec280b7a7423" kindref="member">lexer</ref>;</highlight></codeline>
<codeline lineno="37" refid="classEParserTest_1a272d2e82239321467bce8dacd326bf6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classemthp_1_1Parser" kindref="compound">emthp::Parser</ref><sp/><ref refid="classEParserTest_1a272d2e82239321467bce8dacd326bf6f" kindref="member">parser</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42" refid="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" refkind="member"><highlight class="normal"><ref refid="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" kindref="member">TEST_F</ref>(<ref refid="classEParserTest" kindref="compound">EParserTest</ref>,<sp/>Lexer)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structemthp_1_1Token" kindref="compound">emthp::Token</ref><sp/>token;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;2x^2<sp/>-<sp/>8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" kindref="member">emthp::TokenType::T_NUMBER</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>2.0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba6aa4d0d8ca8e058abc4e4e38f466bbd2" kindref="member">emthp::TokenType::T_VARIABLE</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba7b607d6341806fa8bc4505c44670de8c" kindref="member">emthp::TokenType::T_EXPONENT</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" kindref="member">emthp::TokenType::T_NUMBER</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>2.0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba636464f87ad08d661e8f664b4a5903db" kindref="member">emthp::TokenType::T_MINUS</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" kindref="member">emthp::TokenType::T_NUMBER</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>8.0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba5a13d17b3d73d6aa1a545e430284ec6d" kindref="member">emthp::TokenType::T_EOF</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77" refid="test_2eparser_8cpp_1a9d00584eda85ad91bd3b865309697a92" refkind="member"><highlight class="normal"><ref refid="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" kindref="member">TEST_F</ref>(<ref refid="classEParserTest" kindref="compound">EParserTest</ref>,<sp/>CompoundLexer)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structemthp_1_1Token" kindref="compound">emthp::Token</ref><sp/>token;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;1.11x^2.22&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" kindref="member">emthp::TokenType::T_NUMBER</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>1.11);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba6aa4d0d8ca8e058abc4e4e38f466bbd2" kindref="member">emthp::TokenType::T_VARIABLE</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba7b607d6341806fa8bc4505c44670de8c" kindref="member">emthp::TokenType::T_EXPONENT</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" kindref="member">emthp::TokenType::T_NUMBER</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>2.22);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba5a13d17b3d73d6aa1a545e430284ec6d" kindref="member">emthp::TokenType::T_EOF</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104" refid="test_2eparser_8cpp_1a9bae16de43d72897f903e5977107c60a" refkind="member"><highlight class="normal"><ref refid="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" kindref="member">TEST_F</ref>(<ref refid="classEParserTest" kindref="compound">EParserTest</ref>,<sp/>ArithmeticLexer)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structemthp_1_1Token" kindref="compound">emthp::Token</ref><sp/>token;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;2*8/4^3<sp/>x^<sp/>2^2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" kindref="member">emthp::TokenType::T_NUMBER</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>64.0);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba6aa4d0d8ca8e058abc4e4e38f466bbd2" kindref="member">emthp::TokenType::T_VARIABLE</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba7b607d6341806fa8bc4505c44670de8c" kindref="member">emthp::TokenType::T_EXPONENT</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" kindref="member">emthp::TokenType::T_NUMBER</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>4.0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>this-&gt;lexer.next();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" kindref="member">type</ref>,<sp/><ref refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba5a13d17b3d73d6aa1a545e430284ec6d" kindref="member">emthp::TokenType::T_EOF</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(token.<ref refid="structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c" kindref="member">value</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131" refid="test_2eparser_8cpp_1a7ed288e238950900345be1751b543ab5" refkind="member"><highlight class="normal"><ref refid="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" kindref="member">TEST_F</ref>(<ref refid="classEParserTest" kindref="compound">EParserTest</ref>,<sp/>Variables)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;2x&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(2,<sp/>1));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;x^2&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(1,<sp/>2));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;2x^2&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(2,<sp/>2));</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140" refid="test_2eparser_8cpp_1a21f8c875c668e6dc3d1a1423cdba58a3" refkind="member"><highlight class="normal"><ref refid="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" kindref="member">TEST_F</ref>(<ref refid="classEParserTest" kindref="compound">EParserTest</ref>,<sp/>Compound)<sp/>{this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;2x^2<sp/>-<sp/>2x<sp/>+<sp/>2&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_polynomial(),<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>({emth::Monomial(2,<sp/>2),<sp/>emth::Monomial(-2,<sp/>1),<sp/>emth::Monomial(2,<sp/>0)}));}</highlight></codeline>
<codeline lineno="144" refid="test_2eparser_8cpp_1aee28f89b9e4ebad2361a1f87e5068314" refkind="member"><highlight class="normal"><ref refid="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" kindref="member">TEST_F</ref>(<ref refid="classEParserTest" kindref="compound">EParserTest</ref>,<sp/>Signs)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;-x&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(-1,<sp/>1));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;--x&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(1,<sp/>1));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;---x&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(-1,<sp/>1));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;-+x&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(-1,<sp/>1));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;+-+x&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(-1,<sp/>1));</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154" refid="test_2eparser_8cpp_1a8178a3e2dd566ffdd7520265ce0c2fe3" refkind="member"><highlight class="normal"><ref refid="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" kindref="member">TEST_F</ref>(<ref refid="classEParserTest" kindref="compound">EParserTest</ref>,<sp/>Noise)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;(1)&lt;···(0)&lt;···_x_···&gt;^{2}&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_monomial(),<sp/><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>(10,<sp/>2));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;(1)&lt;···(0)&lt;···_x_···&gt;^{2}<sp/>-<sp/>(0)&lt;···(5)&lt;···_x_···&gt;^{2}&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_polynomial(),<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>({emth::Monomial(5,<sp/>2)}));</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161" refid="test_2eparser_8cpp_1aeed0ae0397e5f82225fde1a6ba4f65a9" refkind="member"><highlight class="normal"><ref refid="test_2eparser_8cpp_1adb859937dfb6fcd56c656c3c2555afc9" kindref="member">TEST_F</ref>(<ref refid="classEParserTest" kindref="compound">EParserTest</ref>,<sp/>Edge)<sp/>{this-&gt;set_input(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/>ASSERT_EQ(this-&gt;parser.parse_polynomial(),<sp/><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>());}</highlight></codeline>
<codeline lineno="169" refid="test_2eparser_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="interface_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{testing::InitGoogleTest(&amp;argc,<sp/>argv);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();}</highlight></codeline>
    </programlisting>
    <location file="test/eparser.cpp"/>
  </compounddef>
</doxygen>
