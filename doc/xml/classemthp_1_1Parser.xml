<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classemthp_1_1Parser" kind="class" language="C++" prot="public">
    <compoundname>emthp::Parser</compoundname>
    <includes refid="eparser_8h" local="no">eparser.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemthp_1_1Parser_1ad89704cde9db5580c48811d3490d364f" prot="private" static="no" mutable="no">
        <type><ref refid="classemthp_1_1Lexer" kindref="compound">Lexer</ref></type>
        <definition>Lexer emthp::Parser::_lexer</definition>
        <argsstring></argsstring>
        <name>_lexer</name>
        <qualifiedname>emthp::Parser::_lexer</qualifiedname>
        <briefdescription>
<para>Private <ref refid="classemthp_1_1Lexer" kindref="compound">Lexer</ref> instance for supplying tokens. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eparser.h" line="152" column="19" bodyfile="include/eparser.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemthp_1_1Parser_1a4eb818d42bac1e3e3419c848e521cbdb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>emthp::Parser::Parser</definition>
        <argsstring>(const std::string &amp;input) noexcept</argsstring>
        <name>Parser</name>
        <qualifiedname>emthp::Parser::Parser</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Standalone constructor for the <ref refid="classemthp_1_1Parser" kindref="compound">Parser</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>A const reference to the std::string to parse when needed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eparser.h" line="131" column="13" bodyfile="src/eparser.cpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classemthp_1_1Parser_1ada7e099319ce350bb2d5dcfd5ea8b36a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemthp_1_1Parser" kindref="compound">Parser</ref> &amp;</type>
        <definition>emthp::Parser &amp; emthp::Parser::operator=</definition>
        <argsstring>(const Parser &amp;ogn) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>emthp::Parser::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classemthp_1_1Parser" kindref="compound">Parser</ref> &amp;</type>
          <declname>ogn</declname>
        </param>
        <briefdescription>
<para>Assigment operator for when called with an lvalue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ogn</parametername>
</parameternamelist>
<parameterdescription>
<para>The lvalue <ref refid="classemthp_1_1Parser" kindref="compound">Parser</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(<ref refid="classemthp_1_1Parser" kindref="compound">Parser</ref>&amp;) A reference to the lvalue of the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eparser.h" line="137" column="20" bodyfile="src/eparser.cpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classemthp_1_1Parser_1a933df3ba2501887aa6d947bfe6eafe4b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref></type>
        <definition>emth::Polynomial emthp::Parser::parse_polynomial</definition>
        <argsstring>() noexcept</argsstring>
        <name>parse_polynomial</name>
        <qualifiedname>emthp::Parser::parse_polynomial</qualifiedname>
        <briefdescription>
<para>Function that parses the input as a Polynomial. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(<ref refid="classemth_1_1Polynomial" kindref="compound">emth::Polynomial</ref>) The input as a Polynomial </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eparser.h" line="142" column="30" bodyfile="src/eparser.cpp" bodystart="105" bodyend="108"/>
        <references refid="classemth_1_1Polynomial_1a1dc4825c3d5005949f0869e204e4fedc" compoundref="src_2emath_8cpp" startline="484" endline="484">emth::Polynomial::push_monomial</references>
      </memberdef>
      <memberdef kind="function" id="classemthp_1_1Parser_1a590566c3e893515a0dbb9db032a889cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref></type>
        <definition>emth::Monomial emthp::Parser::parse_monomial</definition>
        <argsstring>() noexcept</argsstring>
        <name>parse_monomial</name>
        <qualifiedname>emthp::Parser::parse_monomial</qualifiedname>
        <briefdescription>
<para>Function that parses the next Monomial in the input. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(<ref refid="classemth_1_1Monomial" kindref="compound">emth::Monomial</ref>) The next Monomial in the input </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eparser.h" line="147" column="28" bodyfile="src/eparser.cpp" bodystart="113" bodyend="128"/>
        <references refid="classemth_1_1Monomial_1adae9aaac815a7c86ec651e5bdb3d3043" compoundref="src_2emath_8cpp" startline="231" endline="231">emth::Monomial::set_coeff</references>
        <references refid="classemth_1_1Monomial_1ab695cba07bcbf08cfec7d32e0bf4cc20" compoundref="src_2emath_8cpp" startline="236" endline="236">emth::Monomial::set_degree</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba5a13d17b3d73d6aa1a545e430284ec6d" compoundref="eparser_8h" startline="48">emthp::T_EOF</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba7b607d6341806fa8bc4505c44670de8c" compoundref="eparser_8h" startline="44">emthp::T_EXPONENT</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba636464f87ad08d661e8f664b4a5903db" compoundref="eparser_8h" startline="32">emthp::T_MINUS</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bad7549ed90d6122d0761f3acfb1b56923" compoundref="eparser_8h" startline="36">emthp::T_NUMBER</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bab0be00ab2ea8e4a56ab22f220c7de9bf" compoundref="eparser_8h" startline="28">emthp::T_PLUS</references>
        <references refid="namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6ba6aa4d0d8ca8e058abc4e4e38f466bbd2" compoundref="eparser_8h" startline="40">emthp::T_VARIABLE</references>
        <references refid="structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3" compoundref="eparser_8h" startline="59">emthp::Token::type</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classemthp_1_1Parser_1adb63bcf01700c40eea06bd1db3d566e8" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double emthp::Parser::parse_number</definition>
        <argsstring>() noexcept</argsstring>
        <name>parse_number</name>
        <qualifiedname>emthp::Parser::parse_number</qualifiedname>
        <briefdescription>
<para>Private function for parsing a plus, minus and number Tokens as a positive or negative double. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(double) The parsed number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/eparser.h" line="157" column="20" bodyfile="src/eparser.cpp" bodystart="133" bodyend="144"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that wraps a std::string and parses it as a Monomial or as a Polynomial. </para>
    </briefdescription>
    <detaileddescription>
<para>The class consists of two public functions, one for parsing the entire input as a Polynomial and the other for parsing only the next Monomial. </para>
    </detaileddescription>
    <location file="include/eparser.h" line="125" column="5" bodyfile="include/eparser.h" bodystart="125" bodyend="158"/>
    <listofallmembers>
      <member refid="classemthp_1_1Parser_1ad89704cde9db5580c48811d3490d364f" prot="private" virt="non-virtual"><scope>emthp::Parser</scope><name>_lexer</name></member>
      <member refid="classemthp_1_1Parser_1ada7e099319ce350bb2d5dcfd5ea8b36a" prot="public" virt="non-virtual"><scope>emthp::Parser</scope><name>operator=</name></member>
      <member refid="classemthp_1_1Parser_1a590566c3e893515a0dbb9db032a889cd" prot="public" virt="non-virtual"><scope>emthp::Parser</scope><name>parse_monomial</name></member>
      <member refid="classemthp_1_1Parser_1adb63bcf01700c40eea06bd1db3d566e8" prot="private" virt="non-virtual"><scope>emthp::Parser</scope><name>parse_number</name></member>
      <member refid="classemthp_1_1Parser_1a933df3ba2501887aa6d947bfe6eafe4b" prot="public" virt="non-virtual"><scope>emthp::Parser</scope><name>parse_polynomial</name></member>
      <member refid="classemthp_1_1Parser_1a4eb818d42bac1e3e3419c848e521cbdb" prot="public" virt="non-virtual"><scope>emthp::Parser</scope><name>Parser</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
