<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_interface_8cpp_source" xml:lang="en-US">
<title>interface.cpp</title>
<indexterm><primary>src/interface.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_interface_8cpp_source_1l00001"/>00001 
<anchor xml:id="_interface_8cpp_source_1l00008"/>00008 <emphasis role="preprocessor">#ifndef&#32;INTERFACE_H</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#define&#32;INTERFACE_H</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;curses.h&gt;</emphasis>&#32;
<anchor xml:id="_interface_8cpp_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00012"/>00012 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00013"/>00013 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00014"/>00014 <emphasis role="preprocessor">#include&#32;&quot;rapidjson/document.h&quot;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&quot;rapidjson/writer.h&quot;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00016"/>00016 <emphasis role="preprocessor">#include&#32;&quot;rapidjson/stringbuffer.h&quot;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&lt;SFML/Graphics.hpp&gt;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&lt;thread&gt;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_emath_8h">emath.h</link>&quot;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_eparser_8h">eparser.h</link>&quot;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00021"/>00021 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_font_8h">font.h</link>&quot;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00022"/>00022 <emphasis role="preprocessor">#ifdef&#32;WINDOWS</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00023"/>00023 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;windows.h&gt;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00024"/>00024 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00025"/>00025 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;signal.h&gt;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00026"/>00026 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00032"/>00032 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceefc">efc</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00033"/>00033 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;HPADD&#32;1</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;WPADD&#32;2</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00035"/>00035 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CPOSY&#32;1</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00036"/>00036 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;CPOSX&#32;2</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;PSIZE&#32;3</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOFST&#32;2</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;COLOR_ID&#32;1</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_ESC&#32;27</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00041"/>00041 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_TAB&#32;9</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00042"/>00042 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_SPC&#32;32</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00043"/>00043 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_E&#32;101</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00044"/>00044 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_Q&#32;113</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_1&#32;49</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00046"/>00046 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_2&#32;50</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00047"/>00047 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_3&#32;51</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_4&#32;52</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00049"/>00049 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;KEY_5&#32;53</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00050"/>00050 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;LWIN&#32;0</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00051"/>00051 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;RWIN&#32;1</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00052"/>00052 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;BWIN&#32;2</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00053"/>00053 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SG_FILE&#32;&quot;polynomials.json&quot;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00059"/><link linkend="_classefc_1_1Window">00059</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classefc_1_1Window">Window</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00064"/><link linkend="_classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9">00064</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9">c</link>,&#32;a;
<anchor xml:id="_interface_8cpp_source_1l00068"/><link linkend="_classefc_1_1Window_1a7dc5e87a2ff69618b81041809b052e70">00068</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::std::string&#32;<link linkend="_classefc_1_1Window_1a7dc5e87a2ff69618b81041809b052e70">t</link>;
<anchor xml:id="_interface_8cpp_source_1l00072"/><link linkend="_classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0">00072</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0">y</link>,&#32;x,&#32;h,&#32;w;
<anchor xml:id="_interface_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00077"/><link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">00077</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WINDOW*&#32;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>;
<anchor xml:id="_interface_8cpp_source_1l00081"/><link linkend="_classefc_1_1Window_1ae5fb6b6600ebc4b528d664e8c6947ab2">00081</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Window_1ae5fb6b6600ebc4b528d664e8c6947ab2">Window</link>()&#32;noexcept&#32;:&#32;<link linkend="_classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9">c</link>(true),&#32;a(false),&#32;<link linkend="_classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0">y</link>(0),&#32;x(0),&#32;h(0),&#32;w(0),&#32;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>(newwin(0,&#32;0,&#32;0,&#32;0))&#32;{keypad(this-&gt;o,&#32;TRUE);&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00086"/><link linkend="_classefc_1_1Window_1a933c7e9e67d7423b1facb73a26a9fba3">00086</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classefc_1_1Window_1a933c7e9e67d7423b1facb73a26a9fba3">get_title</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;t.c_str();}
<anchor xml:id="_interface_8cpp_source_1l00091"/><link linkend="_classefc_1_1Window_1a433fbcc875c6e134a8c273c46525bca2">00091</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;<link linkend="_classefc_1_1Window_1a433fbcc875c6e134a8c273c46525bca2">get_y</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0">y</link>;}
<anchor xml:id="_interface_8cpp_source_1l00096"/><link linkend="_classefc_1_1Window_1a1920c8ff02f120a08252797280a3a2aa">00096</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;<link linkend="_classefc_1_1Window_1a1920c8ff02f120a08252797280a3a2aa">get_x</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;x;}
<anchor xml:id="_interface_8cpp_source_1l00101"/><link linkend="_classefc_1_1Window_1a0f64ddda75fb64027eaa7b7dd767ec4e">00101</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;<link linkend="_classefc_1_1Window_1a0f64ddda75fb64027eaa7b7dd767ec4e">get_height</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;h;}
<anchor xml:id="_interface_8cpp_source_1l00106"/><link linkend="_classefc_1_1Window_1a58e0eb74a3b1b20a268dae29d4525dad">00106</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;<link linkend="_classefc_1_1Window_1a58e0eb74a3b1b20a268dae29d4525dad">get_width</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;w;}
<anchor xml:id="_interface_8cpp_source_1l00111"/><link linkend="_classefc_1_1Window_1aad12ba19cc558f386a4f2f9e7b6f1acc">00111</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1Window_1aad12ba19cc558f386a4f2f9e7b6f1acc">get_title_size</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;t.size();}
<anchor xml:id="_interface_8cpp_source_1l00116"/><link linkend="_classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5">00116</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5">set_title</link>(const&#32;::std::string&amp;&amp;&#32;title)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;t&#32;=&#32;title;&#32;this-&gt;c&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00122"/><link linkend="_classefc_1_1Window_1adb89ea880c531bb3e611378ec1f10f5f">00122</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Window_1adb89ea880c531bb3e611378ec1f10f5f">set_coords</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0">y</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;x)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;y&#32;=&#32;<link linkend="_classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0">y</link>;&#32;this-&gt;x&#32;=&#32;x;&#32;this-&gt;c&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00128"/><link linkend="_classefc_1_1Window_1ad9f8b6f349dfe11addce9781a4e32ffb">00128</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Window_1ad9f8b6f349dfe11addce9781a4e32ffb">set_size</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;h,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;w)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;h&#32;=&#32;h;&#32;this-&gt;w&#32;=&#32;w;&#32;this-&gt;c&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00133"/><link linkend="_classefc_1_1Window_1a18c9f4d362aa8ae7cd322e038828e4de">00133</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Window_1a18c9f4d362aa8ae7cd322e038828e4de">set_active</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;active)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;&#32;a&#32;!=&#32;active)&#32;{this-&gt;a&#32;=&#32;active;&#32;this-&gt;c&#32;=&#32;<emphasis role="keyword">true</emphasis>;}&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00138"/><link linkend="_classefc_1_1Window_1a910926d607d7ac88e4d5e6640a52836a">00138</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1Window_1a910926d607d7ac88e4d5e6640a52836a">get_title_y</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;0;}
<anchor xml:id="_interface_8cpp_source_1l00143"/><link linkend="_classefc_1_1Window_1a2e177d9c72e6f7fcf29371df5bc08bea">00143</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1Window_1a2e177d9c72e6f7fcf29371df5bc08bea">get_title_x</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;0;}
<anchor xml:id="_interface_8cpp_source_1l00148"/><link linkend="_classefc_1_1Window_1a2f46320775d22ce67fdbacf50772fd02">00148</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classefc_1_1Window_1a2f46320775d22ce67fdbacf50772fd02">needs_update</link>()&#32;noexcept&#32;{<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;c)&#32;{this-&gt;c&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00153"/><link linkend="_classefc_1_1Window_1a64f20e7199e6a9e85c1db282cd820ad6">00153</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classefc_1_1Window_1a64f20e7199e6a9e85c1db282cd820ad6">is_active</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;a;}
<anchor xml:id="_interface_8cpp_source_1l00157"/><link linkend="_classefc_1_1Window_1a2feeecd90c7c634a15c4e84a3921ee14">00157</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Window_1a2feeecd90c7c634a15c4e84a3921ee14">place</link>()&#32;{wclear(this-&gt;o);&#32;wrefresh(this-&gt;o);&#32;delwin(this-&gt;o);&#32;this-&gt;o&#32;=&#32;newwin(this-&gt;h,&#32;this-&gt;w,&#32;this-&gt;y,&#32;this-&gt;x);&#32;keypad(this-&gt;o,&#32;TRUE);&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00161"/><link linkend="_classefc_1_1Window_1ac8ec94fb12450e4fc37ea2adc30f81f8">00161</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classefc_1_1Window_1ac8ec94fb12450e4fc37ea2adc30f81f8">~Window</link>()&#32;noexcept&#32;{delwin(this-&gt;o);&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;};
<anchor xml:id="_interface_8cpp_source_1l00169"/><link linkend="_classefc_1_1OWindow">00169</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classefc_1_1OWindow">OWindow</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classefc_1_1Window">Window</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;s;&#32;<emphasis role="comment">//Scroll&#32;index</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00178"/>00178 <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::std::vector&lt;::std::string&gt;&#32;d;&#32;<emphasis role="comment">//&#32;Data&#32;vector</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00183"/><link linkend="_classefc_1_1OWindow_1a004301001ab6897854d50d001524c952">00183</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1OWindow_1a004301001ab6897854d50d001524c952">OWindow</link>()&#32;noexcept&#32;:&#32;<link linkend="_classefc_1_1Window">Window</link>(),&#32;s(0)&#32;{<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00188"/><link linkend="_classefc_1_1OWindow_1a6ca5318015cbded809b6e0304c64466e">00188</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;<link linkend="_classefc_1_1OWindow_1a6ca5318015cbded809b6e0304c64466e">get_scroll_index</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;s;}
<anchor xml:id="_interface_8cpp_source_1l00193"/><link linkend="_classefc_1_1OWindow_1a3b2e4975e221006d0fa253438e74b2b9">00193</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::std::vector&lt;::std::string&gt;&amp;&#32;<link linkend="_classefc_1_1OWindow_1a3b2e4975e221006d0fa253438e74b2b9">get_data</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;d;}
<anchor xml:id="_interface_8cpp_source_1l00198"/><link linkend="_classefc_1_1OWindow_1a01886b4a25cc33d062c63e1908e47dc7">00198</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1OWindow_1a01886b4a25cc33d062c63e1908e47dc7">get_data_size</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;d.size();}
<anchor xml:id="_interface_8cpp_source_1l00203"/><link linkend="_classefc_1_1OWindow_1a6fa50bf6b31b39e3c9c2a14cedd70aac">00203</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1OWindow_1a6fa50bf6b31b39e3c9c2a14cedd70aac">get_title_y</link>()&#32;const&#32;noexcept<emphasis role="keyword">&#32;override&#32;</emphasis>{<emphasis role="keywordflow">return</emphasis>&#32;1;}
<anchor xml:id="_interface_8cpp_source_1l00208"/><link linkend="_classefc_1_1OWindow_1aa0224c53de48b27b7bc791f3ff1fe9fc">00208</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1OWindow_1aa0224c53de48b27b7bc791f3ff1fe9fc">get_title_x</link>()&#32;const&#32;noexcept<emphasis role="keyword">&#32;override&#32;</emphasis>{<emphasis role="keywordflow">return</emphasis>&#32;(((this-&gt;w&#32;/&#32;2)&#32;-&#32;(this-&gt;<link linkend="_classefc_1_1Window_1a7dc5e87a2ff69618b81041809b052e70">t</link>.size()&#32;/&#32;2))&#32;&gt;&#32;2)&#32;?&#32;((this-&gt;w&#32;/&#32;2)&#32;-&#32;(this-&gt;<link linkend="_classefc_1_1Window_1a7dc5e87a2ff69618b81041809b052e70">t</link>.size()&#32;/&#32;2))&#32;:&#32;3;}
<anchor xml:id="_interface_8cpp_source_1l00213"/><link linkend="_classefc_1_1OWindow_1ae8e1bfbd75a83c820e825a73765a5691">00213</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1OWindow_1ae8e1bfbd75a83c820e825a73765a5691">set_data</link>(::std::vector&lt;::std::string&gt;&amp;&amp;&#32;data)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;d&#32;=&#32;data;&#32;this-&gt;<link linkend="_classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9">c</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00217"/><link linkend="_classefc_1_1OWindow_1aac80548173360aa9c8336b60330a14a8">00217</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1OWindow_1aac80548173360aa9c8336b60330a14a8">scroll_up</link>()&#32;noexcept&#32;{<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;s&#32;&gt;&#32;0)&#32;{this-&gt;s--;}&#32;this-&gt;<link linkend="_classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9">c</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00221"/><link linkend="_classefc_1_1OWindow_1a360df1d628255154c3cefce86d88499d">00221</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1OWindow_1a360df1d628255154c3cefce86d88499d">scroll_down</link>()&#32;noexcept&#32;{<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;s&#32;&lt;&#32;(this-&gt;d.size()&#32;-&#32;this-&gt;h&#32;+&#32;(HPADD&#32;*&#32;2)&#32;+&#32;1))&#32;{this-&gt;s++;}&#32;this-&gt;<link linkend="_classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9">c</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00225"/><link linkend="_classefc_1_1OWindow_1a95ca8430661cb7bb742b4bba9b5a4952">00225</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1OWindow_1a95ca8430661cb7bb742b4bba9b5a4952">~OWindow</link>()&#32;noexcept&#32;=&#32;default;
<anchor xml:id="_interface_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;};
<anchor xml:id="_interface_8cpp_source_1l00233"/><link linkend="_classefc_1_1IWindow">00233</link> &#32;&#32;&#32;&#32;class&#32;<link linkend="_classefc_1_1IWindow">IWindow</link>&#32;:&#32;public&#32;<link linkend="_classefc_1_1Window">Window</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00238"/><link linkend="_classefc_1_1IWindow_1af8bd92992015e0b7f07a726ed2f329e5">00238</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1IWindow_1af8bd92992015e0b7f07a726ed2f329e5">IWindow</link>()&#32;noexcept&#32;:&#32;<link linkend="_classefc_1_1Window">Window</link>()&#32;{<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00243"/><link linkend="_classefc_1_1IWindow_1a84cb0d425e279cd2b15dc2b43cb520d2">00243</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1IWindow_1a84cb0d425e279cd2b15dc2b43cb520d2">get_title_y</link>()&#32;const&#32;noexcept<emphasis role="keyword">&#32;override&#32;</emphasis>{<emphasis role="keywordflow">return</emphasis>&#32;1;}
<anchor xml:id="_interface_8cpp_source_1l00248"/><link linkend="_classefc_1_1IWindow_1a91e48b892bd02b7c11020fdfc7e7c05d">00248</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1IWindow_1a91e48b892bd02b7c11020fdfc7e7c05d">get_title_x</link>()&#32;const&#32;noexcept<emphasis role="keyword">&#32;override&#32;</emphasis>{<emphasis role="keywordflow">return</emphasis>&#32;4;}
<anchor xml:id="_interface_8cpp_source_1l00252"/><link linkend="_classefc_1_1IWindow_1a373ef8f5d58d8d99852a90f7096cfdef">00252</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1IWindow_1a373ef8f5d58d8d99852a90f7096cfdef">~IWindow</link>()&#32;noexcept&#32;=&#32;default;
<anchor xml:id="_interface_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;};
<anchor xml:id="_interface_8cpp_source_1l00259"/><link linkend="_classefc_1_1Terminal">00259</link> &#32;&#32;&#32;&#32;class&#32;<link linkend="_classefc_1_1Terminal">Terminal</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classefc_1_1Terminal">Terminal</link>*&#32;instance;
<anchor xml:id="_interface_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Window">Window</link>&#32;*lwin,&#32;*rwin,&#32;*bwin;
<anchor xml:id="_interface_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Terminal">Terminal</link>()&#32;{
<anchor xml:id="_interface_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;launch();&#32;<emphasis role="comment">//Launch&#32;curses</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;lwin&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classefc_1_1OWindow_1a004301001ab6897854d50d001524c952">OWindow</link>;&#32;this-&gt;rwin&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classefc_1_1OWindow_1a004301001ab6897854d50d001524c952">OWindow</link>;&#32;this-&gt;bwin&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classefc_1_1IWindow">IWindow</link>;
<anchor xml:id="_interface_8cpp_source_1l00275"/>00275 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifndef&#32;WINDOWS</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;signal(SIGWINCH,&#32;Terminal::resize);
<anchor xml:id="_interface_8cpp_source_1l00277"/>00277 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1a18c9f4d362aa8ae7cd322e038828e4de">set_active</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_interface_8cpp_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;cbounds();
<anchor xml:id="_interface_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;cbounds()&#32;{
<anchor xml:id="_interface_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;height,&#32;width;
<anchor xml:id="_interface_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getmaxyx(stdscr,&#32;height,&#32;width);
<anchor xml:id="_interface_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1ad9f8b6f349dfe11addce9781a4e32ffb">set_size</link>(PSIZE,&#32;width&#32;-&#32;(WPADD&#32;*&#32;2));
<anchor xml:id="_interface_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;lwin-&gt;<link linkend="_classefc_1_1Window_1ad9f8b6f349dfe11addce9781a4e32ffb">set_size</link>(height&#32;-&#32;(HPADD&#32;*&#32;3)&#32;-&#32;this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1a0f64ddda75fb64027eaa7b7dd767ec4e">get_height</link>(),&#32;(width&#32;/&#32;2)&#32;-&#32;(WPADD&#32;*&#32;1.5));
<anchor xml:id="_interface_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;rwin-&gt;<link linkend="_classefc_1_1Window_1ad9f8b6f349dfe11addce9781a4e32ffb">set_size</link>(this-&gt;lwin-&gt;<link linkend="_classefc_1_1Window_1a0f64ddda75fb64027eaa7b7dd767ec4e">get_height</link>(),&#32;this-&gt;lwin-&gt;get_width());
<anchor xml:id="_interface_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1adb89ea880c531bb3e611378ec1f10f5f">set_coords</link>(height&#32;-&#32;(HPADD&#32;+&#32;this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1a0f64ddda75fb64027eaa7b7dd767ec4e">get_height</link>()),&#32;WPADD);
<anchor xml:id="_interface_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;lwin-&gt;<link linkend="_classefc_1_1Window_1adb89ea880c531bb3e611378ec1f10f5f">set_coords</link>(HPADD,&#32;WPADD);
<anchor xml:id="_interface_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;rwin-&gt;<link linkend="_classefc_1_1Window_1adb89ea880c531bb3e611378ec1f10f5f">set_coords</link>(HPADD,&#32;(WPADD&#32;*&#32;2)&#32;+&#32;this-&gt;lwin-&gt;<link linkend="_classefc_1_1Window_1a58e0eb74a3b1b20a268dae29d4525dad">get_width</link>());
<anchor xml:id="_interface_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;lwin-&gt;<link linkend="_classefc_1_1Window_1a2feeecd90c7c634a15c4e84a3921ee14">place</link>();&#32;this-&gt;rwin-&gt;<link linkend="_classefc_1_1Window_1a2feeecd90c7c634a15c4e84a3921ee14">place</link>();&#32;this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1a2feeecd90c7c634a15c4e84a3921ee14">place</link>();
<anchor xml:id="_interface_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bkgd(COLOR_PAIR(COLOR_ID));&#32;refresh();
<anchor xml:id="_interface_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;flush();
<anchor xml:id="_interface_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;wflush(<link linkend="_classefc_1_1Window">Window</link>*&amp;&#32;win)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(win-&gt;<link linkend="_classefc_1_1Window_1a2f46320775d22ce67fdbacf50772fd02">needs_update</link>())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wclear(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>);
<anchor xml:id="_interface_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;box(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;0,&#32;0);
<anchor xml:id="_interface_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wbkgd(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;COLOR_PAIR(COLOR_ID));
<anchor xml:id="_interface_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wmove(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;win-&gt;<link linkend="_classefc_1_1Window_1a910926d607d7ac88e4d5e6640a52836a">get_title_y</link>(),&#32;win-&gt;<link linkend="_classefc_1_1Window_1a2e177d9c72e6f7fcf29371df5bc08bea">get_title_x</link>());&#32;
<anchor xml:id="_interface_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wattron(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;A_BOLD);&#32;waddnstr(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;win-&gt;<link linkend="_classefc_1_1Window_1a933c7e9e67d7423b1facb73a26a9fba3">get_title</link>(),&#32;win-&gt;<link linkend="_classefc_1_1Window_1a58e0eb74a3b1b20a268dae29d4525dad">get_width</link>()&#32;-&#32;(WPADD&#32;*&#32;2)&#32;-&#32;2);&#32;wattroff(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;A_BOLD);
<anchor xml:id="_interface_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classefc_1_1OWindow">OWindow</link>&#32;*owin&#32;=&#32;<emphasis role="keyword">dynamic_cast&lt;</emphasis><link linkend="_classefc_1_1OWindow">OWindow</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(win))&#32;{<emphasis role="comment">//Checks&#32;if&#32;instance&#32;of&#32;OWindow</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;owin-&gt;get_scroll_index();&#32;i&#32;&lt;&#32;((owin-&gt;get_height()&#32;-&#32;3&#32;&gt;=&#32;owin-&gt;get_data_size())&#32;?&#32;owin-&gt;get_data_size()&#32;:&#32;owin-&gt;get_height()&#32;-&#32;3&#32;-&#32;HPADD&#32;*&#32;2)&#32;+&#32;owin-&gt;get_scroll_index();&#32;i++)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wmove(owin-&gt;o,&#32;i+2&#32;-&#32;owin-&gt;get_scroll_index()&#32;+&#32;HPADD,&#32;1&#32;+&#32;TOFST);&#32;waddnstr(owin-&gt;o,&#32;owin-&gt;get_data()[i].c_str(),&#32;owin-&gt;get_width()&#32;-&#32;2&#32;-&#32;TOFST);
<anchor xml:id="_interface_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(win-&gt;<link linkend="_classefc_1_1Window_1a64f20e7199e6a9e85c1db282cd820ad6">is_active</link>())&#32;{wmove(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;CPOSY,&#32;CPOSX);&#32;wattron(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;A_BOLD&#32;|&#32;A_BLINK);&#32;waddch(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>);&#32;wattroff(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;A_BOLD&#32;|&#32;A_BLINK);}
<anchor xml:id="_interface_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wrefresh(win-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>);
<anchor xml:id="_interface_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;resize(<emphasis role="keywordtype">int</emphasis>&#32;signal)&#32;{endwin();&#32;refresh();&#32;Terminal::instance-&gt;cbounds();&#32;<emphasis role="keywordflow">return</emphasis>;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_interface_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;launch()&#32;{
<anchor xml:id="_interface_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initscr();&#32;curs_set(2);&#32;start_color();&#32;cbreak();&#32;keypad(stdscr,&#32;TRUE);&#32;noecho();
<anchor xml:id="_interface_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;init_pair(COLOR_ID,&#32;COLOR_YELLOW,&#32;COLOR_BLACK);&#32;
<anchor xml:id="_interface_8cpp_source_1l00330"/>00330 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifndef&#32;WINDOWS</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_escdelay(0);
<anchor xml:id="_interface_8cpp_source_1l00332"/>00332 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00340"/><link linkend="_classefc_1_1Terminal_1aa058bcd027c3dc1212fb53eb0a6ecafb">00340</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classefc_1_1Terminal">Terminal</link>*&#32;<link linkend="_classefc_1_1Terminal_1aa058bcd027c3dc1212fb53eb0a6ecafb">init</link>()&#32;noexcept&#32;{
<anchor xml:id="_interface_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Terminal::instance&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{<emphasis role="keyword">delete</emphasis>&#32;Terminal::instance;}
<anchor xml:id="_interface_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Terminal::instance&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classefc_1_1Terminal">Terminal</link>();
<anchor xml:id="_interface_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00347"/><link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">00347</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>()&#32;{Terminal::wflush(this-&gt;lwin);&#32;Terminal::wflush(this-&gt;rwin);&#32;Terminal::wflush(this-&gt;bwin);&#32;wmove(this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;this-&gt;bwin-&gt;get_title_y(),&#32;this-&gt;bwin-&gt;get_title_x()&#32;+&#32;this-&gt;bwin-&gt;get_title_size());&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00352"/><link linkend="_classefc_1_1Terminal_1a9103a252f46463cd09adc2bb2436fa30">00352</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1a9103a252f46463cd09adc2bb2436fa30">set_ltitle</link>(const&#32;::std::string&#32;title)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;lwin-&gt;<link linkend="_classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5">set_title</link>(::std::move(title));&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00357"/><link linkend="_classefc_1_1Terminal_1acc6236b69a0d0a2b1c9ae9cb3e6b1056">00357</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1acc6236b69a0d0a2b1c9ae9cb3e6b1056">set_rtitle</link>(const&#32;::std::string&#32;title)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;rwin-&gt;<link linkend="_classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5">set_title</link>(::std::move(title));&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00362"/><link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">00362</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(const&#32;::std::string&#32;prompt)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5">set_title</link>(::std::move(prompt));&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00367"/><link linkend="_classefc_1_1Terminal_1aa705ec16ca8fcc9549b90793c58b4d83">00367</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1aa705ec16ca8fcc9549b90793c58b4d83">set_ldata</link>(::std::vector&lt;::std::string&gt;&#32;data)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keyword">dynamic_cast&lt;</emphasis><link linkend="_classefc_1_1OWindow">OWindow</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(this-&gt;lwin)-&gt;<link linkend="_classefc_1_1OWindow_1ae8e1bfbd75a83c820e825a73765a5691">set_data</link>(::std::move(data));&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00372"/><link linkend="_classefc_1_1Terminal_1ac9e693242036242db200bbbebc3d83e6">00372</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1ac9e693242036242db200bbbebc3d83e6">set_rdata</link>(::std::vector&lt;::std::string&gt;&#32;data)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keyword">dynamic_cast&lt;</emphasis><link linkend="_classefc_1_1OWindow">OWindow</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(this-&gt;rwin)-&gt;<link linkend="_classefc_1_1OWindow_1ae8e1bfbd75a83c820e825a73765a5691">set_data</link>(::std::move(data));&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00377"/><link linkend="_classefc_1_1Terminal_1a966affe71a3fd3c461a907e41a609cc8">00377</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1a966affe71a3fd3c461a907e41a609cc8">get_short_input</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_interface_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wmove(this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;this-&gt;bwin-&gt;get_title_y(),&#32;this-&gt;bwin-&gt;get_title_x()&#32;+&#32;this-&gt;bwin-&gt;get_title_size());&#32;<emphasis role="keywordflow">return</emphasis>&#32;wgetch(this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>);
<anchor xml:id="_interface_8cpp_source_1l00379"/>00379 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;WINDOWS</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ch&#32;=&#32;getch();
<anchor xml:id="_interface_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ch&#32;==&#32;KEY_RESIZE)&#32;{resizeterm(0,&#32;0);}
<anchor xml:id="_interface_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ch;
<anchor xml:id="_interface_8cpp_source_1l00383"/>00383 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#else</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wgetch(this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>);
<anchor xml:id="_interface_8cpp_source_1l00385"/>00385 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00391"/><link linkend="_classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781">00391</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::std::string&#32;<link linkend="_classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781">get_long_input</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{<emphasis role="keywordtype">char</emphasis>*&#32;buffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;char();&#32;echo();&#32;wmove(this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;this-&gt;bwin-&gt;get_title_y(),&#32;this-&gt;bwin-&gt;get_title_x()&#32;+&#32;this-&gt;bwin-&gt;get_title_size());&#32;wgetnstr(this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;buffer,&#32;this-&gt;bwin-&gt;get_width()&#32;-&#32;(this-&gt;bwin-&gt;get_title_x()&#32;+&#32;this-&gt;bwin-&gt;get_title_size())&#32;-&#32;WPADD&#32;-&#32;1);&#32;noecho();&#32;return&#32;::std::move(buffer);}
<anchor xml:id="_interface_8cpp_source_1l00396"/><link linkend="_classefc_1_1Terminal_1ab06e104fb3af3517e2e0413e26accd9a">00396</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1ab06e104fb3af3517e2e0413e26accd9a">scroll_down</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keywordtype">id</emphasis>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;LWIN:&#32;<emphasis role="keyword">dynamic_cast&lt;</emphasis><link linkend="_classefc_1_1OWindow">OWindow</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(this-&gt;lwin)-&gt;<link linkend="_classefc_1_1OWindow_1a360df1d628255154c3cefce86d88499d">scroll_down</link>();&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;RWIN:&#32;<emphasis role="keyword">dynamic_cast&lt;</emphasis><link linkend="_classefc_1_1OWindow">OWindow</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(this-&gt;rwin)-&gt;<link linkend="_classefc_1_1OWindow_1a360df1d628255154c3cefce86d88499d">scroll_down</link>();&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00406"/><link linkend="_classefc_1_1Terminal_1a2b2ddbc6125d3a7ffa8101e161066034">00406</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1a2b2ddbc6125d3a7ffa8101e161066034">scroll_up</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keywordtype">id</emphasis>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;LWIN:&#32;<emphasis role="keyword">dynamic_cast&lt;</emphasis><link linkend="_classefc_1_1OWindow">OWindow</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(this-&gt;lwin)-&gt;<link linkend="_classefc_1_1OWindow_1aac80548173360aa9c8336b60330a14a8">scroll_up</link>();&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;RWIN:&#32;<emphasis role="keyword">dynamic_cast&lt;</emphasis><link linkend="_classefc_1_1OWindow">OWindow</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(this-&gt;rwin)-&gt;<link linkend="_classefc_1_1OWindow_1aac80548173360aa9c8336b60330a14a8">scroll_up</link>();&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00416"/><link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">00416</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>(const&#32;::std::string&amp;&#32;result)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::std::string&#32;old_title&#32;=&#32;this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1a933c7e9e67d7423b1facb73a26a9fba3">get_title</link>();&#32;this-&gt;set_prompt(<emphasis role="stringliteral">&quot;Result:&quot;</emphasis>);&#32;this-&gt;flush();
<anchor xml:id="_interface_8cpp_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wmove(this-&gt;bwin-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;this-&gt;bwin-&gt;get_title_y(),&#32;this-&gt;bwin-&gt;get_title_x()&#32;+&#32;this-&gt;bwin-&gt;get_title_size());
<anchor xml:id="_interface_8cpp_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;waddnstr(bwin-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>,&#32;result.c_str(),&#32;this-&gt;bwin-&gt;get_width()&#32;-&#32;(this-&gt;bwin-&gt;get_title_x()&#32;+&#32;this-&gt;bwin-&gt;get_title_size())&#32;-&#32;WPADD&#32;-&#32;1);
<anchor xml:id="_interface_8cpp_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wgetch(bwin-&gt;<link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link>);&#32;this-&gt;set_prompt(old_title);
<anchor xml:id="_interface_8cpp_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00427"/><link linkend="_classefc_1_1Terminal_1ad3b80961a79f1534316d8e57ec4ada30">00427</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Terminal_1ad3b80961a79f1534316d8e57ec4ada30">swap_active</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00428"/>00428 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;swp(l,&#32;r,&#32;b)&#32;this-&gt;lwin-&gt;set_active(l);&#32;this-&gt;rwin-&gt;set_active(r);&#32;this-&gt;bwin-&gt;set_active(b);</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(<emphasis role="keywordtype">id</emphasis>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;LWIN:&#32;swp(<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;RWIN:&#32;swp(<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BWIN:&#32;swp(<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00438"/><link linkend="_classefc_1_1Terminal_1a64a6c41cf5396f6a5ab91a75e44faac6">00438</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Terminal_1a64a6c41cf5396f6a5ab91a75e44faac6">~Terminal</link>()&#32;noexcept&#32;{
<anchor xml:id="_interface_8cpp_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;this-&gt;lwin;&#32;<emphasis role="keyword">delete</emphasis>&#32;this-&gt;rwin;&#32;<emphasis role="keyword">delete</emphasis>&#32;this-&gt;bwin;
<anchor xml:id="_interface_8cpp_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Terminal::instance&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00441"/>00441 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifndef&#32;WINDOWS&#32;</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;signal(SIGWINCH,&#32;SIG_DFL);
<anchor xml:id="_interface_8cpp_source_1l00443"/>00443 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endwin();&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00446"/>00446 &#32;&#32;&#32;&#32;};&#32;Terminal*&#32;Terminal::instance&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00452"/><link linkend="_classefc_1_1Plane">00452</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classefc_1_1Plane">Plane</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;xogn,&#32;yogn;
<anchor xml:id="_interface_8cpp_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_xogn,&#32;_yogn;
<anchor xml:id="_interface_8cpp_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;domain,&#32;image;
<anchor xml:id="_interface_8cpp_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">::emth::Polynomial</link>&#32;function;
<anchor xml:id="_interface_8cpp_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::sf::Font&#32;font;
<anchor xml:id="_interface_8cpp_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::sf::Text&#32;tooltip;
<anchor xml:id="_interface_8cpp_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::sf::VertexArray&#32;axes;
<anchor xml:id="_interface_8cpp_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::sf::RenderWindow&#32;window;
<anchor xml:id="_interface_8cpp_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::sf::RectangleShape&#32;line;
<anchor xml:id="_interface_8cpp_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::sf::CircleShape&#32;intersection;
<anchor xml:id="_interface_8cpp_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::sf::VertexArray&#32;representation;
<anchor xml:id="_interface_8cpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;draw()&#32;{
<anchor xml:id="_interface_8cpp_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.clear(::sf::Color::Black);
<anchor xml:id="_interface_8cpp_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.draw(this-&gt;axes);
<anchor xml:id="_interface_8cpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.draw(this-&gt;line);
<anchor xml:id="_interface_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.draw(this-&gt;representation);
<anchor xml:id="_interface_8cpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.draw(this-&gt;intersection);
<anchor xml:id="_interface_8cpp_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.draw(this-&gt;tooltip);
<anchor xml:id="_interface_8cpp_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.display();&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;populate()&#32;{
<anchor xml:id="_interface_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;end&#32;=&#32;(this-&gt;xogn&#32;+&#32;this-&gt;domain);
<anchor xml:id="_interface_8cpp_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;axes[0].position&#32;=&#32;::sf::Vector2f(0,&#32;-this-&gt;yogn);
<anchor xml:id="_interface_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;axes[1].position&#32;=&#32;::sf::Vector2f(this-&gt;domain,&#32;-this-&gt;yogn);
<anchor xml:id="_interface_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;axes[2].position&#32;=&#32;::sf::Vector2f(-this-&gt;xogn,&#32;0);
<anchor xml:id="_interface_8cpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;axes[3].position&#32;=&#32;::sf::Vector2f(-this-&gt;xogn,&#32;this-&gt;image);
<anchor xml:id="_interface_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;this-&gt;xogn;&#32;x&#32;&lt;&#32;end;&#32;x++)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;representation[(x&#32;-&#32;this-&gt;xogn)].position&#32;=&#32;::sf::Vector2f((x&#32;-&#32;this-&gt;xogn),&#32;(-this-&gt;yogn&#32;-&#32;this-&gt;function.<link linkend="_classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3">get_value</link>(x)));
<anchor xml:id="_interface_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;representation[(x&#32;-&#32;this-&gt;xogn)].color&#32;=&#32;::sf::Color::Red;
<anchor xml:id="_interface_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;resize(const&#32;::sf::Event&amp;&#32;event)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;domain&#32;=&#32;::std::min(event.size.width,&#32;::sf::VideoMode::getDesktopMode().width);&#32;this-&gt;image&#32;=&#32;::std::min(event.size.height,&#32;::sf::VideoMode::getDesktopMode().height);
<anchor xml:id="_interface_8cpp_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.setSize(::sf::Vector2u(this-&gt;domain,&#32;this-&gt;image));&#32;this-&gt;representation&#32;=&#32;::sf::VertexArray(::sf::LineStrip,&#32;this-&gt;domain);&#32;this-&gt;line.setSize(::sf::Vector2f(1,&#32;this-&gt;image));
<anchor xml:id="_interface_8cpp_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.setView(::sf::View(::sf::FloatRect(0,&#32;0,&#32;this-&gt;domain,&#32;this-&gt;image)));
<anchor xml:id="_interface_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;populate();&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;inverse(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;n)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((n&#32;!=&#32;0)&#32;?&#32;-n&#32;:&#32;n);}
<anchor xml:id="_interface_8cpp_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00547"/><link linkend="_classefc_1_1Plane_1a59f6b4316752f2dfb6b56b2196017a4d">00547</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Plane_1a59f6b4316752f2dfb6b56b2196017a4d">Plane</link>(<emphasis role="keywordtype">int</emphasis>&#32;ox,&#32;<emphasis role="keywordtype">int</emphasis>&#32;oy,&#32;const&#32;::emth::Polynomial&amp;&#32;func)&#32;:&#32;xogn(ox),&#32;yogn(oy),&#32;_xogn(ox),&#32;_yogn(oy),&#32;domain(::sf::VideoMode::getDesktopMode().width/2),&#32;image(::sf::VideoMode::getDesktopMode().height/2),&#32;function(func),&#32;window(::sf::VideoMode(::sf::VideoMode::getDesktopMode().width/2,&#32;::sf::VideoMode::getDesktopMode().height/2),&#32;<emphasis role="stringliteral">&quot;Polynomial:&#32;&quot;</emphasis>&#32;+&#32;func.get_expression(),&#32;::sf::Style::Titlebar&#32;|&#32;::sf::Style::Close,&#32;::sf::ContextSettings(0,&#32;0,&#32;16,&#32;1,&#32;1,&#32;0,&#32;false)),&#32;axes(::sf::Lines,&#32;4),&#32;representation(::sf::LineStrip,&#32;::sf::VideoMode::getDesktopMode().width/2),&#32;line(::sf::Vector2f(1,&#32;::sf::VideoMode::getDesktopMode().height/2)),&#32;intersection(5/2)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;window.setVerticalSyncEnabled(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_interface_8cpp_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;font.loadFromMemory(<link linkend="_font_8h_1abee0e1ab69379ae42c9c1ddd2a3ce67e">ROBOTO_BOLD</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_font_8h_1abee0e1ab69379ae42c9c1ddd2a3ce67e">ROBOTO_BOLD</link>));
<anchor xml:id="_interface_8cpp_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tooltip.setFont(this-&gt;font);&#32;this-&gt;tooltip.setCharacterSize(16);&#32;this-&gt;tooltip.setFillColor(::sf::Color::White);
<anchor xml:id="_interface_8cpp_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;axes[0].color&#32;=&#32;this-&gt;axes[1].color&#32;=&#32;this-&gt;axes[2].color&#32;=&#32;this-&gt;axes[3].color&#32;=&#32;::sf::Color::White;
<anchor xml:id="_interface_8cpp_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;line.setFillColor(::sf::Color::Yellow);&#32;this-&gt;intersection.setFillColor(::sf::Color::Blue);&#32;this-&gt;intersection.setPointCount(25);
<anchor xml:id="_interface_8cpp_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00558"/><link linkend="_classefc_1_1Plane_1a972b3c48d4213d433dc4b3e99ded3727">00558</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Plane_1a972b3c48d4213d433dc4b3e99ded3727">run</link>()&#32;{
<anchor xml:id="_interface_8cpp_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(this-&gt;window.isOpen())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00560"/>00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::sf::Event&#32;event;&#32;::std::stringstream&#32;ts;
<anchor xml:id="_interface_8cpp_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(window.pollEvent(event))&#32;{
<anchor xml:id="_interface_8cpp_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(event.type)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;::sf::Event::Closed:&#32;this-&gt;window.close();&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;::sf::Event::MouseMoved:&#32;
<anchor xml:id="_interface_8cpp_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;line.setPosition(event.mouseMove.x,&#32;0);&#32;
<anchor xml:id="_interface_8cpp_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;intersection.setPosition(event.mouseMove.x&#32;-&#32;this-&gt;intersection.getRadius(),&#32;this-&gt;representation[event.mouseMove.x].position.y&#32;-&#32;this-&gt;intersection.getRadius());
<anchor xml:id="_interface_8cpp_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ts&#32;=&#32;::std::stringstream();&#32;ts&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="keyword">event</emphasis>.mouseMove.x&#32;+&#32;this-&gt;xogn&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&#32;&lt;&lt;&#32;inverse(this-&gt;representation[event.mouseMove.x].position.y&#32;+&#32;this-&gt;yogn)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;&#32;tooltip.setString(ts.str());
<anchor xml:id="_interface_8cpp_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tooltip.setPosition(event.mouseMove.x&#32;+&#32;10,&#32;this-&gt;representation[event.mouseMove.x].position.y);
<anchor xml:id="_interface_8cpp_source_1l00569"/>00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;::sf::Event::KeyPressed:&#32;
<anchor xml:id="_interface_8cpp_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(event.key.code)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;::sf::Keyboard::Up:&#32;this-&gt;yogn&#32;-=&#32;this-&gt;window.getSize().y/100;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;::sf::Keyboard::Down:&#32;this-&gt;yogn&#32;+=&#32;this-&gt;window.getSize().y/100;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;::sf::Keyboard::Right:&#32;this-&gt;xogn&#32;+=&#32;this-&gt;window.getSize().x/100;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;::sf::Keyboard::Left:&#32;this-&gt;xogn&#32;-=&#32;this-&gt;window.getSize().x/100;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;::sf::Keyboard::Space:&#32;this-&gt;xogn&#32;=&#32;this-&gt;_xogn;&#32;this-&gt;yogn&#32;=&#32;this-&gt;_yogn;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;this-&gt;populate();&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;case&#32;::sf::Event::Resized:&#32;this-&gt;resize(event);&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00580"/>00580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;this-&gt;draw();
<anchor xml:id="_interface_8cpp_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00583"/>00583 &#32;&#32;&#32;&#32;};
<anchor xml:id="_interface_8cpp_source_1l00589"/><link linkend="_classefc_1_1Storage">00589</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classefc_1_1Storage">Storage</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00590"/>00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00594"/>00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::std::string&#32;filename;
<anchor xml:id="_interface_8cpp_source_1l00595"/>00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00600"/><link linkend="_classefc_1_1Storage_1a9a9cfce79f418f1ad0ee0bb53bb9d048">00600</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Storage_1a9a9cfce79f418f1ad0ee0bb53bb9d048">Storage</link>(const&#32;::std::string&#32;file)&#32;noexcept&#32;:&#32;filename(::std::move(file))&#32;{<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00605"/><link linkend="_classefc_1_1Storage_1a62ca8189455b39656aa25531c3875cbd">00605</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::std::string&#32;<link linkend="_classefc_1_1Storage_1a62ca8189455b39656aa25531c3875cbd">read</link>()&#32;const&#32;noexcept&#32;{
<anchor xml:id="_interface_8cpp_source_1l00606"/>00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00607"/>00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::std::ifstream&#32;file(this-&gt;filename);
<anchor xml:id="_interface_8cpp_source_1l00608"/>00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file.is_open())&#32;{throw&#32;::std::runtime_error(<emphasis role="stringliteral">&quot;Input&#32;file&#32;does&#32;not&#32;exist&quot;</emphasis>);}
<anchor xml:id="_interface_8cpp_source_1l00609"/>00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::std::string&#32;contents((::std::istreambuf_iterator&lt;char&gt;(file)),&#32;::std::istreambuf_iterator&lt;char&gt;());
<anchor xml:id="_interface_8cpp_source_1l00610"/>00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.close();&#32;<emphasis role="keywordflow">return</emphasis>&#32;contents;
<anchor xml:id="_interface_8cpp_source_1l00611"/>00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(const&#32;::std::exception&amp;&#32;e)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00612"/>00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00618"/><link linkend="_classefc_1_1Storage_1af2c8369dcb906c07867a931387659788">00618</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1Storage_1af2c8369dcb906c07867a931387659788">write</link>(const&#32;::std::string&#32;contents)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00619"/>00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::std::ofstream&#32;file(this-&gt;filename,&#32;::std::ios::out&#32;|&#32;::std::ios::trunc);
<anchor xml:id="_interface_8cpp_source_1l00621"/>00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;contents;&#32;file.close();&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00622"/>00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(const&#32;::std::exception&amp;&#32;e)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1;}
<anchor xml:id="_interface_8cpp_source_1l00623"/>00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00628"/><link linkend="_classefc_1_1Storage_1ac141ea203205c34ebd653682d88b7e2c">00628</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classefc_1_1Storage_1ac141ea203205c34ebd653682d88b7e2c">exists</link>()&#32;const&#32;noexcept&#32;{
<anchor xml:id="_interface_8cpp_source_1l00629"/>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00630"/>00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::std::ifstream&#32;file(this-&gt;filename);
<anchor xml:id="_interface_8cpp_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!file.is_open())&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.close();&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00633"/>00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(const&#32;::std::exception&amp;&#32;e)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00634"/>00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00638"/><link linkend="_classefc_1_1Storage_1a5d83512b8daaf9e2cb188f877cb7bb5b">00638</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Storage_1a5d83512b8daaf9e2cb188f877cb7bb5b">~Storage</link>()&#32;noexcept&#32;=&#32;default;
<anchor xml:id="_interface_8cpp_source_1l00639"/>00639 &#32;&#32;&#32;&#32;};
<anchor xml:id="_interface_8cpp_source_1l00644"/><link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58c">00644</link> &#32;&#32;&#32;&#32;enum&#32;<link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58c">TokenType</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00648"/><link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58ca6deff0133907b9e20a1c345afd3c42aa">00648</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T_NUMBER,
<anchor xml:id="_interface_8cpp_source_1l00652"/><link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58ca29baf11d038163906f69fb410fe1d4e0">00652</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T_PLUS,
<anchor xml:id="_interface_8cpp_source_1l00656"/><link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58cae5e24b6fa05d86c2c2b3dd760683a775">00656</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T_MINUS,
<anchor xml:id="_interface_8cpp_source_1l00660"/><link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58cabf0e9e601a2dbc828e933bd240bbe386">00660</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58cabf0e9e601a2dbc828e933bd240bbe386">T_MULTIPLICATION</link>,
<anchor xml:id="_interface_8cpp_source_1l00664"/><link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58ca452aff6a9ea8337e9b27fc43824d0d00">00664</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58ca452aff6a9ea8337e9b27fc43824d0d00">T_DIVISION</link>,
<anchor xml:id="_interface_8cpp_source_1l00668"/>00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T_EOF
<anchor xml:id="_interface_8cpp_source_1l00669"/><link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58caa1fcef4084cd9aba09d36f5ed7110b6a">00669</link> &#32;&#32;&#32;&#32;};
<anchor xml:id="_interface_8cpp_source_1l00674"/><link linkend="_structefc_1_1Token">00674</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structefc_1_1Token">Token</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00678"/><link linkend="_structefc_1_1Token_1abd56361d2f52a2c345e106f8e2ec4197">00678</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespaceefc_1af24b42c9a5c7268f47143ad4e796b58c">TokenType</link>&#32;<link linkend="_structefc_1_1Token_1abd56361d2f52a2c345e106f8e2ec4197">type</link>;
<anchor xml:id="_interface_8cpp_source_1l00683"/>00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>{<emphasis role="keywordtype">char</emphasis>&#32;c;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n;}&#32;<link linkend="_unionvalue">value</link>;
<anchor xml:id="_interface_8cpp_source_1l00684"/>00684 &#32;&#32;&#32;&#32;};
<anchor xml:id="_interface_8cpp_source_1l00690"/><link linkend="_classefc_1_1Lexer">00690</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classefc_1_1Lexer">Lexer</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00695"/>00695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::std::string&#32;_input;
<anchor xml:id="_interface_8cpp_source_1l00699"/>00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_pos;
<anchor xml:id="_interface_8cpp_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;const&#32;::std::string&#32;clean(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;input)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00706"/>00706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;0;&#32;::std::string&#32;result;
<anchor xml:id="_interface_8cpp_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos&#32;&lt;&#32;input.size())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00708"/>00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(input[pos])&#32;{
<anchor xml:id="_interface_8cpp_source_1l00709"/>00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>:&#32;result&#32;+=&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00710"/>00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>:&#32;result&#32;+=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00711"/>00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>:&#32;result&#32;+=&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00712"/>00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>:&#32;result&#32;+=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Lexer::is_integer(input[pos]))&#32;{result&#32;+=&#32;input[pos];}&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;pos++;
<anchor xml:id="_interface_8cpp_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_interface_8cpp_source_1l00716"/>00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00723"/>00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_integer(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&amp;&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(c&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>);}
<anchor xml:id="_interface_8cpp_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00729"/><link linkend="_classefc_1_1Lexer_1ab12855801b122c387031155dec257b50">00729</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Lexer_1ab12855801b122c387031155dec257b50">Lexer</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;input)&#32;noexcept&#32;:&#32;_input(Lexer::clean(input)),&#32;_pos(0)&#32;{}
<anchor xml:id="_interface_8cpp_source_1l00734"/><link linkend="_classefc_1_1Lexer_1a3eb3b61f1ba41e9d3150052b6280167b">00734</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structefc_1_1Token">Token</link>&#32;<link linkend="_classefc_1_1Lexer_1a3eb3b61f1ba41e9d3150052b6280167b">next</link>()&#32;noexcept&#32;{
<anchor xml:id="_interface_8cpp_source_1l00735"/>00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_pos&#32;&gt;=&#32;this-&gt;_input.size())&#32;{<emphasis role="keywordflow">return</emphasis>&#32;{TokenType::T_EOF,&#32;{0}};}
<anchor xml:id="_interface_8cpp_source_1l00736"/>00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(this-&gt;_input[this-&gt;_pos])&#32;{
<anchor xml:id="_interface_8cpp_source_1l00737"/>00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>:&#32;this-&gt;_pos++;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{TokenType::T_PLUS,&#32;{0}};
<anchor xml:id="_interface_8cpp_source_1l00738"/>00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>:&#32;this-&gt;_pos++;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{TokenType::T_MINUS,&#32;{0}};
<anchor xml:id="_interface_8cpp_source_1l00739"/>00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>:&#32;this-&gt;_pos++;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{TokenType::T_MULTIPLICATION,&#32;{0}};
<anchor xml:id="_interface_8cpp_source_1l00740"/>00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>:&#32;this-&gt;_pos++;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{TokenType::T_DIVISION,&#32;{0}};
<anchor xml:id="_interface_8cpp_source_1l00741"/>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;this-&gt;_pos++;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{TokenType::T_NUMBER,&#32;{(char)&#32;this-&gt;_input[this-&gt;_pos&#32;-&#32;1]}};
<anchor xml:id="_interface_8cpp_source_1l00742"/>00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00747"/><link linkend="_classefc_1_1Lexer_1a77d56d461130cb509b3831daa7e06851">00747</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Lexer_1a77d56d461130cb509b3831daa7e06851">~Lexer</link>()&#32;noexcept&#32;=&#32;default;
<anchor xml:id="_interface_8cpp_source_1l00748"/>00748 &#32;&#32;&#32;&#32;};
<anchor xml:id="_interface_8cpp_source_1l00754"/><link linkend="_classefc_1_1Parser">00754</link> &#32;&#32;&#32;&#32;class&#32;<link linkend="_classefc_1_1Parser">Parser</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00755"/>00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Lexer">Lexer</link>&#32;_lexer;
<anchor xml:id="_interface_8cpp_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00765"/><link linkend="_classefc_1_1Parser_1ad95836dabb6525baf080aa8d0fdb3b56">00765</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Parser_1ad95836dabb6525baf080aa8d0fdb3b56">Parser</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;input)&#32;noexcept&#32;:&#32;_lexer(input)&#32;{}
<anchor xml:id="_interface_8cpp_source_1l00770"/><link linkend="_classefc_1_1Parser_1ad801320ff4014bb3e2822a2b56dc246e">00770</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classefc_1_1Parser_1ad801320ff4014bb3e2822a2b56dc246e">parse_number</link>()&#32;noexcept&#32;{
<anchor xml:id="_interface_8cpp_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;positive&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00772"/>00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::std::string&#32;buffer&#32;=&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00773"/>00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00774"/>00774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structefc_1_1Token">Token</link>&#32;token&#32;=&#32;this-&gt;_lexer.<link linkend="_classefc_1_1Lexer_1a3eb3b61f1ba41e9d3150052b6280167b">next</link>();
<anchor xml:id="_interface_8cpp_source_1l00775"/>00775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(token.<link linkend="_structefc_1_1Token_1abd56361d2f52a2c345e106f8e2ec4197">type</link>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00776"/>00776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TokenType::T_MINUS:&#32;positive&#32;=&#32;!positive;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00777"/>00777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TokenType::T_NUMBER:&#32;buffer&#32;+=&#32;token.value.c;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00778"/>00778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TokenType::T_EOF:&#32;<emphasis role="keywordflow">return</emphasis>&#32;positive&#32;?&#32;std::stoi(buffer)&#32;:&#32;-1&#32;*&#32;std::stoi(buffer);
<anchor xml:id="_interface_8cpp_source_1l00779"/>00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00780"/>00780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00781"/>00781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00787"/><link linkend="_classefc_1_1Parser_1aa3007aab2177728edcfba4c0e4bb460f">00787</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;<link linkend="_classefc_1_1Parser_1aa3007aab2177728edcfba4c0e4bb460f">parse_operation</link>(const&#32;::std::vector&lt;emth::Polynomial&gt;&amp;&#32;ps)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hook&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;emth::Polynomial&gt;&#32;data;&#32;std::vector&lt;TokenType&gt;&#32;operations;
<anchor xml:id="_interface_8cpp_source_1l00790"/>00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00791"/>00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structefc_1_1Token">Token</link>&#32;token&#32;=&#32;this-&gt;_lexer.<link linkend="_classefc_1_1Lexer_1a3eb3b61f1ba41e9d3150052b6280167b">next</link>();
<anchor xml:id="_interface_8cpp_source_1l00792"/>00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.<link linkend="_structefc_1_1Token_1abd56361d2f52a2c345e106f8e2ec4197">type</link>&#32;==&#32;TokenType::T_EOF)&#32;{<emphasis role="keywordflow">break</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l00793"/>00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(token.<link linkend="_structefc_1_1Token_1abd56361d2f52a2c345e106f8e2ec4197">type</link>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00794"/>00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TokenType::T_NUMBER:&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!hook&#32;&amp;&amp;&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;std::stoi(std::string(1,&#32;token.value.c))&#32;&lt;&#32;ps.size())&#32;{data.push_back(ps[std::stoi(std::string(1,&#32;token.value.c))]);&#32;hook&#32;=&#32;<emphasis role="keyword">true</emphasis>;}&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00795"/>00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hook)&#32;{operations.push_back(token.<link linkend="_structefc_1_1Token_1abd56361d2f52a2c345e106f8e2ec4197">type</link>);&#32;hook&#32;=&#32;<emphasis role="keyword">false</emphasis>;}&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00796"/>00796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00797"/>00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00798"/>00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;operations.size();&#32;i++)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00799"/>00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(operations[i]&#32;==&#32;TokenType::T_MULTIPLICATION&#32;||&#32;operations[i]&#32;==&#32;TokenType::T_DIVISION)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00800"/>00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(operations[i])&#32;{
<anchor xml:id="_interface_8cpp_source_1l00801"/>00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TokenType::T_MULTIPLICATION:&#32;data[i]&#32;*=&#32;data[i&#32;+&#32;1];&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TokenType::T_DIVISION:&#32;data[i]&#32;/=&#32;data[i&#32;+&#32;1];&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00803"/>00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;data.erase(data.begin()&#32;+&#32;i&#32;+&#32;1);&#32;operations.erase(operations.begin()&#32;+&#32;i);&#32;i--;
<anchor xml:id="_interface_8cpp_source_1l00804"/>00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;operations.size();&#32;i++)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00807"/>00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(operations[i])&#32;{
<anchor xml:id="_interface_8cpp_source_1l00808"/>00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TokenType::T_PLUS:&#32;data[i]&#32;+=&#32;data[i&#32;+&#32;1];&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00809"/>00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;TokenType::T_MINUS:&#32;data[i]&#32;-=&#32;data[i&#32;+&#32;1];&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00810"/>00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;data.erase(data.begin()&#32;+&#32;i&#32;+&#32;1);&#32;operations.erase(operations.begin()&#32;+&#32;i);&#32;i--;
<anchor xml:id="_interface_8cpp_source_1l00811"/>00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;data[0];
<anchor xml:id="_interface_8cpp_source_1l00812"/>00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00816"/><link linkend="_classefc_1_1Parser_1a56a3102383a805ae6e3ed858f3efbfe1">00816</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Parser_1a56a3102383a805ae6e3ed858f3efbfe1">~Parser</link>()&#32;noexcept&#32;=&#32;default;
<anchor xml:id="_interface_8cpp_source_1l00817"/>00817 &#32;&#32;&#32;&#32;};
<anchor xml:id="_interface_8cpp_source_1l00823"/><link linkend="_classefc_1_1Application">00823</link> &#32;&#32;&#32;&#32;class&#32;<link linkend="_classefc_1_1Application">Application</link>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00824"/>00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l00825"/>00825 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;V_MENU&#32;{::std::string(&quot;[ESC]&#32;Exit&#32;program&quot;</emphasis>),&#32;::std::string(&quot;[TAB]&#32;Cycle&#32;focus&quot;),&#32;::std::string(&quot;[E]&#32;Add&#32;polynomial&quot;),&#32;::std::string(&quot;[Q]&#32;Remove&#32;polynomial&quot;),&#32;::std::string(&quot;[SPACE]&#32;New&#32;operation&quot;)}
<anchor xml:id="_interface_8cpp_source_1l00826"/>00826 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;V_OPERATION&#32;{::std::string(&quot;[ESC]&#32;Back&quot;</emphasis>),&#32;::std::string(&quot;[TAB]&#32;Cycle&#32;focus&quot;),&#32;::std::string(&quot;[1]&#32;Evaluate&#32;operation&quot;),&#32;::std::string(&quot;[2]&#32;Derivative&#32;operation&quot;),&#32;::std::string(&quot;[3]&#32;Integral&#32;operation&quot;),&#32;::std::string(&quot;[4]&#32;Root&#32;finding&#32;operation&quot;),&#32;::std::string(&quot;[5]&#32;Drawing&#32;operation&quot;),&#32;::std::string(&quot;[SPACE]&#32;Arithmetic&#32;operations&quot;)}
<anchor xml:id="_interface_8cpp_source_1l00827"/>00827 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;V_SCROLL&#32;{::std::string(&quot;[ESC]&#32;Exit&#32;program&quot;</emphasis>),&#32;::std::string(&quot;[UP&#32;ARROW]&#32;Scroll&#32;up&quot;),&#32;::std::string(&quot;[DOWN&#32;ARROW]&#32;Scroll&#32;down&quot;)}
<anchor xml:id="_interface_8cpp_source_1l00831"/>00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classefc_1_1Application">Application</link>*&#32;instance;
<anchor xml:id="_interface_8cpp_source_1l00835"/>00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Terminal">Terminal</link>*&#32;terminal;
<anchor xml:id="_interface_8cpp_source_1l00839"/>00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classefc_1_1Storage">Storage</link>&#32;storage;
<anchor xml:id="_interface_8cpp_source_1l00843"/>00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rapidjson::Document&#32;json;
<anchor xml:id="_interface_8cpp_source_1l00847"/>00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::std::vector&lt;emth::Polynomial&gt;&#32;polynomials;
<anchor xml:id="_interface_8cpp_source_1l00851"/>00851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;active;
<anchor xml:id="_interface_8cpp_source_1l00855"/>00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Application">Application</link>()&#32;noexcept&#32;:&#32;terminal(Terminal::init()),&#32;storage(<link linkend="_classefc_1_1Storage">Storage</link>(SG_FILE)),&#32;active(BWIN)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00856"/>00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!this-&gt;storage.<link linkend="_classefc_1_1Storage_1ac141ea203205c34ebd653682d88b7e2c">exists</link>())&#32;{this-&gt;json.SetArray();}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{this-&gt;json.Parse(this-&gt;storage.<link linkend="_classefc_1_1Storage_1a62ca8189455b39656aa25531c3875cbd">read</link>().c_str());&#32;this-&gt;read_json();}
<anchor xml:id="_interface_8cpp_source_1l00857"/>00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a9103a252f46463cd09adc2bb2436fa30">set_ltitle</link>(<emphasis role="stringliteral">&quot;&lt;Main&#32;menu&gt;&quot;</emphasis>);
<anchor xml:id="_interface_8cpp_source_1l00858"/>00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1acc6236b69a0d0a2b1c9ae9cb3e6b1056">set_rtitle</link>(<emphasis role="stringliteral">&quot;&lt;Polynomials&gt;&quot;</emphasis>);
<anchor xml:id="_interface_8cpp_source_1l00859"/>00859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;Option:&quot;</emphasis>);
<anchor xml:id="_interface_8cpp_source_1l00860"/>00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac9e693242036242db200bbbebc3d83e6">set_rdata</link>(this-&gt;stringify_polynomials());
<anchor xml:id="_interface_8cpp_source_1l00861"/>00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00862"/>00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00867"/>00867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;save_json()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00868"/>00868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00869"/>00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rapidjson::StringBuffer&#32;buffer;
<anchor xml:id="_interface_8cpp_source_1l00870"/>00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rapidjson::Writer&lt;rapidjson::StringBuffer&gt;&#32;writer(buffer);
<anchor xml:id="_interface_8cpp_source_1l00871"/>00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;json.Accept(writer);
<anchor xml:id="_interface_8cpp_source_1l00872"/>00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;storage.<link linkend="_classefc_1_1Storage_1af2c8369dcb906c07867a931387659788">write</link>(buffer.GetString());
<anchor xml:id="_interface_8cpp_source_1l00873"/>00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(::std::exception&amp;&#32;e)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00874"/>00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00879"/>00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;read_json()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00880"/>00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00881"/>00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;json.IsArray())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00882"/>00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;o&#32;:&#32;this-&gt;json.GetArray())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00883"/>00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(o.IsString())&#32;{this-&gt;polynomials.push_back(<link linkend="_classemthp_1_1Parser">emthp::Parser</link>(o.GetString()).<link linkend="_classemthp_1_1Parser_1a933df3ba2501887aa6d947bfe6eafe4b">parse_polynomial</link>());}
<anchor xml:id="_interface_8cpp_source_1l00884"/>00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00885"/>00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00886"/>00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(::std::exception&amp;&#32;e)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00887"/>00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00892"/>00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;cycle_focus()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00893"/>00893 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;swpa(o)&#32;this-&gt;active&#32;=&#32;o;&#32;this-&gt;terminal-&gt;swap_active(o);</emphasis>
<anchor xml:id="_interface_8cpp_source_1l00894"/>00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(this-&gt;active)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00895"/>00895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;LWIN:&#32;swpa(RWIN);&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_interface_8cpp_source_1l00896"/>00896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;RWIN:&#32;swpa(BWIN);&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00897"/>00897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;BWIN:&#32;swpa(LWIN);&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_interface_8cpp_source_1l00898"/>00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00899"/>00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00904"/>00904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;scroll_loop()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00905"/>00905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1aa705ec16ca8fcc9549b90793c58b4d83">set_ldata</link>(V_SCROLL);
<anchor xml:id="_interface_8cpp_source_1l00906"/>00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l00907"/>00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00908"/>00908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a966affe71a3fd3c461a907e41a609cc8">get_short_input</link>())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00909"/>00909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_ESC:&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00910"/>00910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_TAB:&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_interface_8cpp_source_1l00911"/>00911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_UP:&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a2b2ddbc6125d3a7ffa8101e161066034">scroll_up</link>(this-&gt;active);&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00912"/>00912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_DOWN:&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a2b2ddbc6125d3a7ffa8101e161066034">scroll_up</link>(this-&gt;active);&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00913"/>00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l00914"/>00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00915"/>00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00920"/>00920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;get_polynomial()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00921"/>00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00922"/>00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;Polynomial:&quot;</emphasis>);&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l00923"/>00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;polynomial(<link linkend="_classemthp_1_1Parser">emthp::Parser</link>(this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781">get_long_input</link>()).<link linkend="_classemthp_1_1Parser_1a933df3ba2501887aa6d947bfe6eafe4b">parse_polynomial</link>());
<anchor xml:id="_interface_8cpp_source_1l00924"/>00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;add_polynomial(polynomial);
<anchor xml:id="_interface_8cpp_source_1l00925"/>00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(::std::exception&amp;&#32;e)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1;}&#32;
<anchor xml:id="_interface_8cpp_source_1l00926"/>00926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;Option:&quot;</emphasis>);&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00927"/>00927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00932"/>00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;add_polynomial(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;polynomial)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00933"/>00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00934"/>00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;json.PushBack(rapidjson::Value(polynomial.<link linkend="_classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b">get_expression</link>().c_str(),&#32;this-&gt;json.GetAllocator()).Move(),&#32;this-&gt;json.GetAllocator());
<anchor xml:id="_interface_8cpp_source_1l00935"/>00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;polynomials.push_back(::std::move(polynomial));
<anchor xml:id="_interface_8cpp_source_1l00936"/>00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac9e693242036242db200bbbebc3d83e6">set_rdata</link>(this-&gt;stringify_polynomials());
<anchor xml:id="_interface_8cpp_source_1l00937"/>00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;save_json();
<anchor xml:id="_interface_8cpp_source_1l00938"/>00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(::std::exception&amp;&#32;e)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1;}&#32;
<anchor xml:id="_interface_8cpp_source_1l00939"/>00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00940"/>00940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00945"/>00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;remove_polynomial(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00946"/>00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l00947"/>00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(id&#32;&lt;&#32;this-&gt;polynomials.size())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00948"/>00948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;polynomials.erase(this-&gt;polynomials.begin()&#32;+&#32;<emphasis role="keywordtype">id</emphasis>);
<anchor xml:id="_interface_8cpp_source_1l00949"/>00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;json.Erase(this-&gt;json.Begin()&#32;+&#32;<emphasis role="keywordtype">id</emphasis>);
<anchor xml:id="_interface_8cpp_source_1l00950"/>00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac9e693242036242db200bbbebc3d83e6">set_rdata</link>(this-&gt;stringify_polynomials());
<anchor xml:id="_interface_8cpp_source_1l00951"/>00951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;save_json();
<anchor xml:id="_interface_8cpp_source_1l00952"/>00952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>(<emphasis role="stringliteral">&quot;No&#32;polynomial&#32;with&#32;index:&quot;</emphasis>&#32;+&#32;std::to_string(<emphasis role="keywordtype">id</emphasis>));}
<anchor xml:id="_interface_8cpp_source_1l00953"/>00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(::std::exception&amp;&#32;e)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;1;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00954"/>00954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00959"/>00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::std::vector&lt;::std::string&gt;&#32;stringify_polynomials()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{::std::vector&lt;::std::string&gt;&#32;buffer;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this-&gt;polynomials.size();&#32;i++)&#32;{buffer.push_back(<emphasis role="stringliteral">&quot;[&quot;</emphasis>&#32;+&#32;std::to_string(i)&#32;+&#32;<emphasis role="stringliteral">&quot;]&#32;&quot;</emphasis>&#32;+&#32;::std::move(this-&gt;polynomials[i].get_expression()));}&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;}
<anchor xml:id="_interface_8cpp_source_1l00964"/>00964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;main_loop()&#32;{
<anchor xml:id="_interface_8cpp_source_1l00965"/>00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1aa705ec16ca8fcc9549b90793c58b4d83">set_ldata</link>(V_MENU);
<anchor xml:id="_interface_8cpp_source_1l00966"/>00966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l00967"/>00967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00968"/>00968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a966affe71a3fd3c461a907e41a609cc8">get_short_input</link>())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00969"/>00969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_ESC:&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_SPC:&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;
<anchor xml:id="_interface_8cpp_source_1l00970"/>00970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_TAB:&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;
<anchor xml:id="_interface_8cpp_source_1l00971"/>00971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_E:&#32;this-&gt;get_polynomial();&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00972"/>00972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_Q:&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;Id:&quot;</emphasis>);&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();&#32;this-&gt;remove_polynomial(Application::to_int(this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781">get_long_input</link>()));&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;Option:&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l00973"/>00973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l00974"/>00974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00975"/>00975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00980"/>00980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;operation_loop()&#32;{
<anchor xml:id="_interface_8cpp_source_1l00981"/>00981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!this-&gt;polynomials.empty())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00982"/>00982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1aa705ec16ca8fcc9549b90793c58b4d83">set_ldata</link>(V_OPERATION);
<anchor xml:id="_interface_8cpp_source_1l00983"/>00983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l00984"/>00984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l00985"/>00985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a966affe71a3fd3c461a907e41a609cc8">get_short_input</link>())&#32;{
<anchor xml:id="_interface_8cpp_source_1l00986"/>00986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_ESC:&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_TAB:&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;
<anchor xml:id="_interface_8cpp_source_1l00987"/>00987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_SPC:&#32;this-&gt;calculate(0);&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_interface_8cpp_source_1l00988"/>00988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_1:&#32;this-&gt;calculate(1);&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_interface_8cpp_source_1l00989"/>00989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_2:&#32;this-&gt;calculate(2);&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_interface_8cpp_source_1l00990"/>00990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_3:&#32;this-&gt;calculate(3);&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_interface_8cpp_source_1l00991"/>00991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_4:&#32;this-&gt;calculate(4);&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_interface_8cpp_source_1l00992"/>00992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;KEY_5:&#32;this-&gt;calculate(5);&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_interface_8cpp_source_1l00993"/>00993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l00994"/>00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l00995"/>00995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>(<emphasis role="stringliteral">&quot;No&#32;polynomials&#32;registered!&quot;</emphasis>);&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_interface_8cpp_source_1l00996"/>00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01001"/>01001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;calculate(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l01002"/>01002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;Input:&quot;</emphasis>);&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l01003"/>01003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;==&#32;0)&#32;{
<anchor xml:id="_interface_8cpp_source_1l01004"/>01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l01005"/>01005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;in&#32;=&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781">get_long_input</link>();
<anchor xml:id="_interface_8cpp_source_1l01006"/>01006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;r&#32;=&#32;<link linkend="_classefc_1_1Parser">Parser</link>(in).<link linkend="_classefc_1_1Parser_1aa3007aab2177728edcfba4c0e4bb460f">parse_operation</link>(this-&gt;polynomials);
<anchor xml:id="_interface_8cpp_source_1l01007"/>01007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>(r.<link linkend="_classemth_1_1Polynomial_1a66649c1d2b624555d375096e27bc9855">is_empty</link>()&#32;?&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;:&#32;r.<link linkend="_classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b">get_expression</link>());
<anchor xml:id="_interface_8cpp_source_1l01008"/>01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(in[0]&#32;==&#32;<emphasis role="charliteral">&apos;_&apos;</emphasis>)&#32;{this-&gt;add_polynomial(r);}
<anchor xml:id="_interface_8cpp_source_1l01009"/>01009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;e)&#32;{this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>(<emphasis role="stringliteral">&quot;No&#32;polynomial&#32;with&#32;index:&quot;</emphasis>&#32;+&#32;std::to_string(e));}
<anchor xml:id="_interface_8cpp_source_1l01010"/>01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l01011"/>01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;sinput&#32;=&#32;Application::to_int(this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781">get_long_input</link>());
<anchor xml:id="_interface_8cpp_source_1l01012"/>01012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sinput&#32;&lt;&#32;this-&gt;polynomials.size())&#32;{
<anchor xml:id="_interface_8cpp_source_1l01013"/>01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(t)&#32;{
<anchor xml:id="_interface_8cpp_source_1l01014"/>01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
<anchor xml:id="_interface_8cpp_source_1l01015"/>01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;Value:&quot;</emphasis>);&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l01016"/>01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>((::std::stringstream()&#32;&lt;&lt;&#32;this-&gt;polynomials[sinput].get_value(Application::to_int(this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781">get_long_input</link>()))).str());
<anchor xml:id="_interface_8cpp_source_1l01017"/>01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01018"/>01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>(this-&gt;polynomials[sinput].get_derivative().get_expression());&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01019"/>01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>(this-&gt;polynomials[sinput].get_integral().get_expression());&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01020"/>01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>(vtoss(this-&gt;polynomials[sinput].get_roots()));&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01021"/>01021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5:&#32;launch_plane(this-&gt;polynomials[sinput]);&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01022"/>01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01023"/>01023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ac8d0de8abed39f84908622187f5cb95e">echo_result</link>(<emphasis role="stringliteral">&quot;No&#32;polynomial&#32;with&#32;index:&quot;</emphasis>&#32;+&#32;std::to_string(sinput));}
<anchor xml:id="_interface_8cpp_source_1l01024"/>01024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;Option:&quot;</emphasis>);&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01025"/>01025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01030"/>01030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;launch_plane(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;function)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_interface_8cpp_source_1l01031"/>01031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;X&#32;Offset:&quot;</emphasis>);&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l01032"/>01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;Application::to_int(this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781">get_long_input</link>());
<anchor xml:id="_interface_8cpp_source_1l01033"/>01033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1ad8cb9d988b58a3b0d59dd703b47467fa">set_prompt</link>(<emphasis role="stringliteral">&quot;Y&#32;Offset:&quot;</emphasis>);&#32;this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a873c2d27e271e805c0665ff6952bf8a2">flush</link>();
<anchor xml:id="_interface_8cpp_source_1l01034"/>01034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;Application::to_int(this-&gt;terminal-&gt;<link linkend="_classefc_1_1Terminal_1a49bb9b2d0fc46335d4426c79b0b1f781">get_long_input</link>());
<anchor xml:id="_interface_8cpp_source_1l01035"/>01035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::thread&#32;plane_thread([function,&#32;x,&#32;y](){<link linkend="_classefc_1_1Plane">Plane</link>&#32;p(-x,&#32;-y,&#32;function);&#32;p.<link linkend="_classefc_1_1Plane_1a972b3c48d4213d433dc4b3e99ded3727">run</link>();&#32;<emphasis role="keywordflow">return</emphasis>;});
<anchor xml:id="_interface_8cpp_source_1l01036"/>01036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;plane_thread.detach();&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01037"/>01037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01043"/>01043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;to_int(const&#32;::std::string&amp;&#32;number)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classefc_1_1Parser">Parser</link>(number).<link linkend="_classefc_1_1Parser_1ad801320ff4014bb3e2822a2b56dc246e">parse_number</link>();}
<anchor xml:id="_interface_8cpp_source_1l01049"/>01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;vtoss(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;std::complex&lt;double&gt;&gt;&amp;&#32;v)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{std::stringstream&#32;ss;&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;&#32;ctoss(ss,&#32;v[0]);&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;v.size();&#32;i++)&#32;{ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;&#32;ctoss(ss,&#32;v[i]);}&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ss.str();}
<anchor xml:id="_interface_8cpp_source_1l01055"/>01055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ctoss(std::stringstream&amp;&#32;ss,&#32;<emphasis role="keyword">const</emphasis>&#32;std::complex&lt;double&gt;&amp;&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::abs(c.real())&#32;&gt;&#32;1e-9&#32;&amp;&amp;&#32;std::abs(c.imag())&#32;&gt;&#32;1e-9)&#32;{ss&#32;&lt;&lt;&#32;c.real()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;((c.imag()&#32;&gt;&#32;0)&#32;?&#32;<emphasis role="stringliteral">&quot;+&#32;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;-&#32;&quot;</emphasis>)&#32;&lt;&lt;&#32;std::abs(c.imag())&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;i&quot;</emphasis>;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::abs(c.real())&#32;&gt;&#32;1e-9)&#32;{ss&#32;&lt;&lt;&#32;c.real();}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::abs(c.imag())&#32;&gt;&#32;1e-9)&#32;{ss&#32;&lt;&lt;&#32;c.imag()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;i&quot;</emphasis>;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>;}&#32;ss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_interface_8cpp_source_1l01056"/>01056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_interface_8cpp_source_1l01061"/><link linkend="_classefc_1_1Application_1a612f4545a4b1e5d89decab2f5e092d90">01061</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classefc_1_1Application">Application</link>*&#32;<link linkend="_classefc_1_1Application_1a612f4545a4b1e5d89decab2f5e092d90">init</link>()&#32;noexcept&#32;{
<anchor xml:id="_interface_8cpp_source_1l01062"/>01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Application::instance&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{<emphasis role="keyword">delete</emphasis>&#32;Application::instance;}
<anchor xml:id="_interface_8cpp_source_1l01063"/>01063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Application::instance&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classefc_1_1Application">Application</link>();
<anchor xml:id="_interface_8cpp_source_1l01064"/>01064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01068"/><link linkend="_classefc_1_1Application_1a151fab3a86220c774be08189cf8dcb46">01068</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classefc_1_1Application_1a151fab3a86220c774be08189cf8dcb46">run</link>()&#32;{
<anchor xml:id="_interface_8cpp_source_1l01069"/>01069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hook&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01070"/>01070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_interface_8cpp_source_1l01071"/>01071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(this-&gt;main_loop())&#32;{
<anchor xml:id="_interface_8cpp_source_1l01072"/>01072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01073"/>01073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;operation_loop()&#32;==&#32;2&#32;&amp;&amp;&#32;this-&gt;cycle_focus()&#32;==&#32;1)&#32;{hook&#32;=&#32;<emphasis role="keyword">true</emphasis>;}&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01074"/>01074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;cycle_focus()&#32;==&#32;1)&#32;{hook&#32;=&#32;<emphasis role="keyword">true</emphasis>;}&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01075"/>01075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01076"/>01076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(hook)&#32;{
<anchor xml:id="_interface_8cpp_source_1l01077"/>01077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(this-&gt;scroll_loop())&#32;{
<anchor xml:id="_interface_8cpp_source_1l01078"/>01078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01079"/>01079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;cycle_focus()&#32;!=&#32;1)&#32;{hook&#32;=&#32;<emphasis role="keyword">false</emphasis>;};&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01080"/>01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01081"/>01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01082"/>01082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01083"/>01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01087"/><link linkend="_classefc_1_1Application_1adc655697a7fa28de4f8526819eb1a083">01087</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classefc_1_1Application_1adc655697a7fa28de4f8526819eb1a083">~Application</link>()&#32;noexcept&#32;{
<anchor xml:id="_interface_8cpp_source_1l01088"/>01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Application::instance&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01089"/>01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;this-&gt;terminal;
<anchor xml:id="_interface_8cpp_source_1l01090"/>01090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;save_json();&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01091"/>01091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_interface_8cpp_source_1l01092"/>01092 &#32;&#32;&#32;&#32;};&#32;Application*&#32;Application::instance&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_interface_8cpp_source_1l01093"/>01093 }
<anchor xml:id="_interface_8cpp_source_1l01098"/><link linkend="_interface_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">01098</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_interface_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>()&#32;{<link linkend="_classefc_1_1Application">efc::Application</link>*&#32;app&#32;=&#32;<link linkend="_classefc_1_1Application_1a612f4545a4b1e5d89decab2f5e092d90">efc::Application::init</link>();&#32;app-&gt;<link linkend="_classefc_1_1Application_1a151fab3a86220c774be08189cf8dcb46">run</link>();&#32;<emphasis role="keyword">delete</emphasis>&#32;app;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;}
<anchor xml:id="_interface_8cpp_source_1l01099"/>01099 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
