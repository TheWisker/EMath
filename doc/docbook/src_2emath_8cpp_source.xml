<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_src_2emath_8cpp_source" xml:lang="en-US">
<title>emath.cpp</title>
<indexterm><primary>src/emath.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_src_2emath_8cpp_source_1l00001"/>00001 
<anchor xml:id="_src_2emath_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_emath_8h">emath.h</link>&quot;</emphasis>
<anchor xml:id="_src_2emath_8cpp_source_1l00015"/><link linkend="_classemth_1_1Arithmetic_1adddfba367517025753ae37062ac6f483">00015</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classemth_1_1Arithmetic_1adddfba367517025753ae37062ac6f483">emth::Arithmetic::get_divisors</link>(<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;std::vector&lt;int&gt;&amp;&#32;v)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;limit(std::sqrt(n));
<anchor xml:id="_src_2emath_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;limit;&#32;i++)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::fmod(n,&#32;i)&#32;==&#32;0)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v.push_back(i);
<anchor xml:id="_src_2emath_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;n&#32;/&#32;i)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v.push_back(n&#32;/&#32;i);
<anchor xml:id="_src_2emath_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00026"/>00026 }
<anchor xml:id="_src_2emath_8cpp_source_1l00030"/><link linkend="_classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7">00030</link> <link linkend="_classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7">emth::Monomial::Monomial</link>()&#32;noexcept&#32;:&#32;coeff(0),&#32;degree(0)&#32;{}
<anchor xml:id="_src_2emath_8cpp_source_1l00036"/><link linkend="_classemth_1_1Monomial_1a70ba615f776f89452b3b11bb9dfe045e">00036</link> <link linkend="_classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7">emth::Monomial::Monomial</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;cf,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;dgr)&#32;noexcept&#32;:&#32;coeff(cf),&#32;degree(dgr)&#32;{}
<anchor xml:id="_src_2emath_8cpp_source_1l00041"/><link linkend="_classemth_1_1Monomial_1aa5fc7752eb6a5db663872dd7298140c1">00041</link> <link linkend="_classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7">emth::Monomial::Monomial</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>&amp;&#32;ogn)&#32;noexcept&#32;:&#32;coeff(ogn.coeff),&#32;degree(ogn.degree)&#32;{}
<anchor xml:id="_src_2emath_8cpp_source_1l00046"/><link linkend="_classemth_1_1Monomial_1a0d77a762defbcd2cb1925e3258f6158f">00046</link> <link linkend="_classemth_1_1Monomial_1ae6048a5e8de2117072def861911aa4a7">emth::Monomial::Monomial</link>(<link linkend="_classemth_1_1Monomial">Monomial</link>&amp;&amp;&#32;ogn)&#32;noexcept&#32;:&#32;coeff(std::move(ogn.coeff)),&#32;degree(std::move(ogn.degree))&#32;{}
<anchor xml:id="_src_2emath_8cpp_source_1l00052"/><link linkend="_classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4">00052</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;<link linkend="_classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4">emth::Monomial::operator =</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<link linkend="_classemth_1_1Monomial">Monomial</link>&#32;copy(ogn);&#32;this-&gt;swap(copy);&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;}
<anchor xml:id="_src_2emath_8cpp_source_1l00058"/><link linkend="_classemth_1_1Monomial_1a7ea9ffbef1c53c8e0f7a9bfda2dcb691">00058</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;<link linkend="_classemth_1_1Monomial_1a3de7a92cfd27acad4e1ff3d2158536f4">emth::Monomial::operator =</link>(<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;swap(ogn);&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;}
<anchor xml:id="_src_2emath_8cpp_source_1l00065"/><link linkend="_classemth_1_1Monomial_1a2f9d14fa6443fc160258121c7907b989">00065</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1a2f9d14fa6443fc160258121c7907b989">emth::Monomial::operator ==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((this-&gt;coeff&#32;==&#32;ogn.coeff)&#32;&amp;&amp;&#32;(this-&gt;degree&#32;==&#32;ogn.degree));}
<anchor xml:id="_src_2emath_8cpp_source_1l00072"/><link linkend="_classemth_1_1Monomial_1ab7f80ead25e2f5d4ad80cdbbfe49d5e3">00072</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1ab7f80ead25e2f5d4ad80cdbbfe49d5e3">emth::Monomial::operator !=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;ogn));}
<anchor xml:id="_src_2emath_8cpp_source_1l00079"/><link linkend="_classemth_1_1Monomial_1a995abc13b689075b21b43a30ce043e72">00079</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1a995abc13b689075b21b43a30ce043e72">emth::Monomial::operator &gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;degree&#32;&gt;&#32;ogn.degree);};
<anchor xml:id="_src_2emath_8cpp_source_1l00086"/><link linkend="_classemth_1_1Monomial_1a33c3c8003322cc2a8f2c4f2e1b44a387">00086</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1a33c3c8003322cc2a8f2c4f2e1b44a387">emth::Monomial::operator &lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;degree&#32;&lt;&#32;ogn.degree);};
<anchor xml:id="_src_2emath_8cpp_source_1l00093"/><link linkend="_classemth_1_1Monomial_1a36079411f2ae6f90e71a09b6723ecf35">00093</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1a36079411f2ae6f90e71a09b6723ecf35">emth::Monomial::operator &gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;degree&#32;&gt;=&#32;ogn.degree);};
<anchor xml:id="_src_2emath_8cpp_source_1l00100"/><link linkend="_classemth_1_1Monomial_1a80fe0433858cf335c1e29ff15aa4bcb8">00100</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1a80fe0433858cf335c1e29ff15aa4bcb8">emth::Monomial::operator &lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;degree&#32;&lt;=&#32;ogn.degree);};
<anchor xml:id="_src_2emath_8cpp_source_1l00106"/><link linkend="_classemth_1_1Monomial_1aa545290af910fc7a0c68bc02decd41c5">00106</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&#32;<link linkend="_classemth_1_1Monomial_1aa545290af910fc7a0c68bc02decd41c5">emth::Monomial::operator +</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;+=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00112"/><link linkend="_classemth_1_1Monomial_1aee07c6d65bc594b8eaaa4d0299840e05">00112</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&#32;<link linkend="_classemth_1_1Monomial_1aee07c6d65bc594b8eaaa4d0299840e05">emth::Monomial::operator -</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;-=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00118"/><link linkend="_classemth_1_1Monomial_1a98a931372dbd0ddafe82ce5601f30836">00118</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&#32;<link linkend="_classemth_1_1Monomial_1a98a931372dbd0ddafe82ce5601f30836">emth::Monomial::operator *</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;*=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00124"/><link linkend="_classemth_1_1Monomial_1a55982755a6223cbf977e55979fcad8ff">00124</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&#32;<link linkend="_classemth_1_1Monomial_1a55982755a6223cbf977e55979fcad8ff">emth::Monomial::operator /</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;/=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00130"/><link linkend="_classemth_1_1Monomial_1a8316e22fbd1420a2302fcf8bd6d3b6c2">00130</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&#32;<link linkend="_classemth_1_1Monomial_1a8316e22fbd1420a2302fcf8bd6d3b6c2">emth::Monomial::operator %</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;%=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00136"/><link linkend="_classemth_1_1Monomial_1a7cac7880021c7cf783daa15ee00b94d1">00136</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;<link linkend="_classemth_1_1Monomial_1a7cac7880021c7cf783daa15ee00b94d1">emth::Monomial::operator +=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((this-&gt;degree&#32;==&#32;ogn.degree)&#32;||&#32;this-&gt;coeff&#32;==&#32;0)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;coeff&#32;==&#32;0)&#32;{this-&gt;degree&#32;=&#32;ogn.degree;}
<anchor xml:id="_src_2emath_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;coeff&#32;+=&#32;ogn.coeff;
<anchor xml:id="_src_2emath_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00142"/>00142 }
<anchor xml:id="_src_2emath_8cpp_source_1l00148"/><link linkend="_classemth_1_1Monomial_1a45a932afba1f1f38c5ca16b6c16fd3c8">00148</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;<link linkend="_classemth_1_1Monomial_1a45a932afba1f1f38c5ca16b6c16fd3c8">emth::Monomial::operator -=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((this-&gt;degree&#32;==&#32;ogn.degree)&#32;||&#32;this-&gt;coeff&#32;==&#32;0)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;coeff&#32;==&#32;0)&#32;{this-&gt;degree&#32;=&#32;ogn.degree;}
<anchor xml:id="_src_2emath_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;coeff&#32;-=&#32;ogn.coeff;
<anchor xml:id="_src_2emath_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00154"/>00154 }
<anchor xml:id="_src_2emath_8cpp_source_1l00160"/><link linkend="_classemth_1_1Monomial_1a59e6ec6722fe75349e84c6c3397279f5">00160</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;<link linkend="_classemth_1_1Monomial_1a59e6ec6722fe75349e84c6c3397279f5">emth::Monomial::operator *=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;this-&gt;coeff&#32;*=&#32;ogn.coeff;
<anchor xml:id="_src_2emath_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;this-&gt;degree&#32;+=&#32;ogn.degree;
<anchor xml:id="_src_2emath_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00164"/>00164 }
<anchor xml:id="_src_2emath_8cpp_source_1l00170"/><link linkend="_classemth_1_1Monomial_1a1bdb99f916437cd3a7c127b71bec5787">00170</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;<link linkend="_classemth_1_1Monomial_1a1bdb99f916437cd3a7c127b71bec5787">emth::Monomial::operator /=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ogn.coeff&#32;!=&#32;0)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;coeff&#32;/=&#32;ogn.coeff;
<anchor xml:id="_src_2emath_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;degree&#32;-=&#32;ogn.degree;
<anchor xml:id="_src_2emath_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00176"/>00176 }
<anchor xml:id="_src_2emath_8cpp_source_1l00182"/><link linkend="_classemth_1_1Monomial_1ab4c89014e13b2f35f264492486a935fe">00182</link> <link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;<link linkend="_classemth_1_1Monomial_1ab4c89014e13b2f35f264492486a935fe">emth::Monomial::operator %=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ogn.coeff&#32;!=&#32;0)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;coeff&#32;=&#32;std::fmod(this-&gt;coeff,&#32;ogn.coeff);
<anchor xml:id="_src_2emath_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;degree&#32;-=&#32;ogn.degree;
<anchor xml:id="_src_2emath_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00188"/>00188 }
<anchor xml:id="_src_2emath_8cpp_source_1l00195"/>00195 std::stringstream&amp;&#32;emth::operator&lt;&lt;(std::stringstream&amp;&#32;ss,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;m)&#32;{ss&#32;&lt;&lt;&#32;m.coeff&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;x^&quot;</emphasis>&#32;&lt;&lt;&#32;m.degree;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ss;}
<anchor xml:id="_src_2emath_8cpp_source_1l00202"/>00202 std::ostream&amp;&#32;emth::operator&lt;&lt;(std::ostream&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;m)&#32;{out&#32;&lt;&lt;&#32;m.coeff&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;x^&quot;</emphasis>&#32;&lt;&lt;&#32;m.degree;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;}
<anchor xml:id="_src_2emath_8cpp_source_1l00207"/><link linkend="_classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124">00207</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124">emth::Monomial::get_coeff</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;coeff;}
<anchor xml:id="_src_2emath_8cpp_source_1l00212"/><link linkend="_classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0">00212</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0">emth::Monomial::get_degree</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;degree;}
<anchor xml:id="_src_2emath_8cpp_source_1l00217"/><link linkend="_classemth_1_1Monomial_1adae9aaac815a7c86ec651e5bdb3d3043">00217</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1adae9aaac815a7c86ec651e5bdb3d3043">emth::Monomial::set_coeff</link>(<emphasis role="keywordtype">double</emphasis>&#32;cf)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;coeff&#32;=&#32;cf;&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_src_2emath_8cpp_source_1l00222"/><link linkend="_classemth_1_1Monomial_1ab695cba07bcbf08cfec7d32e0bf4cc20">00222</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1ab695cba07bcbf08cfec7d32e0bf4cc20">emth::Monomial::set_degree</link>(<emphasis role="keywordtype">int</emphasis>&#32;dgr)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;degree&#32;=&#32;dgr;&#32;<emphasis role="keywordflow">return</emphasis>;}
<anchor xml:id="_src_2emath_8cpp_source_1l00227"/><link linkend="_classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996">00227</link> std::string&#32;<link linkend="_classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996">emth::Monomial::get_expression</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(std::stringstream()&#32;&lt;&lt;&#32;*<emphasis role="keyword">this</emphasis>).str();}
<anchor xml:id="_src_2emath_8cpp_source_1l00233"/><link linkend="_classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157">00233</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157">emth::Monomial::get_value</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;coeff&#32;*&#32;std::pow(x,&#32;this-&gt;degree));};
<anchor xml:id="_src_2emath_8cpp_source_1l00238"/>00238 <emphasis role="keywordtype">void</emphasis>&#32;emth::Monomial::swap(<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;std::swap(this-&gt;coeff,&#32;ogn.coeff);
<anchor xml:id="_src_2emath_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;std::swap(this-&gt;degree,&#32;ogn.degree);
<anchor xml:id="_src_2emath_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00242"/>00242 }
<anchor xml:id="_src_2emath_8cpp_source_1l00246"/>00246 <link linkend="_classemth_1_1Monomial_1aecedb04edd52a33ba0ee110eedbd74db">emth::Monomial::~Monomial</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00250"/><link linkend="_classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206">00250</link> <link linkend="_classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206">emth::Polynomial::Polynomial</link>()&#32;noexcept&#32;{this-&gt;monomials[0]&#32;=&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>(0,&#32;0);}
<anchor xml:id="_src_2emath_8cpp_source_1l00255"/>00255 <link linkend="_classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206">emth::Polynomial::Polynomial</link>(<emphasis role="keyword">const</emphasis>&#32;std::map&lt;int,&#32;emth::Monomial&gt;&#32;mns)&#32;noexcept&#32;:&#32;monomials(mns)&#32;{}
<anchor xml:id="_src_2emath_8cpp_source_1l00260"/>00260 <link linkend="_classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206">emth::Polynomial::Polynomial</link>(<emphasis role="keyword">const</emphasis>&#32;std::initializer_list&lt;emth::Monomial&gt;&#32;mns)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;mn:&#32;mns)&#32;{this-&gt;monomials.emplace(mn.get_degree(),&#32;mn);}}
<anchor xml:id="_src_2emath_8cpp_source_1l00265"/>00265 <link linkend="_classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206">emth::Polynomial::Polynomial</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;emth::Monomial&gt;&#32;mns)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;mn:&#32;mns)&#32;{this-&gt;monomials.emplace(mn.get_degree(),&#32;mn);}}
<anchor xml:id="_src_2emath_8cpp_source_1l00270"/><link linkend="_classemth_1_1Polynomial_1a3612ca54a3bef015a9809d77af2be355">00270</link> <link linkend="_classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206">emth::Polynomial::Polynomial</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;noexcept&#32;:&#32;monomials(ogn.monomials)&#32;{}&#32;
<anchor xml:id="_src_2emath_8cpp_source_1l00275"/><link linkend="_classemth_1_1Polynomial_1a3f55b493797c89e9079c7019fb905059">00275</link> <link linkend="_classemth_1_1Polynomial_1a7a6489fae8e62f7171ba1b094253f206">emth::Polynomial::Polynomial</link>(<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&amp;&#32;ogn)&#32;noexcept&#32;:&#32;monomials(std::move(ogn.monomials))&#32;{}
<anchor xml:id="_src_2emath_8cpp_source_1l00281"/><link linkend="_classemth_1_1Polynomial_1a33ba807b5465ead26edd077d8289f4f3">00281</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;<link linkend="_classemth_1_1Polynomial_1a33ba807b5465ead26edd077d8289f4f3">emth::Polynomial::operator =</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;copy(ogn);&#32;this-&gt;swap(copy);&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;}
<anchor xml:id="_src_2emath_8cpp_source_1l00287"/><link linkend="_classemth_1_1Polynomial_1a93818b33532e3f8e80fa614ca8287479">00287</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;<link linkend="_classemth_1_1Polynomial_1a33ba807b5465ead26edd077d8289f4f3">emth::Polynomial::operator =</link>(<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;swap(ogn);&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;}
<anchor xml:id="_src_2emath_8cpp_source_1l00294"/><link linkend="_classemth_1_1Polynomial_1ad042381e1713be21b332d3f8fbdfd0a7">00294</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1ad042381e1713be21b332d3f8fbdfd0a7">emth::Polynomial::operator ==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((this-&gt;get_degree()&#32;==&#32;ogn.get_degree())&#32;&amp;&amp;&#32;(this-&gt;monomials&#32;==&#32;ogn.monomials));}
<anchor xml:id="_src_2emath_8cpp_source_1l00301"/><link linkend="_classemth_1_1Polynomial_1a40fefffeb0043d193d5aa7ecb3adba55">00301</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1a40fefffeb0043d193d5aa7ecb3adba55">emth::Polynomial::operator !=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;ogn));}
<anchor xml:id="_src_2emath_8cpp_source_1l00308"/><link linkend="_classemth_1_1Polynomial_1ae358f6f9b93783601af6999b67e0dafb">00308</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1ae358f6f9b93783601af6999b67e0dafb">emth::Polynomial::operator &gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;get_degree()&#32;&gt;&#32;ogn.get_degree());};
<anchor xml:id="_src_2emath_8cpp_source_1l00315"/><link linkend="_classemth_1_1Polynomial_1a0f0640fcb0dd0a59b685a646d494bfc7">00315</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1a0f0640fcb0dd0a59b685a646d494bfc7">emth::Polynomial::operator &lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;get_degree()&#32;&lt;&#32;ogn.get_degree());};
<anchor xml:id="_src_2emath_8cpp_source_1l00322"/><link linkend="_classemth_1_1Polynomial_1a2321b93b1482b6677dbd125739848724">00322</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1a2321b93b1482b6677dbd125739848724">emth::Polynomial::operator &gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;get_degree()&#32;&gt;=&#32;ogn.get_degree());};
<anchor xml:id="_src_2emath_8cpp_source_1l00329"/><link linkend="_classemth_1_1Polynomial_1a7b234cebd032016c0a8ece92a4f68141">00329</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1a7b234cebd032016c0a8ece92a4f68141">emth::Polynomial::operator &lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(this-&gt;get_degree()&#32;&lt;=&#32;ogn.get_degree());};
<anchor xml:id="_src_2emath_8cpp_source_1l00335"/><link linkend="_classemth_1_1Polynomial_1a9d46082ad38edc17f875127208626281">00335</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;<link linkend="_classemth_1_1Polynomial_1a9d46082ad38edc17f875127208626281">emth::Polynomial::operator +</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;+=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00341"/><link linkend="_classemth_1_1Polynomial_1a1cd22ae48bfcb14b53835730091e5f4d">00341</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;<link linkend="_classemth_1_1Polynomial_1a1cd22ae48bfcb14b53835730091e5f4d">emth::Polynomial::operator -</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;-=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00347"/><link linkend="_classemth_1_1Polynomial_1ac461b9aeb93c33d540f0a918bdefd203">00347</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;<link linkend="_classemth_1_1Polynomial_1ac461b9aeb93c33d540f0a918bdefd203">emth::Polynomial::operator *</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;*=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00353"/><link linkend="_classemth_1_1Polynomial_1aa2a054dcc203257bfc3d06621ce876b1">00353</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;<link linkend="_classemth_1_1Polynomial_1aa2a054dcc203257bfc3d06621ce876b1">emth::Polynomial::operator /</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;/=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00359"/><link linkend="_classemth_1_1Polynomial_1a56a499385ad24715b1240611217277c5">00359</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;<link linkend="_classemth_1_1Polynomial_1a56a499385ad24715b1240611217277c5">emth::Polynomial::operator %</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>(*<emphasis role="keyword">this</emphasis>)&#32;%=&#32;ogn;}
<anchor xml:id="_src_2emath_8cpp_source_1l00365"/><link linkend="_classemth_1_1Polynomial_1a791a5aa2207acd2fccc4124ff36eb0bf">00365</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;<link linkend="_classemth_1_1Polynomial_1a791a5aa2207acd2fccc4124ff36eb0bf">emth::Polynomial::operator +=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const&#32;int,&#32;emth::Monomial&gt;&amp;&#32;kv&#32;:&#32;ogn.monomials)&#32;{this-&gt;monomials[kv.first]&#32;+=&#32;kv.second;}
<anchor xml:id="_src_2emath_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;redux();
<anchor xml:id="_src_2emath_8cpp_source_1l00368"/>00368 }
<anchor xml:id="_src_2emath_8cpp_source_1l00374"/><link linkend="_classemth_1_1Polynomial_1af545354b4dade3e286be26207d02a442">00374</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;<link linkend="_classemth_1_1Polynomial_1af545354b4dade3e286be26207d02a442">emth::Polynomial::operator -=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00375"/>00375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const&#32;int,&#32;emth::Monomial&gt;&amp;&#32;kv&#32;:&#32;ogn.monomials)&#32;{this-&gt;monomials[kv.first]&#32;-=&#32;kv.second;}
<anchor xml:id="_src_2emath_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;redux();
<anchor xml:id="_src_2emath_8cpp_source_1l00377"/>00377 }
<anchor xml:id="_src_2emath_8cpp_source_1l00383"/><link linkend="_classemth_1_1Polynomial_1abdeb3769c43eec881ae8ed1a20a5d01d">00383</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;<link linkend="_classemth_1_1Polynomial_1abdeb3769c43eec881ae8ed1a20a5d01d">emth::Polynomial::operator *=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00384"/>00384 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;emth::Monomial&gt;&#32;rs;
<anchor xml:id="_src_2emath_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const&#32;int,&#32;emth::Monomial&gt;&amp;&#32;kv&#32;:&#32;this-&gt;monomials)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const&#32;int,&#32;emth::Monomial&gt;&amp;&#32;kkvv&#32;:&#32;ogn.monomials)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rs[kv.first&#32;+&#32;kkvv.first]&#32;+=&#32;kv.second&#32;*&#32;kkvv.second;
<anchor xml:id="_src_2emath_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00389"/>00389 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;this-&gt;monomials&#32;=&#32;std::move(rs);
<anchor xml:id="_src_2emath_8cpp_source_1l00391"/>00391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;redux();
<anchor xml:id="_src_2emath_8cpp_source_1l00392"/>00392 }
<anchor xml:id="_src_2emath_8cpp_source_1l00398"/><link linkend="_classemth_1_1Polynomial_1ac5a003db2381c99c97c4a78341145b26">00398</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;<link linkend="_classemth_1_1Polynomial_1ac5a003db2381c99c97c4a78341145b26">emth::Polynomial::operator /=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ogn.monomials.empty())&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;quotient;
<anchor xml:id="_src_2emath_8cpp_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!this-&gt;monomials.empty()&#32;&amp;&amp;&#32;this-&gt;monomials.crbegin()-&gt;second.get_degree()&#32;&gt;=&#32;ogn.monomials.crbegin()-&gt;second.get_degree())&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&#32;mon&#32;=&#32;this-&gt;monomials.crbegin()-&gt;second&#32;/&#32;ogn.monomials.crbegin()-&gt;second;
<anchor xml:id="_src_2emath_8cpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quotient.monomials[mon.<link linkend="_classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0">get_degree</link>()]&#32;=&#32;mon;
<anchor xml:id="_src_2emath_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;-=&#32;(ogn&#32;*&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>({mon}));
<anchor xml:id="_src_2emath_8cpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;monomials&#32;=&#32;quotient.monomials;
<anchor xml:id="_src_2emath_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;redux();
<anchor xml:id="_src_2emath_8cpp_source_1l00409"/>00409 }
<anchor xml:id="_src_2emath_8cpp_source_1l00415"/><link linkend="_classemth_1_1Polynomial_1a2e6bd9b16b732b38caabf950acfd5cb2">00415</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;<link linkend="_classemth_1_1Polynomial_1a2e6bd9b16b732b38caabf950acfd5cb2">emth::Polynomial::operator %=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00416"/>00416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ogn.monomials.empty())&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!this-&gt;monomials.empty()&#32;&amp;&amp;&#32;this-&gt;monomials.crbegin()-&gt;second.get_degree()&#32;&gt;=&#32;ogn.monomials.crbegin()-&gt;second.get_degree())&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&#32;mon&#32;=&#32;this-&gt;monomials.crbegin()-&gt;second&#32;/&#32;ogn.monomials.crbegin()-&gt;second;
<anchor xml:id="_src_2emath_8cpp_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;-=&#32;(ogn&#32;*&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>({mon}));
<anchor xml:id="_src_2emath_8cpp_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00421"/>00421 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00422"/>00422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;redux();
<anchor xml:id="_src_2emath_8cpp_source_1l00423"/>00423 }
<anchor xml:id="_src_2emath_8cpp_source_1l00430"/>00430 std::stringstream&amp;&#32;emth::operator&lt;&lt;(std::stringstream&amp;&#32;ss,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;p)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00431"/>00431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::reverse_iterator&lt;std::map&lt;const&#32;int,&#32;emth::Monomial&gt;::const_iterator&gt;&#32;it&#32;=&#32;p.monomials.crbegin();&#32;it&#32;!=&#32;p.monomials.crend();&#32;it++)&#32;{ss&#32;&lt;&lt;&#32;it-&gt;second&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;}
<anchor xml:id="_src_2emath_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ss;
<anchor xml:id="_src_2emath_8cpp_source_1l00433"/>00433 }
<anchor xml:id="_src_2emath_8cpp_source_1l00440"/>00440 std::ostream&amp;&#32;emth::operator&lt;&lt;(std::ostream&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;p)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00441"/>00441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::reverse_iterator&lt;std::map&lt;const&#32;int,&#32;emth::Monomial&gt;::const_iterator&gt;&#32;it&#32;=&#32;p.monomials.crbegin();&#32;it&#32;!=&#32;p.monomials.crend();&#32;it++)&#32;{out&#32;&lt;&lt;&#32;it-&gt;second&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>;}
<anchor xml:id="_src_2emath_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
<anchor xml:id="_src_2emath_8cpp_source_1l00443"/>00443 }
<anchor xml:id="_src_2emath_8cpp_source_1l00448"/><link linkend="_classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963">00448</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963">emth::Polynomial::get_degree</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;monomials.crbegin()-&gt;first;}
<anchor xml:id="_src_2emath_8cpp_source_1l00453"/><link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">00453</link> std::map&lt;int,&#32;emth::Monomial&gt;&#32;<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">emth::Polynomial::get_monomials</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;monomials;}
<anchor xml:id="_src_2emath_8cpp_source_1l00459"/><link linkend="_classemth_1_1Polynomial_1a1dc4825c3d5005949f0869e204e4fedc">00459</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1a1dc4825c3d5005949f0869e204e4fedc">emth::Polynomial::push_monomial</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&#32;m)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{this-&gt;push_monomial(<link linkend="_classemth_1_1Monomial">emth::Monomial</link>(m));};
<anchor xml:id="_src_2emath_8cpp_source_1l00465"/><link linkend="_classemth_1_1Polynomial_1acd1befa11dd8d4e3da213114dc88cff7">00465</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1a1dc4825c3d5005949f0869e204e4fedc">emth::Polynomial::push_monomial</link>(<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&amp;&amp;&#32;m)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00466"/>00466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m.get_coeff()&#32;==&#32;0)&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;}
<anchor xml:id="_src_2emath_8cpp_source_1l00467"/>00467 &#32;&#32;&#32;&#32;this-&gt;monomials[m.get_degree()]&#32;+=&#32;m;
<anchor xml:id="_src_2emath_8cpp_source_1l00468"/>00468 &#32;&#32;&#32;&#32;this-&gt;redux();
<anchor xml:id="_src_2emath_8cpp_source_1l00469"/>00469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00470"/>00470 };
<anchor xml:id="_src_2emath_8cpp_source_1l00475"/><link linkend="_classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b">00475</link> std::string&#32;<link linkend="_classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b">emth::Polynomial::get_expression</link>()&#32;const&#32;noexcept&#32;{<emphasis role="keywordflow">return</emphasis>&#32;(std::stringstream()&#32;&lt;&lt;&#32;*<emphasis role="keyword">this</emphasis>).str();}
<anchor xml:id="_src_2emath_8cpp_source_1l00481"/><link linkend="_classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3">00481</link> <emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3">emth::Polynomial::get_value</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00482"/>00482 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;y&#32;=&#32;0;
<anchor xml:id="_src_2emath_8cpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const&#32;int,&#32;emth::Monomial&gt;&amp;&#32;kv:&#32;this-&gt;monomials)&#32;{y&#32;+=&#32;kv.second.get_value(x);}
<anchor xml:id="_src_2emath_8cpp_source_1l00484"/>00484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y;
<anchor xml:id="_src_2emath_8cpp_source_1l00485"/>00485 };
<anchor xml:id="_src_2emath_8cpp_source_1l00490"/><link linkend="_classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37">00490</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;<link linkend="_classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37">emth::Polynomial::get_derivative</link>()&#32;const&#32;noexcept&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;emth::Monomial&gt;&#32;fdx;
<anchor xml:id="_src_2emath_8cpp_source_1l00492"/>00492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const&#32;int,&#32;emth::Monomial&gt;&amp;&#32;kv:&#32;this-&gt;monomials)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(kv.second.get_degree()&#32;!=&#32;0)&#32;{fdx[kv.second.get_degree()&#32;-&#32;1]&#32;=&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>(kv.second.get_coeff()&#32;*&#32;kv.second.get_degree(),&#32;kv.second.get_degree()&#32;-&#32;1);}
<anchor xml:id="_src_2emath_8cpp_source_1l00494"/>00494 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00495"/>00495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>(std::move(fdx)).redux();
<anchor xml:id="_src_2emath_8cpp_source_1l00496"/>00496 };
<anchor xml:id="_src_2emath_8cpp_source_1l00501"/><link linkend="_classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d">00501</link> <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;<link linkend="_classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d">emth::Polynomial::get_integral</link>()&#32;const&#32;noexcept&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00502"/>00502 &#32;&#32;&#32;&#32;std::map&lt;int,&#32;emth::Monomial&gt;&#32;sdx;
<anchor xml:id="_src_2emath_8cpp_source_1l00503"/>00503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const&#32;int,&#32;emth::Monomial&gt;&amp;&#32;kv:&#32;this-&gt;monomials)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sdx[kv.second.get_degree()&#32;+&#32;1]&#32;=&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>(kv.second.get_coeff()&#32;/&#32;(kv.second.get_degree()&#32;+&#32;1),&#32;kv.second.get_degree()&#32;+&#32;1);
<anchor xml:id="_src_2emath_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00506"/>00506 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>(std::move(sdx)).redux();
<anchor xml:id="_src_2emath_8cpp_source_1l00507"/>00507 };
<anchor xml:id="_src_2emath_8cpp_source_1l00512"/>00512 <emphasis role="keywordtype">void</emphasis>&#32;emth::Polynomial::swap(<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00513"/>00513 &#32;&#32;&#32;&#32;std::swap(this-&gt;monomials,&#32;ogn.monomials);
<anchor xml:id="_src_2emath_8cpp_source_1l00514"/>00514 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00515"/>00515 }
<anchor xml:id="_src_2emath_8cpp_source_1l00519"/>00519 <link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&amp;&#32;emth::Polynomial::redux()&#32;noexcept&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;ks;
<anchor xml:id="_src_2emath_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const&#32;int,&#32;emth::Monomial&gt;&amp;&#32;kv:&#32;this-&gt;monomials)&#32;{
<anchor xml:id="_src_2emath_8cpp_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(kv.second.get_coeff()&#32;==&#32;0)&#32;{ks.push_back(kv.first);}
<anchor xml:id="_src_2emath_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;}
<anchor xml:id="_src_2emath_8cpp_source_1l00524"/>00524 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&amp;&#32;k:&#32;ks)&#32;{this-&gt;monomials.erase(k);}
<anchor xml:id="_src_2emath_8cpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_src_2emath_8cpp_source_1l00526"/>00526 }
<anchor xml:id="_src_2emath_8cpp_source_1l00530"/>00530 <link linkend="_classemth_1_1Polynomial_1a056e1df4102b0d0add0e8e2805401b82">emth::Polynomial::~Polynomial</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
</programlisting></section>
