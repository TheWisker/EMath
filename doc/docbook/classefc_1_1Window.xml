<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classefc_1_1Window" xml:lang="en-US">
<title>efc::Window Class Reference</title>
<indexterm><primary>efc::Window</primary></indexterm>
<para>

<para>Generic class for wrapping a curses WINDOW. </para>
 
</para>
Inheritance diagram for efc::Window:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classefc_1_1Window__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classefc_1_1Window_1ae5fb6b6600ebc4b528d664e8c6947ab2">Window</link> () noexcept</para>

<para>Generic constructor with default values. </para>
</listitem>
            <listitem><para>const char * <link linkend="_classefc_1_1Window_1a933c7e9e67d7423b1facb73a26a9fba3">get_title</link> () const noexcept</para>

<para>Returns the c_str() const char pointer of the title std::string. </para>
</listitem>
            <listitem><para>const unsigned int &amp; <link linkend="_classefc_1_1Window_1a433fbcc875c6e134a8c273c46525bca2">get_y</link> () const noexcept</para>

<para>Returns the y coordinate. </para>
</listitem>
            <listitem><para>const unsigned int &amp; <link linkend="_classefc_1_1Window_1a1920c8ff02f120a08252797280a3a2aa">get_x</link> () const noexcept</para>

<para>Returns the x coordinate. </para>
</listitem>
            <listitem><para>const unsigned int &amp; <link linkend="_classefc_1_1Window_1a0f64ddda75fb64027eaa7b7dd767ec4e">get_height</link> () const noexcept</para>

<para>Returns the height value. </para>
</listitem>
            <listitem><para>const unsigned int &amp; <link linkend="_classefc_1_1Window_1a58e0eb74a3b1b20a268dae29d4525dad">get_width</link> () const noexcept</para>

<para>Returns the width value. </para>
</listitem>
            <listitem><para>const unsigned int <link linkend="_classefc_1_1Window_1aad12ba19cc558f386a4f2f9e7b6f1acc">get_title_size</link> () const noexcept</para>

<para>Returns the title size. </para>
</listitem>
            <listitem><para>void <link linkend="_classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5">set_title</link> (const ::std::string &amp;&amp;title) noexcept</para>

<para>Sets the title. </para>
</listitem>
            <listitem><para>void <link linkend="_classefc_1_1Window_1adb89ea880c531bb3e611378ec1f10f5f">set_coords</link> (const unsigned int <link linkend="_classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0">y</link>, const unsigned int x) noexcept</para>

<para>Sets the y and x coordinates. </para>
</listitem>
            <listitem><para>void <link linkend="_classefc_1_1Window_1ad9f8b6f349dfe11addce9781a4e32ffb">set_size</link> (const unsigned int h, const unsigned int w) noexcept</para>

<para>Sets the size. </para>
</listitem>
            <listitem><para>void <link linkend="_classefc_1_1Window_1a18c9f4d362aa8ae7cd322e038828e4de">set_active</link> (const bool active) noexcept</para>

<para>Sets the active boolean to the provided value. </para>
</listitem>
            <listitem><para>virtual const unsigned int <link linkend="_classefc_1_1Window_1a910926d607d7ac88e4d5e6640a52836a">get_title_y</link> () const noexcept</para>

<para>Gets the title y coordinate. </para>
</listitem>
            <listitem><para>virtual const unsigned int <link linkend="_classefc_1_1Window_1a2e177d9c72e6f7fcf29371df5bc08bea">get_title_x</link> () const noexcept</para>

<para>Gets the title x coordinate. </para>
</listitem>
            <listitem><para>const bool <link linkend="_classefc_1_1Window_1a2f46320775d22ce67fdbacf50772fd02">needs_update</link> () noexcept</para>

<para>Gets if the window needs a redraw. </para>
</listitem>
            <listitem><para>const bool <link linkend="_classefc_1_1Window_1a64f20e7199e6a9e85c1db282cd820ad6">is_active</link> () const noexcept</para>

<para>Gets if the window is active/focused. </para>
</listitem>
            <listitem><para>void <link linkend="_classefc_1_1Window_1a2feeecd90c7c634a15c4e84a3921ee14">place</link> ()</para>

<para>Deletes the WINDOW pointer and creates a new WINDOW at the class coordinates. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classefc_1_1Window_1ac8ec94fb12450e4fc37ea2adc30f81f8">~Window</link> () noexcept</para>

<para>Calls curses delwin() function on the curses WINDOW object and returns. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>WINDOW * <link linkend="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824">o</link></para>

<para>Pointer to the curses WINDOW object. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9">c</link></para>

<para>Two booleans: c for knowing if contents changed, and a for knowing if window is active. </para>
</listitem>
            <listitem><para>bool <link linkend="_classefc_1_1Window_1aea9ca4761c6305661f459b77f9e95f87">a</link></para>
</listitem>
            <listitem><para>::std::string <link linkend="_classefc_1_1Window_1a7dc5e87a2ff69618b81041809b052e70">t</link></para>

<para>String t: window title. </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0">y</link></para>

<para>Four unsigned ints: x and y for the coordinates relative to the console window, w and h for the size of the window. </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_classefc_1_1Window_1a07e3095c7f4d7320c008d5fd67692b61">x</link></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_classefc_1_1Window_1a282f9857345806e5232bbbb0bc88c60c">h</link></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_classefc_1_1Window_1ac189a55138f75bc910051d1598957018">w</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Generic class for wrapping a curses WINDOW. </para>



<para>It wraps a curses WINDOW in a way that lets it manage some centralized structure. </para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00059">59</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classefc_1_1Window_1ae5fb6b6600ebc4b528d664e8c6947ab2"/><section>
    <title>Window()</title>
<indexterm><primary>Window</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>Window</secondary></indexterm>
<para><computeroutput>efc::Window::Window ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Generic constructor with default values. </para>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00081">81</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1ac8ec94fb12450e4fc37ea2adc30f81f8"/><section>
    <title>~Window()</title>
<indexterm><primary>~Window</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>~Window</secondary></indexterm>
<para><computeroutput>virtual efc::Window::~Window ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Calls curses delwin() function on the curses WINDOW object and returns. </para>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00161">161</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classefc_1_1Window_1a0f64ddda75fb64027eaa7b7dd767ec4e"/><section>
    <title>get_height()</title>
<indexterm><primary>get_height</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>get_height</secondary></indexterm>
<para><computeroutput>const unsigned int &amp; efc::Window::get_height ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the height value. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const unsigned int&amp;) The height value as a const unsigned int&amp; </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00101">101</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a933c7e9e67d7423b1facb73a26a9fba3"/><section>
    <title>get_title()</title>
<indexterm><primary>get_title</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>get_title</secondary></indexterm>
<para><computeroutput>const char * efc::Window::get_title ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the c_str() const char pointer of the title std::string. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const char*) The title as a char array </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00086">86</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1aad12ba19cc558f386a4f2f9e7b6f1acc"/><section>
    <title>get_title_size()</title>
<indexterm><primary>get_title_size</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>get_title_size</secondary></indexterm>
<para><computeroutput>const unsigned int efc::Window::get_title_size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the title size. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const unsigned int) The title size as a const unsigned int </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00111">111</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a2e177d9c72e6f7fcf29371df5bc08bea"/><section>
    <title>get_title_x()</title>
<indexterm><primary>get_title_x</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>get_title_x</secondary></indexterm>
<para><computeroutput>virtual const unsigned int efc::Window::get_title_x ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets the title x coordinate. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const unsigned int) The title x coordinate as a const unsigned int </para>
</formalpara>
</para>
<para>
Reimplemented in <link linkend="_classefc_1_1OWindow_1aa0224c53de48b27b7bc791f3ff1fe9fc">efc::OWindow</link>, and <link linkend="_classefc_1_1IWindow_1a91e48b892bd02b7c11020fdfc7e7c05d">efc::IWindow</link>.</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00143">143</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a910926d607d7ac88e4d5e6640a52836a"/><section>
    <title>get_title_y()</title>
<indexterm><primary>get_title_y</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>get_title_y</secondary></indexterm>
<para><computeroutput>virtual const unsigned int efc::Window::get_title_y ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets the title y coordinate. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const unsigned int) The title y coordinate as a const unsigned int </para>
</formalpara>
</para>
<para>
Reimplemented in <link linkend="_classefc_1_1OWindow_1a6fa50bf6b31b39e3c9c2a14cedd70aac">efc::OWindow</link>, and <link linkend="_classefc_1_1IWindow_1a84cb0d425e279cd2b15dc2b43cb520d2">efc::IWindow</link>.</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00138">138</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a58e0eb74a3b1b20a268dae29d4525dad"/><section>
    <title>get_width()</title>
<indexterm><primary>get_width</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>get_width</secondary></indexterm>
<para><computeroutput>const unsigned int &amp; efc::Window::get_width ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the width value. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const unsigned int&amp;) The width value as a const unsigned int&amp; </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00106">106</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a1920c8ff02f120a08252797280a3a2aa"/><section>
    <title>get_x()</title>
<indexterm><primary>get_x</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>get_x</secondary></indexterm>
<para><computeroutput>const unsigned int &amp; efc::Window::get_x ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the x coordinate. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const unsigned int&amp;) The x coordinate as a const unsigned int&amp; </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00096">96</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a433fbcc875c6e134a8c273c46525bca2"/><section>
    <title>get_y()</title>
<indexterm><primary>get_y</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>get_y</secondary></indexterm>
<para><computeroutput>const unsigned int &amp; efc::Window::get_y ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the y coordinate. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const unsigned int&amp;) The y coordinate as a const unsigned int&amp; </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00091">91</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
<para>
References <link linkend="_interface_8cpp_source_1l00072">y</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a64f20e7199e6a9e85c1db282cd820ad6"/><section>
    <title>is_active()</title>
<indexterm><primary>is_active</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>is_active</secondary></indexterm>
<para><computeroutput>const bool efc::Window::is_active ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets if the window is active/focused. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const bool) True if the window is active, false otherwise </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00153">153</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a2f46320775d22ce67fdbacf50772fd02"/><section>
    <title>needs_update()</title>
<indexterm><primary>needs_update</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>needs_update</secondary></indexterm>
<para><computeroutput>const bool efc::Window::needs_update ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets if the window needs a redraw. </para>
</para>

<para><formalpara><title>Returns</title>

<para>(const bool) True if the window should be redrawed, false otherwise </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00148">148</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a2feeecd90c7c634a15c4e84a3921ee14"/><section>
    <title>place()</title>
<indexterm><primary>place</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>place</secondary></indexterm>
<para><computeroutput>void efc::Window::place ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Deletes the WINDOW pointer and creates a new WINDOW at the class coordinates. </para>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00157">157</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a18c9f4d362aa8ae7cd322e038828e4de"/><section>
    <title>set_active()</title>
<indexterm><primary>set_active</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>set_active</secondary></indexterm>
<para><computeroutput>void efc::Window::set_active (const bool active)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Sets the active boolean to the provided value. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>active</entry><entry>
<para>If it is a active as a const boolean </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00133">133</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1adb89ea880c531bb3e611378ec1f10f5f"/><section>
    <title>set_coords()</title>
<indexterm><primary>set_coords</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>set_coords</secondary></indexterm>
<para><computeroutput>void efc::Window::set_coords (const unsigned int y, const unsigned int x)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Sets the y and x coordinates. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>y</entry><entry>
<para>The y coordinate as a const unsigned int y </para>
</entry>
                            </row>
                            <row>
<entry>x</entry><entry>
<para>The x coordinate as a const unsigned int x </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00122">122</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
<para>
References <link linkend="_interface_8cpp_source_1l00072">y</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1ad9f8b6f349dfe11addce9781a4e32ffb"/><section>
    <title>set_size()</title>
<indexterm><primary>set_size</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>set_size</secondary></indexterm>
<para><computeroutput>void efc::Window::set_size (const unsigned int h, const unsigned int w)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Sets the size. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>h</entry><entry>
<para>The height as a const unsigned int y </para>
</entry>
                            </row>
                            <row>
<entry>w</entry><entry>
<para>The width as a const unsigned int x </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00128">128</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1aead8ed85b65db6a0b0c27d34903b8db5"/><section>
    <title>set_title()</title>
<indexterm><primary>set_title</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>set_title</secondary></indexterm>
<para><computeroutput>void efc::Window::set_title (const ::std::string &amp;&amp; title)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Sets the title. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>title</entry><entry>
<para>The title as a cons std::string&amp;&amp; </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00116">116</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classefc_1_1Window_1aea9ca4761c6305661f459b77f9e95f87"/><section>
    <title>a</title>
<indexterm><primary>a</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>a</secondary></indexterm>
<para><computeroutput>bool efc::Window::a<computeroutput>[protected]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_interface_8cpp_source_1l00064">64</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1add171873b1a7a5c5e1263e8b3a61b6f9"/><section>
    <title>c</title>
<indexterm><primary>c</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>c</secondary></indexterm>
<para><computeroutput>bool efc::Window::c<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Two booleans: c for knowing if contents changed, and a for knowing if window is active. </para>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00064">64</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a282f9857345806e5232bbbb0bc88c60c"/><section>
    <title>h</title>
<indexterm><primary>h</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>h</secondary></indexterm>
<para><computeroutput>unsigned int efc::Window::h<computeroutput>[protected]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_interface_8cpp_source_1l00072">72</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1ab18720ed62461884b759594ed60fb824"/><section>
    <title>o</title>
<indexterm><primary>o</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>o</secondary></indexterm>
<para><computeroutput>WINDOW* efc::Window::o</computeroutput></para><para>

<para>Pointer to the curses WINDOW object. </para>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00077">77</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a7dc5e87a2ff69618b81041809b052e70"/><section>
    <title>t</title>
<indexterm><primary>t</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>t</secondary></indexterm>
<para><computeroutput>::std::string efc::Window::t<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>String t: window title. </para>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00068">68</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1ac189a55138f75bc910051d1598957018"/><section>
    <title>w</title>
<indexterm><primary>w</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>w</secondary></indexterm>
<para><computeroutput>unsigned int efc::Window::w<computeroutput>[protected]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_interface_8cpp_source_1l00072">72</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a07e3095c7f4d7320c008d5fd67692b61"/><section>
    <title>x</title>
<indexterm><primary>x</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>x</secondary></indexterm>
<para><computeroutput>unsigned int efc::Window::x<computeroutput>[protected]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="_interface_8cpp_source_1l00072">72</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<anchor xml:id="_classefc_1_1Window_1a560218b58e4b8e0a87d17d9d51c75ee0"/><section>
    <title>y</title>
<indexterm><primary>y</primary><secondary>efc::Window</secondary></indexterm>
<indexterm><primary>efc::Window</primary><secondary>y</secondary></indexterm>
<para><computeroutput>unsigned int efc::Window::y<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Four unsigned ints: x and y for the coordinates relative to the console window, w and h for the size of the window. </para>
</para>
<para>
Definition at line <link linkend="_interface_8cpp_source_1l00072">72</link> of file <link linkend="_interface_8cpp_source">interface.cpp</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
src/<link linkend="_interface_8cpp">interface.cpp</link></section>
</section>
