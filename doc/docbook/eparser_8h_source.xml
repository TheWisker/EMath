<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_eparser_8h_source" xml:lang="en-US">
<title>eparser.h</title>
<indexterm><primary>include/eparser.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_eparser_8h_source_1l00001"/>00001 
<anchor xml:id="_eparser_8h_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_eparser_8h_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_emath_8h">emath.h</link>&quot;</emphasis>
<anchor xml:id="_eparser_8h_source_1l00016"/>00016 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceemthp">emthp</link>&#32;{
<anchor xml:id="_eparser_8h_source_1l00021"/><link linkend="_namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6b">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6b">TokenType</link>&#32;{
<anchor xml:id="_eparser_8h_source_1l00025"/><link linkend="_namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bab0be00ab2ea8e4a56ab22f220c7de9bf">00025</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6bab0be00ab2ea8e4a56ab22f220c7de9bf">T_PLUS</link>,
<anchor xml:id="_eparser_8h_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T_MINUS,
<anchor xml:id="_eparser_8h_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T_NUMBER,
<anchor xml:id="_eparser_8h_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T_VARIABLE,
<anchor xml:id="_eparser_8h_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T_EXPONENT,
<anchor xml:id="_eparser_8h_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T_EOF
<anchor xml:id="_eparser_8h_source_1l00031"/>00031 &#32;&#32;&#32;&#32;};
<anchor xml:id="_eparser_8h_source_1l00036"/><link linkend="_structemthp_1_1Token">00036</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structemthp_1_1Token">Token</link>&#32;{
<anchor xml:id="_eparser_8h_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_eparser_8h_source_1l00041"/><link linkend="_structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3">00041</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceemthp_1a29873cfffe66c1e0b36436ebcc54dc6b">TokenType</link>&#32;<link linkend="_structemthp_1_1Token_1ae532928c40581bc20349979955dfb2f3">type</link>;
<anchor xml:id="_eparser_8h_source_1l00045"/><link linkend="_structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c">00045</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structemthp_1_1Token_1a0512f6f4c2a7dcf724d582d971393c2c">value</link>;
<anchor xml:id="_eparser_8h_source_1l00046"/>00046 &#32;&#32;&#32;&#32;};
<anchor xml:id="_eparser_8h_source_1l00052"/><link linkend="_classemthp_1_1Lexer">00052</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classemthp_1_1Lexer">Lexer</link>&#32;{
<anchor xml:id="_eparser_8h_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_eparser_8h_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemthp_1_1Lexer">Lexer</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;input)&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemthp_1_1Lexer">Lexer</link>&amp;&#32;<link linkend="_classemthp_1_1Lexer_1a5116f34af8ec69634dc9202ae2d48b4a">operator =</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemthp_1_1Lexer">Lexer</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structemthp_1_1Token">Token</link>&#32;<link linkend="_classemthp_1_1Lexer_1a629ea5f393603e05dad17b004caba27d">next</link>()&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classemthp_1_1Lexer_1a273b288699191ec896c9857cfe7f5704">back</link>()&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_eparser_8h_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;_input;
<anchor xml:id="_eparser_8h_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_pos;
<anchor xml:id="_eparser_8h_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;read_number()&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;clean(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;input)&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_digit(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&amp;&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;((c&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>);}
<anchor xml:id="_eparser_8h_source_1l00101"/>00101 &#32;&#32;&#32;&#32;};
<anchor xml:id="_eparser_8h_source_1l00107"/><link linkend="_classemthp_1_1Parser">00107</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classemthp_1_1Parser">Parser</link>&#32;{
<anchor xml:id="_eparser_8h_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="_eparser_8h_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemthp_1_1Parser">Parser</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;input)&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemthp_1_1Parser">Parser</link>&amp;&#32;<link linkend="_classemthp_1_1Parser_1ada7e099319ce350bb2d5dcfd5ea8b36a">operator =</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemthp_1_1Parser">Parser</link>&amp;&#32;ogn)&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>&#32;<link linkend="_classemthp_1_1Parser_1a933df3ba2501887aa6d947bfe6eafe4b">parse_polynomial</link>()&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Monomial">emth::Monomial</link>&#32;<link linkend="_classemthp_1_1Parser_1a590566c3e893515a0dbb9db032a889cd">parse_monomial</link>()&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="_eparser_8h_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classemthp_1_1Lexer">Lexer</link>&#32;_lexer;
<anchor xml:id="_eparser_8h_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;parse_number()&#32;<emphasis role="keyword">noexcept</emphasis>;
<anchor xml:id="_eparser_8h_source_1l00140"/>00140 &#32;&#32;&#32;&#32;};
<anchor xml:id="_eparser_8h_source_1l00141"/>00141 }
</programlisting></section>
