<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test_2emath_8cpp_source" xml:lang="en-US">
<title>emath.cpp</title>
<indexterm><primary>test/emath.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_test_2emath_8cpp_source_1l00001"/>00001 
<anchor xml:id="_test_2emath_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_emath_8h">emath.h</link>&quot;</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00010"/>00010 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespaceemth">emth</link>;
<anchor xml:id="_test_2emath_8cpp_source_1l00018"/><link linkend="_test_2emath_8cpp_1aa47d761ab4eda6102588b7c387bf9414">00018</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_test_2emath_8cpp_1aa47d761ab4eda6102588b7c387bf9414">vequal</link>(<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;std::complex&lt;double&gt;&gt;&#32;v1,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;std::complex&lt;double&gt;&gt;&#32;v2,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;t)&#32;{
<anchor xml:id="_test_2emath_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;vv1,&#32;vv2,&#32;r;
<anchor xml:id="_test_2emath_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;i:&#32;v1)&#32;{vv1.push_back((((t&#32;?&#32;i.real()&#32;:&#32;i.imag())&#32;&gt;=&#32;0)&#32;?&#32;std::ceil(t&#32;?&#32;i.real()&#32;:&#32;i.imag())&#32;:&#32;std::floor(t&#32;?&#32;i.real()&#32;:&#32;i.imag())));}
<anchor xml:id="_test_2emath_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;i:&#32;v2)&#32;{vv2.push_back((((t&#32;?&#32;i.real()&#32;:&#32;i.imag())&#32;&gt;=&#32;0)&#32;?&#32;std::ceil(t&#32;?&#32;i.real()&#32;:&#32;i.imag())&#32;:&#32;std::floor(t&#32;?&#32;i.real()&#32;:&#32;i.imag())));}
<anchor xml:id="_test_2emath_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;set::sort(vv1);&#32;set::sort(vv2);&#32;<emphasis role="keywordflow">return</emphasis>&#32;set::sdiff(vv1,&#32;vv2).empty();
<anchor xml:id="_test_2emath_8cpp_source_1l00023"/>00023 }
<anchor xml:id="_test_2emath_8cpp_source_1l00028"/><link linkend="_test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f">00028</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f">test_monomial</link>()&#32;{
<anchor xml:id="_test_2emath_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CONSTRUCTORS</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Default&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>&#32;md;
<anchor xml:id="_test_2emath_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;assert((md.<link linkend="_classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124">get_coeff</link>()&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;default&#32;Monomial&#32;constructor:&#32;coeff&#32;is&#32;not&#32;default!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;assert((md.<link linkend="_classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0">get_degree</link>()&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;default&#32;Monomial&#32;constructor:&#32;degree&#32;is&#32;not&#32;default!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Normal&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>&#32;mn(1,&#32;1);
<anchor xml:id="_test_2emath_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;assert((mn.<link linkend="_classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124">get_coeff</link>()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;normal&#32;Monomial&#32;constructor:&#32;coeff&#32;is&#32;not&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;assert((mn.<link linkend="_classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0">get_degree</link>()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;normal&#32;Monomial&#32;constructor:&#32;degree&#32;is&#32;not&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>&#32;mc(mn);
<anchor xml:id="_test_2emath_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;assert((mc.<link linkend="_classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124">get_coeff</link>()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;Monomial&#32;constructor:&#32;coeff&#32;is&#32;not&#32;copy&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;assert((mc.<link linkend="_classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0">get_degree</link>()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;Monomial&#32;constructor:&#32;degree&#32;is&#32;not&#32;copy&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>&#32;mm(<link linkend="_classemth_1_1Monomial">Monomial</link>(2,2));
<anchor xml:id="_test_2emath_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;assert((mm.<link linkend="_classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124">get_coeff</link>()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;Monomial&#32;constructor:&#32;coeff&#32;is&#32;not&#32;move&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;assert((mm.<link linkend="_classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0">get_degree</link>()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;Monomial&#32;constructor:&#32;degree&#32;is&#32;not&#32;move&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ASSIGMENT</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;assigment</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;mc&#32;=&#32;mm;
<anchor xml:id="_test_2emath_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;assert((mc.<link linkend="_classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124">get_coeff</link>()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;assigment&#32;operator:&#32;coeff&#32;is&#32;not&#32;copy&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;assert((mc.<link linkend="_classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0">get_degree</link>()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;assigment&#32;operator:&#32;degree&#32;is&#32;not&#32;copy&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;assigment</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;mm&#32;=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3);
<anchor xml:id="_test_2emath_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;assert((mm.<link linkend="_classemth_1_1Monomial_1ac0ea8a4e12483048519184c536c27124">get_coeff</link>()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;assigment&#32;operator:&#32;coeff&#32;is&#32;not&#32;move&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;assert((mm.<link linkend="_classemth_1_1Monomial_1a1a11b6043ddc48006fe37241bb6bc6d0">get_degree</link>()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;assigment&#32;operator:&#32;degree&#32;is&#32;not&#32;move&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;COMPARISON</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>&#32;m1(1,&#32;1),&#32;m2(2,&#32;2);
<anchor xml:id="_test_2emath_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Equality</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;assert((m1&#32;==&#32;m1)&#32;&amp;&amp;&#32;(m1&#32;==&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;==&#32;m1)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;==&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;equal&#32;operator:&#32;equal&#32;monomials&#32;are&#32;not&#32;diffent!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;assert((m1&#32;!=&#32;m2)&#32;&amp;&amp;&#32;(m1&#32;!=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)&#32;!=&#32;m1)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;!=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;equal&#32;operator:&#32;diffent&#32;monomials&#32;are&#32;not&#32;equal!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Size</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;assert((m2&#32;&gt;&#32;m1)&#32;&amp;&amp;&#32;(m2&#32;&gt;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)&#32;&gt;&#32;m1)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)&#32;&gt;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;greater&#32;monomial&#32;operator!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;assert((m1&#32;&lt;&#32;m2)&#32;&amp;&amp;&#32;(m1&#32;&lt;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;&lt;&#32;m2)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;&lt;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;lesser&#32;monomial&#32;operator!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;assert((m2&#32;&gt;=&#32;m1&#32;&amp;&amp;&#32;m2&#32;&gt;=&#32;m2)&#32;&amp;&amp;&#32;(m2&#32;&gt;=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;&amp;&amp;&#32;m2&#32;&gt;=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)&#32;&gt;=&#32;m1&#32;&amp;&amp;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)&#32;&gt;=&#32;m2)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)&#32;&gt;=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;&amp;&amp;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)&#32;&gt;=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;greater&#32;or&#32;equal&#32;monomial&#32;operator!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;assert((m1&#32;&lt;=&#32;m2&#32;&amp;&amp;&#32;m1&#32;&lt;=&#32;m1)&#32;&amp;&amp;&#32;(m1&#32;&lt;=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)&#32;&amp;&amp;&#32;m1&#32;&lt;=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;&lt;=&#32;m2&#32;&amp;&amp;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;&lt;=&#32;m1)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;&lt;=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)&#32;&amp;&amp;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)&#32;&gt;=&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;lesser&#32;or&#32;equal&#32;monomial&#32;operator!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ARITHMETIC</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>&#32;m3(3,&#32;3),&#32;m4(4,&#32;4),&#32;mn3(-3,&#32;-3),&#32;mn4(-4,&#32;-4);
<anchor xml:id="_test_2emath_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Addition</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;assert(((m3&#32;+&#32;m4).get_coeff()&#32;==&#32;3)&#32;&amp;&amp;&#32;((m3&#32;+&#32;m4).get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;addition&#32;operator:&#32;different&#32;degree&#32;monomials&#32;addition&#32;didnt&#32;return&#32;default&#32;value&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;assert(((m3&#32;+&#32;m3).get_coeff()&#32;==&#32;6)&#32;&amp;&amp;&#32;((m3&#32;+&#32;m3).get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)&#32;+&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)).get_coeff()&#32;==&#32;6)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)&#32;+&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)).get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;addition&#32;operator:&#32;positive&#32;values&#32;addition&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;assert(((mn3&#32;+&#32;mn3).get_coeff()&#32;==&#32;-6)&#32;&amp;&amp;&#32;((mn3&#32;+&#32;mn3).get_degree()&#32;==&#32;-3)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)&#32;+&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)).get_coeff()&#32;==&#32;-6)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)&#32;+&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)).get_degree()&#32;==&#32;-3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;addition&#32;operator:&#32;negative&#32;values&#32;addition&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Substraction</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;assert(((m3&#32;-&#32;m4).get_coeff()&#32;==&#32;3)&#32;&amp;&amp;&#32;((m3&#32;-&#32;m4).get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;substraction&#32;operator:&#32;different&#32;degree&#32;monomials&#32;substraction&#32;didnt&#32;return&#32;default&#32;value&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;assert(((m3&#32;-&#32;m3).get_coeff()&#32;==&#32;0)&#32;&amp;&amp;&#32;((m3&#32;-&#32;m3).get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)&#32;-&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)).get_coeff()&#32;==&#32;0)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)&#32;-&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)).get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;substraction&#32;operator:&#32;positive&#32;values&#32;substraction&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;assert(((mn3&#32;-&#32;mn3).get_coeff()&#32;==&#32;0)&#32;&amp;&amp;&#32;((mn3&#32;-&#32;mn3).get_degree()&#32;==&#32;-3)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)&#32;-&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)).get_coeff()&#32;==&#32;0)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)&#32;-&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)).get_degree()&#32;==&#32;-3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;substraction&#32;operator:&#32;negative&#32;values&#32;substraction&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Multiplication</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;assert(((m3&#32;*&#32;m4).get_coeff()&#32;==&#32;12)&#32;&amp;&amp;&#32;((m3&#32;*&#32;m4).get_degree()&#32;==&#32;7)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)&#32;*&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)).get_coeff()&#32;==&#32;12)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)&#32;*&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)).get_degree()&#32;==&#32;7)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;multiplication&#32;operator:&#32;positive&#32;values&#32;multiplication&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;assert(((mn3&#32;*&#32;mn4).get_coeff()&#32;==&#32;12)&#32;&amp;&amp;&#32;((mn3&#32;*&#32;mn4).get_degree()&#32;==&#32;-7)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)&#32;*&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-4,&#32;-4)).get_coeff()&#32;==&#32;12)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)&#32;*&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-4,&#32;-4)).get_degree()&#32;==&#32;-7)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;multiplication&#32;operator:&#32;negative&#32;values&#32;multiplication&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Division</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;assert(((m3&#32;/&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(0,&#32;0)).get_coeff()&#32;==&#32;3)&#32;&amp;&amp;&#32;((m3&#32;/&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(0,&#32;0)).get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;division&#32;operator:&#32;divide&#32;by&#32;zero&#32;didnt&#32;return&#32;default&#32;value&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;assert(((m3&#32;/&#32;m4).get_coeff()&#32;==&#32;0.75)&#32;&amp;&amp;&#32;((m3&#32;/&#32;m4).get_degree()&#32;==&#32;-1)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)&#32;/&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)).get_coeff()&#32;==&#32;0.75)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)&#32;/&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)).get_degree()&#32;==&#32;-1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;division&#32;operator:&#32;positive&#32;values&#32;division&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;assert(((mn3&#32;/&#32;mn4).get_coeff()&#32;==&#32;0.75)&#32;&amp;&amp;&#32;((mn3&#32;/&#32;mn4).get_degree()&#32;==&#32;1)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)&#32;/&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-4,&#32;-4)).get_coeff()&#32;==&#32;0.75)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)&#32;/&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-4,&#32;-4)).get_degree()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;division&#32;operator:&#32;negative&#32;values&#32;division&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Modulus</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;assert(((m3&#32;%&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(0,&#32;0)).get_coeff()&#32;==&#32;3)&#32;&amp;&amp;&#32;((m3&#32;%&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(0,&#32;0)).get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;modulus&#32;operator:&#32;divide&#32;by&#32;zero&#32;didnt&#32;return&#32;default&#32;value&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;assert(((m4&#32;%&#32;m3).get_coeff()&#32;==&#32;1)&#32;&amp;&amp;&#32;((m4&#32;%&#32;m3).get_degree()&#32;==&#32;1)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)&#32;%&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)).get_coeff()&#32;==&#32;1)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)&#32;%&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)).get_degree()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;modulus&#32;operator:&#32;positive&#32;values&#32;modulus&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;assert(((mn4&#32;%&#32;mn3).get_coeff()&#32;==&#32;-1)&#32;&amp;&amp;&#32;((mn4&#32;%&#32;mn3).get_degree()&#32;==&#32;-1)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-4,&#32;-4)&#32;%&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)).get_coeff()&#32;==&#32;-1)&#32;&amp;&amp;&#32;((<link linkend="_classemth_1_1Monomial">Monomial</link>(-4,&#32;-4)&#32;%&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;-3)).get_degree()&#32;==&#32;-1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;modulus&#32;operator:&#32;negative&#32;values&#32;modulus&#32;failed!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STREAM</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;std::stringstream&#32;ss,&#32;sss;
<anchor xml:id="_test_2emath_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>&#32;m5(5,&#32;5),&#32;mn5(-5,&#32;-5);
<anchor xml:id="_test_2emath_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;assert(((ss&#32;&lt;&lt;&#32;m5).str()&#32;==&#32;<emphasis role="stringliteral">&quot;5x^5&quot;</emphasis>)&#32;&amp;&amp;&#32;((sss&#32;&lt;&lt;&#32;mn5).str()&#32;==&#32;<emphasis role="stringliteral">&quot;-5x^-5&quot;</emphasis>)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;stream&#32;operator!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MISC</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Expression&#32;getter</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;assert((m5.get_expression()&#32;==&#32;<emphasis role="stringliteral">&quot;5x^5&quot;</emphasis>)&#32;&amp;&amp;&#32;(mn5.<link linkend="_classemth_1_1Monomial_1a2940ea82172b382f8354fe4d1556b996">get_expression</link>()&#32;==&#32;<emphasis role="stringliteral">&quot;-5x^-5&quot;</emphasis>)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;expression&#32;getter!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Value&#32;getter</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;assert((m5.get_value(2)&#32;==&#32;160)&#32;&amp;&amp;&#32;(mn5.<link linkend="_classemth_1_1Monomial_1a50a76c251c4a66c3522b78f0aba3c157">get_value</link>(2)&#32;==&#32;-0.15625)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;value&#32;getter!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Well&#32;done!</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Monomial&#32;tests&#32;passed!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_test_2emath_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_test_2emath_8cpp_source_1l00110"/>00110 }
<anchor xml:id="_test_2emath_8cpp_source_1l00115"/><link linkend="_test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129">00115</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129">test_polynomial</link>()&#32;{
<anchor xml:id="_test_2emath_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CONSTRUCTORS</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Default&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;pd;
<anchor xml:id="_test_2emath_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;assert((pd.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_coeff()&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;default&#32;Polynomial&#32;constructor:&#32;monomial&#32;coeff&#32;is&#32;not&#32;default!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;assert((pd.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_degree()&#32;==&#32;0)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;default&#32;Polynomial&#32;constructor:&#32;monomial&#32;degree&#32;is&#32;not&#32;default!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Normal&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;pn(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)}}));
<anchor xml:id="_test_2emath_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;assert((pn.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_coeff()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;normal&#32;Polynomial&#32;constructor:&#32;monomial&#32;coeff&#32;is&#32;not&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;assert((pn.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_degree()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;normal&#32;Polynomial&#32;constructor:&#32;monomial&#32;degree&#32;is&#32;not&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;assert((pn.<link linkend="_classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963">get_degree</link>()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;normal&#32;Polynomial&#32;constructor:&#32;polynomial&#32;degree&#32;is&#32;not&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;List&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;pl({<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1),&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)});
<anchor xml:id="_test_2emath_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;assert((pl.get_monomials().crbegin()-&gt;second.get_coeff()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;list&#32;Polynomial&#32;constructor:&#32;last&#32;monomial&#32;coeff&#32;is&#32;not&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;assert((pl.get_monomials().crbegin()-&gt;second.get_degree()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;list&#32;Polynomial&#32;constructor:&#32;last&#32;monomial&#32;degree&#32;is&#32;not&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;assert((pl.get_monomials().cbegin()-&gt;second.get_coeff()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;list&#32;Polynomial&#32;constructor:&#32;first&#32;monomial&#32;coeff&#32;is&#32;not&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;assert((pl.get_monomials().cbegin()-&gt;second.get_degree()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;list&#32;Polynomial&#32;constructor:&#32;first&#32;monomial&#32;degree&#32;is&#32;not&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;assert((pl.get_degree()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;list&#32;Polynomial&#32;constructor:&#32;polynomial&#32;degree&#32;is&#32;not&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Vector&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;pv(std::vector&lt;Monomial&gt;({<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1),&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}));
<anchor xml:id="_test_2emath_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;assert((pv.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_coeff()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;vector&#32;Polynomial&#32;constructor:&#32;last&#32;monomial&#32;coeff&#32;is&#32;not&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;assert((pv.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_degree()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;vector&#32;Polynomial&#32;constructor:&#32;last&#32;monomial&#32;degree&#32;is&#32;not&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;assert((pv.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().cbegin()-&gt;second.get_coeff()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;vector&#32;Polynomial&#32;constructor:&#32;first&#32;monomial&#32;coeff&#32;is&#32;not&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;assert((pv.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().cbegin()-&gt;second.get_degree()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;vector&#32;Polynomial&#32;constructor:&#32;first&#32;monomial&#32;degree&#32;is&#32;not&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;assert((pv.<link linkend="_classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963">get_degree</link>()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;vector&#32;Polynomial&#32;constructor:&#32;polynomial&#32;degree&#32;is&#32;not&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;pc(pn);
<anchor xml:id="_test_2emath_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;assert((pc.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_coeff()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;Polynomial&#32;constructor:&#32;coeff&#32;is&#32;not&#32;copy&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;assert((pc.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_degree()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;Polynomial&#32;constructor:&#32;degree&#32;is&#32;not&#32;copy&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;assert((pc.<link linkend="_classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963">get_degree</link>()&#32;==&#32;1)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;Polynomial&#32;constructor:&#32;polynomial&#32;degree&#32;is&#32;not&#32;copy&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;constructor</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;pm(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}})));
<anchor xml:id="_test_2emath_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;assert((pm.get_monomials().crbegin()-&gt;second.get_coeff()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;Polynomial&#32;constructor:&#32;coeff&#32;is&#32;not&#32;move&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;assert((pm.get_monomials().crbegin()-&gt;second.get_degree()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;Polynomial&#32;constructor:&#32;degree&#32;is&#32;not&#32;move&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;assert((pm.get_degree()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;Polynomial&#32;constructor:&#32;polynomial&#32;degree&#32;is&#32;not&#32;move&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ASSIGMENT</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;assigment</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;pc&#32;=&#32;pm;
<anchor xml:id="_test_2emath_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;assert((pc.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_coeff()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;assigment&#32;operator:&#32;coeff&#32;is&#32;not&#32;copy&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;assert((pc.<link linkend="_classemth_1_1Polynomial_1a02fda10cd15abff226c5a8013f4928f7">get_monomials</link>().crbegin()-&gt;second.get_degree()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;assigment&#32;operator:&#32;degree&#32;is&#32;not&#32;copy&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;assert((pc.<link linkend="_classemth_1_1Polynomial_1a7eb2c1c9bbbb013220d24f5d2a24a963">get_degree</link>()&#32;==&#32;2)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;copy&#32;assigment&#32;operator:&#32;polynomial&#32;degree&#32;is&#32;not&#32;copy&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;assigment</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;pm&#32;=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)}}));
<anchor xml:id="_test_2emath_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;assert((pm.get_monomials().crbegin()-&gt;second.get_coeff()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;assigment&#32;operator:&#32;coeff&#32;is&#32;not&#32;move&#32;coeff!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;assert((pm.get_monomials().crbegin()-&gt;second.get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;assigment&#32;operator:&#32;degree&#32;is&#32;not&#32;move&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;assert((pm.get_degree()&#32;==&#32;3)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;move&#32;assigment&#32;operator:&#32;polynomial&#32;degree&#32;is&#32;not&#32;move&#32;degree!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;COMPARISON</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;p2(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}})),&#32;p4(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}));
<anchor xml:id="_test_2emath_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Equality</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;assert((p2&#32;==&#32;p2)&#32;&amp;&amp;&#32;(p2&#32;==&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}})))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;==&#32;p2)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;==&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}})))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;equal&#32;operator:&#32;equal&#32;monomials&#32;are&#32;not&#32;diffent!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;assert((p2&#32;!=&#32;p4)&#32;&amp;&amp;&#32;(p2&#32;!=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}})))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}))&#32;!=&#32;p2)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;!=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}})))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;equal&#32;operator:&#32;diffent&#32;monomials&#32;are&#32;not&#32;equal!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Size</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;assert((p4&#32;&gt;&#32;p2)&#32;&amp;&amp;&#32;(p4&#32;&gt;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}})))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}))&#32;&gt;&#32;p2)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}))&#32;&gt;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}})))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;greater&#32;monomial&#32;operator!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;assert((p2&#32;&lt;&#32;p4)&#32;&amp;&amp;&#32;(p2&#32;&lt;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}})))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;&lt;&#32;p4)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;&lt;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}})))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;lesser&#32;monomial&#32;operator!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;assert((p4&#32;&gt;=&#32;p2&#32;&amp;&amp;&#32;p4&#32;&gt;=&#32;p4)&#32;&amp;&amp;&#32;(p4&#32;&gt;=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;&amp;&amp;&#32;p4&#32;&gt;=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}})))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}))&#32;&gt;=&#32;p2&#32;&amp;&amp;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}))&#32;&gt;=&#32;p4)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}))&#32;&gt;=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;&amp;&amp;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}))&#32;&gt;=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}})))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;greater&#32;or&#32;equal&#32;monomial&#32;operator!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;assert((p2&#32;&lt;=&#32;p4&#32;&amp;&amp;&#32;p2&#32;&lt;=&#32;p2)&#32;&amp;&amp;&#32;(p2&#32;&lt;=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}))&#32;&amp;&amp;&#32;p2&#32;&lt;=&#32;Polynomial(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}})))&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;&lt;=&#32;p4&#32;&amp;&amp;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;&lt;=&#32;p2)&#32;&amp;&amp;&#32;(<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;&lt;=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;4)}}))&#32;&amp;&amp;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}}))&#32;&gt;=&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}})))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;lesser&#32;or&#32;equal&#32;monomial&#32;operator!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ARITHMETIC</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;pn1(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)}})),&#32;pn3(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;1)},&#32;{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)}}));
<anchor xml:id="_test_2emath_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Addition</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;assert(pn1&#32;+&#32;pn3&#32;==&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)},&#32;{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(3,&#32;3)}}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;addition&#32;operator:&#32;wrong&#32;results&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Substraction</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;assert(pn1&#32;-&#32;pn3&#32;==&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;2)},&#32;{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-3,&#32;3)}}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;substraction&#32;operator:&#32;wrong&#32;results&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Multiplication</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;assert(pn1&#32;*&#32;pn3&#32;==&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;2)},&#32;{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(4,&#32;3)},&#32;{4,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(6,&#32;4)},&#32;{5,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(6,&#32;5)}}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;multiplication&#32;operator:&#32;wrong&#32;results&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Division</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;assert(pn3&#32;/&#32;pn1&#32;==&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{0,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-1.5,&#32;0)},&#32;{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1.5,&#32;1)}}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;division&#32;operator:&#32;wrong&#32;results&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Modulus</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;assert(pn3&#32;%&#32;pn1&#32;==&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(5,&#32;1)}}))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;modulus&#32;operator:&#32;wrong&#32;results&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STREAM</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;std::stringstream&#32;ss;
<anchor xml:id="_test_2emath_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;ps(std::map&lt;int,&#32;Monomial&gt;({{0,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;0)},&#32;{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;2)}}));
<anchor xml:id="_test_2emath_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;assert(((ss&#32;&lt;&lt;&#32;ps).str()&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;x^2&#32;+&#32;x&#32;+&#32;1&quot;</emphasis>))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;stream&#32;operator!&quot;</emphasis>);&#32;<emphasis role="comment">//&quot;x^2&#32;+&#32;x&#32;+&#32;1&quot;</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MISC</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Expression&#32;getter</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;assert((ps.<link linkend="_classemth_1_1Polynomial_1a6f3eb1e674dbce5f0a172d8b5fd7ab2b">get_expression</link>()&#32;==&#32;std::string(<emphasis role="stringliteral">&quot;x^2&#32;+&#32;x&#32;+&#32;1&quot;</emphasis>))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;expression&#32;getter!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Value&#32;getter</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;assert((ps.<link linkend="_classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3">get_value</link>(1)&#32;==&#32;3)&#32;&amp;&amp;&#32;(ps.<link linkend="_classemth_1_1Polynomial_1a644cd3ebe3afa676cc3db99557f6eed3">get_value</link>(2)&#32;==&#32;7)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;value&#32;getter!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CALCULUS</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;<emphasis role="comment">//--------------------------------------</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;prr(std::map&lt;int,&#32;Monomial&gt;({{0,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(-1,&#32;0)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;2)}}));&#32;<emphasis role="comment">//&quot;x^2&#32;-&#32;1&quot;</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>&#32;prc(std::map&lt;int,&#32;Monomial&gt;({{0,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;0)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;2)}}));&#32;<emphasis role="comment">//&quot;x^2&#32;+&#32;1&quot;</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Derivative&#32;getter</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;assert((ps.<link linkend="_classemth_1_1Polynomial_1a1f27fae485c94bb0f00a46c50214ab37">get_derivative</link>()&#32;==&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{0,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;0)},&#32;{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(2,&#32;1)}})))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;derivative&#32;getter!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Integral&#32;getter</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;assert((ps.<link linkend="_classemth_1_1Polynomial_1ac87df7094ce26a8e9cba6df79a3eaf2d">get_integral</link>()&#32;==&#32;<link linkend="_classemth_1_1Polynomial">Polynomial</link>(std::map&lt;int,&#32;Monomial&gt;({{1,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1,&#32;1)},&#32;{2,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(0.5,&#32;2)},&#32;{3,&#32;<link linkend="_classemth_1_1Monomial">Monomial</link>(1.0/3.0,&#32;3)}})))&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;integral&#32;getter!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Roots&#32;getter</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;assert(<link linkend="_test_2emath_8cpp_1aa47d761ab4eda6102588b7c387bf9414">vequal</link>(prr.<link linkend="_classemth_1_1Polynomial_1adcba2128b5bfcc6ee15023684edc53f2">get_roots</link>(),&#32;std::vector&lt;std::complex&lt;double&gt;&gt;({{1,&#32;0},&#32;{-1,&#32;0}}),&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;real&#32;roots&#32;getter!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;assert(<link linkend="_test_2emath_8cpp_1aa47d761ab4eda6102588b7c387bf9414">vequal</link>(prc.get_roots(),&#32;std::vector&lt;std::complex&lt;double&gt;&gt;({{0,&#32;1},&#32;{0,&#32;-1}}),&#32;<emphasis role="keyword">false</emphasis>)&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Error&#32;on&#32;complex&#32;roots&#32;getter!&quot;</emphasis>);
<anchor xml:id="_test_2emath_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Well&#32;done!</emphasis>
<anchor xml:id="_test_2emath_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Polynomial&#32;tests&#32;passed!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_test_2emath_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_test_2emath_8cpp_source_1l00219"/>00219 }
<anchor xml:id="_test_2emath_8cpp_source_1l00224"/><link linkend="_test_2emath_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00224</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_test_2emath_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>()&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_test_2emath_8cpp_1ab880f6083075d1f2c3c6ca54d36fba6f">test_monomial</link>()&#32;+&#32;<link linkend="_test_2emath_8cpp_1ada79f825efa86697f40154987f0f6129">test_polynomial</link>();}
</programlisting></section>
