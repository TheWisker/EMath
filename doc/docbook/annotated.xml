<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Class List</title>
Here are the classes, structs, unions and interfaces with brief descriptions:<link linkend="_classefc_1_1Application">efc::Application</link>
<para>Class that contains the application inner logic </para>
<link linkend="_classemth_1_1Arithmetic">emth::Arithmetic</link>
<para>Class with some functions for arithmetic math </para>
<link linkend="_classEParserTest">EParserTest</link>
<para>Class that provides a test fixture for the test cases </para>
<link linkend="_classefc_1_1IWindow">efc::IWindow</link>
<para><link linkend="_classefc_1_1Window">Window</link> class extension for input </para>
<link linkend="_classefc_1_1Lexer">efc::Lexer</link>
<para>Class that works as a token supplier for the <link linkend="_classefc_1_1Parser">Parser</link> class </para>
<link linkend="_classemthp_1_1Lexer">emthp::Lexer</link>
<para>Class that works as a token supplier for the <link linkend="_classemthp_1_1Parser">Parser</link> class </para>
<link linkend="_classemth_1_1Monomial">emth::Monomial</link>
<para>Class for representing and operating monomials </para>
<link linkend="_classefc_1_1OWindow">efc::OWindow</link>
<para><link linkend="_classefc_1_1Window">Window</link> class extension for output </para>
<link linkend="_classefc_1_1Parser">efc::Parser</link>
<para>Class that wraps a std::string and parses it as a number or as a operation </para>
<link linkend="_classemthp_1_1Parser">emthp::Parser</link>
<para>Class that wraps a std::string and parses it as a Monomial or as a Polynomial </para>
<link linkend="_classefc_1_1Plane">efc::Plane</link>
<para><link linkend="_classefc_1_1Plane">Plane</link> class to draw a function in the Cartesian plane </para>
<link linkend="_classemth_1_1Polynomial">emth::Polynomial</link>
<para>Class for representing and operating polynomials </para>
<link linkend="_classefc_1_1Storage">efc::Storage</link>
<para><link linkend="_classefc_1_1Storage">Storage</link> class to read and write to a file </para>
<link linkend="_classefc_1_1Terminal">efc::Terminal</link>
<para><link linkend="_classefc_1_1Terminal">Terminal</link> class to manage the terminal through curses </para>
<link linkend="_structefc_1_1Token">efc::Token</link>
<para>Struct for representing a token as a type and a value </para>
<link linkend="_structemthp_1_1Token">emthp::Token</link>
<para>Struct for representing a token as a type and a value </para>
<link linkend="_classefc_1_1Window">efc::Window</link>
<para>Generic class for wrapping a curses WINDOW </para>
</section>
