{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emath.cpp\par \pard\plain 
{\tc\tcl2 \v src/emath.cpp}
{\xe \v src/emath.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00009 {\cf21 #include "emath.h"}\par
00015 {\cf18 void} emth::Arithmetic::get_divisors({\cf18 int} n, std::vector<int>& v) {\cf17 noexcept} \{\par
00016     {\cf18 int} limit(std::sqrt(n));\par
00017     {\cf19 for} ({\cf18 int} i = 1; i <= limit; i++) \{\par
00018         {\cf19 if} (std::fmod(n, i) == 0) \{\par
00019             v.push_back(i);\par
00020             {\cf19 if} (i != n / i) \{\par
00021                 v.push_back(n / i);\par
00022             \}\par
00023         \}\par
00024     \}\par
00025     {\cf19 return};\par
00026 \}\par
00030 emth::Monomial::Monomial() noexcept : coeff(0), degree(0) \{\}\par
00036 emth::Monomial::Monomial({\cf17 const} {\cf18 double} cf, {\cf17 const} {\cf18 int} dgr) noexcept : coeff(cf), degree(dgr) \{\}\par
00041 emth::Monomial::Monomial({\cf17 const} Monomial& ogn) noexcept : coeff(ogn.coeff), degree(ogn.degree) \{\}\par
00046 emth::Monomial::Monomial(Monomial&& ogn) noexcept : coeff(std::move(ogn.coeff)), degree(std::move(ogn.degree)) \{\}\par
00052 emth::Monomial& emth::Monomial::operator =({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{Monomial copy(ogn); this->swap(copy); {\cf19 return} *{\cf17 this};\}\par
00058 emth::Monomial& emth::Monomial::operator =(emth::Monomial&& ogn) {\cf17 noexcept} \{this->swap(ogn); {\cf19 return} *{\cf17 this};\}\par
00065 {\cf18 bool} emth::Monomial::operator ==({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} ((this->coeff == ogn.coeff) && (this->degree == ogn.degree));\}\par
00072 {\cf18 bool} emth::Monomial::operator !=({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (!(*{\cf17 this} == ogn));\}\par
00079 {\cf18 bool} emth::Monomial::operator >({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->degree > ogn.degree);\};\par
00086 {\cf18 bool} emth::Monomial::operator <({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->degree < ogn.degree);\};\par
00093 {\cf18 bool} emth::Monomial::operator >=({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->degree >= ogn.degree);\};\par
00100 {\cf18 bool} emth::Monomial::operator <=({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->degree <= ogn.degree);\};\par
00106 emth::Monomial emth::Monomial::operator +({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) += ogn;\}\par
00112 emth::Monomial emth::Monomial::operator -({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) -= ogn;\}\par
00118 emth::Monomial emth::Monomial::operator *({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) *= ogn;\}\par
00124 emth::Monomial emth::Monomial::operator /({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) /= ogn;\}\par
00130 emth::Monomial emth::Monomial::operator %({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) %= ogn;\}\par
00136 emth::Monomial& emth::Monomial::operator +=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00137     {\cf19 if} ((this->degree == ogn.degree) || this->coeff == 0) \{\par
00138         {\cf19 if} (this->coeff == 0) \{this->degree = ogn.degree;\}\par
00139         this->coeff += ogn.coeff;\par
00140     \}\par
00141     {\cf19 return} *{\cf17 this};\par
00142 \}\par
00148 emth::Monomial& emth::Monomial::operator -=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00149     {\cf19 if} ((this->degree == ogn.degree) || this->coeff == 0) \{\par
00150         {\cf19 if} (this->coeff == 0) \{this->degree = ogn.degree;\}\par
00151         this->coeff -= ogn.coeff;\par
00152     \}\par
00153     {\cf19 return} *{\cf17 this};\par
00154 \}\par
00160 emth::Monomial& emth::Monomial::operator *=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00161     this->coeff *= ogn.coeff;\par
00162     this->degree += ogn.degree;\par
00163     {\cf19 return} *{\cf17 this};\par
00164 \}\par
00170 emth::Monomial& emth::Monomial::operator /=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00171     {\cf19 if} (ogn.coeff != 0) \{\par
00172         this->coeff /= ogn.coeff;\par
00173         this->degree -= ogn.degree;\par
00174     \}\par
00175     {\cf19 return} *{\cf17 this};\par
00176 \}\par
00182 emth::Monomial& emth::Monomial::operator %=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00183     {\cf19 if} (ogn.coeff != 0) \{\par
00184         this->coeff = std::fmod(this->coeff, ogn.coeff);\par
00185         this->degree -= ogn.degree;\par
00186     \}\par
00187     {\cf19 return} *{\cf17 this};\par
00188 \}\par
00195 std::stringstream& emth::operator<<(std::stringstream& ss, {\cf17 const} emth::Monomial& m) \{ss << m.coeff << {\cf22 "x^"} << m.degree; {\cf19 return} ss;\}\par
00202 std::ostream& emth::operator<<(std::ostream& out, {\cf17 const} emth::Monomial& m) \{out << m.coeff << {\cf22 "x^"} << m.degree; {\cf19 return} out;\}\par
00207 {\cf18 double} emth::Monomial::get_coeff() const noexcept \{{\cf19 return} this->coeff;\}\par
00212 {\cf18 int} emth::Monomial::get_degree() const noexcept \{{\cf19 return} this->degree;\}\par
00217 {\cf18 void} emth::Monomial::set_coeff({\cf18 double} cf) {\cf17 noexcept} \{this->coeff = cf; {\cf19 return};\}\par
00222 {\cf18 void} emth::Monomial::set_degree({\cf18 int} dgr) {\cf17 noexcept} \{this->degree = dgr; {\cf19 return};\}\par
00227 std::string emth::Monomial::get_expression() const noexcept \{{\cf19 return} (std::stringstream() << *{\cf17 this}).str();\}\par
00233 {\cf18 double} emth::Monomial::get_value({\cf17 const} {\cf18 double}& x) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->coeff * std::pow(x, this->degree));\};\par
00238 {\cf18 void} emth::Monomial::swap(emth::Monomial& ogn) {\cf17 noexcept} \{\par
00239     std::swap(this->coeff, ogn.coeff);\par
00240     std::swap(this->degree, ogn.degree);\par
00241     {\cf19 return};\par
00242 \}\par
00246 emth::Monomial::~Monomial() = {\cf19 default};\par
00250 emth::Polynomial::Polynomial() noexcept \{this->monomials[0] = emth::Monomial(0, 0);\}\par
00255 emth::Polynomial::Polynomial({\cf17 const} std::map<int, emth::Monomial> mns) noexcept : monomials(mns) \{\}\par
00260 emth::Polynomial::Polynomial({\cf17 const} std::initializer_list<emth::Monomial> mns) {\cf17 noexcept} \{{\cf19 for}({\cf17 const} emth::Monomial& mn: mns) \{this->monomials.emplace(mn.get_degree(), mn);\}\}\par
00265 emth::Polynomial::Polynomial({\cf17 const} std::vector<emth::Monomial> mns) {\cf17 noexcept} \{{\cf19 for}({\cf17 const} emth::Monomial& mn: mns) \{this->monomials.emplace(mn.get_degree(), mn);\}\}\par
00270 emth::Polynomial::Polynomial({\cf17 const} emth::Polynomial& ogn) noexcept : monomials(ogn.monomials) \{\} \par
00275 emth::Polynomial::Polynomial(emth::Polynomial&& ogn) noexcept : monomials(std::move(ogn.monomials)) \{\}\par
00281 emth::Polynomial& emth::Polynomial::operator =({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{emth::Polynomial copy(ogn); this->swap(copy); {\cf19 return} *{\cf17 this};\}\par
00287 emth::Polynomial& emth::Polynomial::operator =(emth::Polynomial&& ogn) {\cf17 noexcept} \{this->swap(ogn); {\cf19 return} *{\cf17 this};\}\par
00294 {\cf18 bool} emth::Polynomial::operator ==({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} ((this->get_degree() == ogn.get_degree()) && (this->monomials == ogn.monomials));\}\par
00301 {\cf18 bool} emth::Polynomial::operator !=({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (!(*{\cf17 this} == ogn));\}\par
00308 {\cf18 bool} emth::Polynomial::operator >({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->get_degree() > ogn.get_degree());\};\par
00315 {\cf18 bool} emth::Polynomial::operator <({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->get_degree() < ogn.get_degree());\};\par
00322 {\cf18 bool} emth::Polynomial::operator >=({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->get_degree() >= ogn.get_degree());\};\par
00329 {\cf18 bool} emth::Polynomial::operator <=({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->get_degree() <= ogn.get_degree());\};\par
00335 emth::Polynomial emth::Polynomial::operator +({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) += ogn;\}\par
00341 emth::Polynomial emth::Polynomial::operator -({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) -= ogn;\}\par
00347 emth::Polynomial emth::Polynomial::operator *({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) *= ogn;\}\par
00353 emth::Polynomial emth::Polynomial::operator /({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) /= ogn;\}\par
00359 emth::Polynomial emth::Polynomial::operator %({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) %= ogn;\}\par
00365 emth::Polynomial& emth::Polynomial::operator +=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00366     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv : ogn.monomials) \{this->monomials[kv.first] += kv.second;\}\par
00367     {\cf19 return} this->redux();\par
00368 \}\par
00374 emth::Polynomial& emth::Polynomial::operator -=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00375     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv : ogn.monomials) \{this->monomials[kv.first] -= kv.second;\}\par
00376     {\cf19 return} this->redux();\par
00377 \}\par
00383 emth::Polynomial& emth::Polynomial::operator *=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00384     std::map<int, emth::Monomial> rs;\par
00385     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv : this->monomials) \{\par
00386         {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kkvv : ogn.monomials) \{\par
00387             rs[kv.first + kkvv.first] += kv.second * kkvv.second;\par
00388         \}\par
00389     \}\par
00390     this->monomials = std::move(rs);\par
00391     {\cf19 return} this->redux();\par
00392 \}\par
00398 emth::Polynomial& emth::Polynomial::operator /=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00399     {\cf19 if} (!ogn.monomials.empty()) \{\par
00400         emth::Polynomial quotient;\par
00401         {\cf19 while} (!this->monomials.empty() && this->monomials.crbegin()->second.get_degree() >= ogn.monomials.crbegin()->second.get_degree()) \{\par
00402             emth::Monomial mon = this->monomials.crbegin()->second / ogn.monomials.crbegin()->second;\par
00403             quotient.monomials[mon.get_degree()] = mon;\par
00404             *{\cf17 this} -= (ogn * emth::Polynomial(\{mon\}));\par
00405         \}\par
00406         this->monomials = quotient.monomials;\par
00407     \}\par
00408     {\cf19 return} this->redux();\par
00409 \}\par
00415 emth::Polynomial& emth::Polynomial::operator %=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00416     {\cf19 if} (!ogn.monomials.empty()) \{\par
00417         {\cf19 while} (!this->monomials.empty() && this->monomials.crbegin()->second.get_degree() >= ogn.monomials.crbegin()->second.get_degree()) \{\par
00418             emth::Monomial mon = this->monomials.crbegin()->second / ogn.monomials.crbegin()->second;\par
00419             *{\cf17 this} -= (ogn * emth::Polynomial(\{mon\}));\par
00420         \}\par
00421     \}\par
00422     {\cf19 return} this->redux();\par
00423 \}\par
00430 std::stringstream& emth::operator<<(std::stringstream& ss, {\cf17 const} emth::Polynomial& p) {\cf17 noexcept} \{\par
00431     {\cf19 for}(std::reverse_iterator<std::map<const int, emth::Monomial>::const_iterator> it = p.monomials.crbegin(); it != p.monomials.crend(); it++) \{ss << it->second << {\cf22 " "};\}\par
00432     {\cf19 return} ss;\par
00433 \}\par
00440 std::ostream& emth::operator<<(std::ostream& out, {\cf17 const} emth::Polynomial& p) {\cf17 noexcept} \{\par
00441     {\cf19 for}(std::reverse_iterator<std::map<const int, emth::Monomial>::const_iterator> it = p.monomials.crbegin(); it != p.monomials.crend(); it++) \{out << it->second << {\cf22 " "};\}\par
00442     {\cf19 return} out;\par
00443 \}\par
00448 {\cf18 int} emth::Polynomial::get_degree() const noexcept \{{\cf19 return} this->monomials.crbegin()->first;\}\par
00453 std::map<int, emth::Monomial> emth::Polynomial::get_monomials() const noexcept \{{\cf19 return} this->monomials;\}\par
00459 {\cf18 bool} emth::Polynomial::push_monomial({\cf17 const} emth::Monomial& m) {\cf17 noexcept} \{this->push_monomial(emth::Monomial(m));\};\par
00465 {\cf18 bool} emth::Polynomial::push_monomial(emth::Monomial&& m) {\cf17 noexcept} \{\par
00466     {\cf19 if} (m.get_coeff() == 0) \{{\cf19 return} {\cf17 false};\}\par
00467     this->monomials[m.get_degree()] += m;\par
00468     this->redux();\par
00469     {\cf19 return} {\cf17 true};\par
00470 \};\par
00475 std::string emth::Polynomial::get_expression() const noexcept \{{\cf19 return} (std::stringstream() << *{\cf17 this}).str();\}\par
00481 {\cf18 double} emth::Polynomial::get_value({\cf17 const} {\cf18 double}& x) {\cf17 const} {\cf17 noexcept} \{\par
00482     {\cf18 double} y = 0;\par
00483     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv: this->monomials) \{y += kv.second.get_value(x);\}\par
00484     {\cf19 return} y;\par
00485 \};\par
00490 emth::Polynomial emth::Polynomial::get_derivative() const noexcept \{\par
00491     std::map<int, emth::Monomial> fdx;\par
00492     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv: this->monomials) \{\par
00493         {\cf19 if} (kv.second.get_degree() != 0) \{fdx[kv.second.get_degree() - 1] = emth::Monomial(kv.second.get_coeff() * kv.second.get_degree(), kv.second.get_degree() - 1);\}\par
00494     \}\par
00495     {\cf19 return} emth::Polynomial(std::move(fdx)).redux();\par
00496 \};\par
00501 emth::Polynomial emth::Polynomial::get_integral() const noexcept \{\par
00502     std::map<int, emth::Monomial> sdx;\par
00503     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv: this->monomials) \{\par
00504         sdx[kv.second.get_degree() + 1] = emth::Monomial(kv.second.get_coeff() / (kv.second.get_degree() + 1), kv.second.get_degree() + 1);\par
00505     \}\par
00506     {\cf19 return} emth::Polynomial(std::move(sdx)).redux();\par
00507 \};\par
00512 {\cf18 void} emth::Polynomial::swap(emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00513     std::swap(this->monomials, ogn.monomials);\par
00514     {\cf19 return};\par
00515 \}\par
00519 emth::Polynomial& emth::Polynomial::redux() noexcept \{\par
00520     std::vector<int> ks;\par
00521     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv: this->monomials) \{\par
00522         {\cf19 if} (kv.second.get_coeff() == 0) \{ks.push_back(kv.first);\}\par
00523     \}\par
00524     {\cf19 for}({\cf18 int}& k: ks) \{this->monomials.erase(k);\}\par
00525     {\cf19 return} *{\cf17 this};\par
00526 \}\par
00530 emth::Polynomial::~Polynomial() = {\cf19 default};\par
}
}