{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
eparser.cpp\par \pard\plain 
{\tc\tcl2 \v src/eparser.cpp}
{\xe \v src/eparser.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00009 {\cf21 #include "eparser.h"}\par
00014 emthp::Lexer::Lexer({\cf17 const} std::string& input) noexcept : _input(this->clean(input)), _pos(0) \{\}\par
00020 emthp::Lexer& emthp::Lexer::operator =({\cf17 const} emthp::Lexer& ogn) {\cf17 noexcept} \{\par
00021     this->_input = ogn._input;\par
00022     this->_pos = ogn._pos;\par
00023     {\cf19 return} *{\cf17 this};\par
00024 \};\par
00029 emthp::Token emthp::Lexer::next() noexcept \{\par
00030     {\cf19 if} (this->_pos >= this->_input.size()) \{{\cf19 return} \{emthp::TokenType::T_EOF, \{0\}\};\} {\cf20 //Returs EOL on end of _input}\par
00031     {\cf19 switch} (this->_input[this->_pos]) \{\par
00032         {\cf19 case} {\cf23 '+'}: this->_pos++; {\cf19 return} \{emthp::TokenType::T_PLUS, \{0\}\};\par
00033         {\cf19 case} {\cf23 '-'}: this->_pos++; {\cf19 return} \{emthp::TokenType::T_MINUS, \{0\}\};\par
00034         {\cf19 case} {\cf23 '^'}: this->_pos++; {\cf19 return} \{emthp::TokenType::T_EXPONENT, \{0\}\};\par
00035         {\cf19 case} {\cf23 'x'}: this->_pos++; {\cf19 return} \{emthp::TokenType::T_VARIABLE, \{0\}\};\par
00036         {\cf19 case} {\cf23 '*'}: {\cf19 case} {\cf23 '/'}: this->_pos++; {\cf19 return} next();\par
00037         {\cf19 default}:\par
00038             {\cf18 double} number = this->read_number();\par
00039             {\cf19 while}({\cf17 true}) \{\par
00040                 {\cf19 switch} (this->_input[this->_pos]) \{\par
00041                     {\cf19 case} {\cf23 '*'}: this->_pos++; number *= this->read_number(); {\cf19 break};\par
00042                     {\cf19 case} {\cf23 '/'}: this->_pos++; number /= this->read_number(); {\cf19 break};\par
00043                     {\cf19 case} {\cf23 '^'}: this->_pos++; number = std::pow(number, this->read_number()); {\cf19 break};\par
00044                     {\cf19 default}: {\cf19 return} \{emthp::TokenType::T_NUMBER, \{number\}\};\par
00045                 \}\par
00046             \}\par
00047     \}\par
00048 \}\par
00052 {\cf18 void} emthp::Lexer::back() noexcept \{\par
00053     {\cf19 if} (this->_pos <= 0) \{{\cf19 return};\} \par
00054     {\cf19 if} (emthp::Lexer::is_digit(this->_input[this->_pos-1])) \{{\cf19 while} (emthp::Lexer::is_digit(this->_input[this->_pos-1])) \{this->_pos--;\} {\cf19 return};\}\par
00055     this->_pos--;{\cf19 return};\par
00056 \}\par
00062 std::string emthp::Lexer::clean({\cf17 const} std::string& input) {\cf17 noexcept} \{\par
00063     {\cf18 long} {\cf18 unsigned} {\cf18 int} pos = 0; std::string string;\par
00064     {\cf19 while} (pos < input.size()) \{\par
00065         {\cf19 switch} (input[pos]) \{\par
00066             {\cf19 case} {\cf23 '+'}: {\cf18 string} += {\cf23 '+'}; {\cf19 break};\par
00067             {\cf19 case} {\cf23 '-'}: {\cf18 string} += {\cf23 '-'}; {\cf19 break};\par
00068             {\cf19 case} {\cf23 '*'}: {\cf18 string} += {\cf23 '*'}; {\cf19 break};\par
00069             {\cf19 case} {\cf23 '/'}: {\cf18 string} += {\cf23 '/'}; {\cf19 break};\par
00070             {\cf19 case} {\cf23 '^'}: {\cf18 string} += {\cf23 '^'}; {\cf19 break};\par
00071             {\cf19 case} {\cf23 'x'}: {\cf18 string} += {\cf23 'x'}; {\cf19 break};\par
00072             {\cf19 default}: {\cf19 if} (emthp::Lexer::is_digit(input[pos])) \{{\cf18 string} += input[pos];\} {\cf19 break};\par
00073         \}\par
00074         pos++;\par
00075     \}\par
00076     {\cf19 return} string;\par
00077 \}\par
00082 {\cf18 double} emthp::Lexer::read_number() noexcept \{\par
00083     std::string snum;\par
00084     {\cf19 while} (this->_pos < this->_input.size() && emthp::Lexer::is_digit(this->_input[this->_pos])) \{\par
00085         snum += this->_input[this->_pos];\par
00086         this->_pos++;\par
00087     \}\par
00088     {\cf19 if} (snum.empty()) \{{\cf19 return} 1;\}\par
00089     {\cf19 return} std::stod(snum); {\cf20 // CHECK : 2x^2 -- 8x^3/3 ;;;.......................4x^1 + 2x⁶}\par
00090 \}\par
00095 emthp::Parser::Parser({\cf17 const} std::string& input) noexcept : _lexer(input) \{\};\par
00101 emthp::Parser& emthp::Parser::operator =({\cf17 const} emthp::Parser& ogn) {\cf17 noexcept} \{this->_lexer = ogn._lexer; {\cf19 return} *{\cf17 this};\};\par
00106 emth::Polynomial emthp::Parser::parse_polynomial() noexcept \{\par
00107     emth::Polynomial polynomial;\par
00108     {\cf19 while} ({\cf17 true}) \{{\cf19 if}(!polynomial.push_monomial(std::move(this->parse_monomial()))) \{{\cf19 return} polynomial;\}\}\par
00109 \}\par
00114 emth::Monomial emthp::Parser::parse_monomial() noexcept \{\par
00115     emth::Monomial monomial(0, 0);\par
00116     monomial.set_coeff(this->parse_number());\par
00117     {\cf18 bool} v = {\cf17 false}; {\cf18 bool} e = {\cf17 false};\par
00118     {\cf19 while} (!v || !e) \{\par
00119         emthp::Token token = this->_lexer.next();\par
00120         {\cf19 switch} (token.type) \{\par
00121             {\cf19 case} emthp::TokenType::T_VARIABLE: v = {\cf17 true}; {\cf19 break};\par
00122             {\cf19 case} emthp::TokenType::T_EXPONENT: {\cf19 if} (v) \{e = {\cf17 true};\} {\cf19 break};\par
00123             {\cf19 case} emthp::TokenType::T_PLUS: {\cf19 case} emthp::TokenType::T_MINUS: {\cf19 case} emthp::TokenType::T_NUMBER: {\cf19 if} (v) \{monomial.set_degree(1); this->_lexer.back();\} {\cf19 return} monomial;\par
00124             {\cf19 case} emthp::TokenType::T_EOF: {\cf19 if} (v) \{monomial.set_degree(1);\} {\cf19 return} monomial;\par
00125         \}\par
00126     \}\par
00127     monomial.set_degree(({\cf18 int}) this->parse_number());\par
00128     {\cf19 return} monomial;\par
00129 \}\par
00134 {\cf18 double} emthp::Parser::parse_number() noexcept \{\par
00135     {\cf18 bool} positive = {\cf17 true};\par
00136     {\cf19 while}({\cf17 true}) \{\par
00137         emthp::Token token = this->_lexer.next();\par
00138         {\cf19 switch}(token.type) \{\par
00139             {\cf19 case} emthp::TokenType::T_MINUS: positive = !positive; {\cf19 break};\par
00140             {\cf19 case} emthp::TokenType::T_NUMBER: {\cf19 return} positive ? token.value : -token.value;\par
00141             {\cf19 case} emthp::TokenType::T_VARIABLE: this->_lexer.back(); {\cf19 return} positive ? 1 : -1;\par
00142             {\cf19 case} emthp::TokenType::T_EOF: {\cf19 return} 0;\par
00143         \}\par
00144     \}\par
00145 \}\par
}
}