{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emath.cpp\par \pard\plain 
{\tc\tcl2 \v test/emath.cpp}
{\xe \v test/emath.cpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00007 {\cf21 #include <cassert>}\par
00008 {\cf21 #include <iostream>}\par
00009 {\cf21 #include "emath.h"}\par
00010 {\cf17 using namespace }emth;\par
00015 {\cf18 int} test_monomial() \{\par
00016     {\cf20 //--------------------------------------}\par
00017     {\cf20 //             CONSTRUCTORS}\par
00018     {\cf20 //--------------------------------------}\par
00019     {\cf20 // Default constructor}\par
00020     Monomial md;\par
00021     assert((md.get_coeff() == 0) && {\cf22 "Error on default Monomial constructor: coeff is not default!"});\par
00022     assert((md.get_degree() == 0) && {\cf22 "Error on default Monomial constructor: degree is not default!"});\par
00023     {\cf20 // Normal constructor}\par
00024     Monomial mn(1, 1);\par
00025     assert((mn.get_coeff() == 1) && {\cf22 "Error on normal Monomial constructor: coeff is not coeff!"});\par
00026     assert((mn.get_degree() == 1) && {\cf22 "Error on normal Monomial constructor: degree is not degree!"});\par
00027     {\cf20 // Copy constructor}\par
00028     Monomial mc(mn);\par
00029     assert((mc.get_coeff() == 1) && {\cf22 "Error on copy Monomial constructor: coeff is not copy coeff!"});\par
00030     assert((mc.get_degree() == 1) && {\cf22 "Error on copy Monomial constructor: degree is not copy degree!"});\par
00031     {\cf20 // Move constructor}\par
00032     Monomial mm(Monomial(2,2));\par
00033     assert((mm.get_coeff() == 2) && {\cf22 "Error on move Monomial constructor: coeff is not move coeff!"});\par
00034     assert((mm.get_degree() == 2) && {\cf22 "Error on move Monomial constructor: degree is not move degree!"});\par
00035     {\cf20 //--------------------------------------}\par
00036     {\cf20 //             ASSIGMENT}\par
00037     {\cf20 //--------------------------------------}\par
00038     {\cf20 // Copy assigment}\par
00039     mc = mm;\par
00040     assert((mc.get_coeff() == 2) && {\cf22 "Error on copy assigment operator: coeff is not copy coeff!"});\par
00041     assert((mc.get_degree() == 2) && {\cf22 "Error on copy assigment operator: degree is not copy degree!"});\par
00042     {\cf20 // Move assigment}\par
00043     mm = Monomial(3, 3);\par
00044     assert((mm.get_coeff() == 3) && {\cf22 "Error on move assigment operator: coeff is not move coeff!"});\par
00045     assert((mm.get_degree() == 3) && {\cf22 "Error on move assigment operator: degree is not move degree!"});\par
00046     {\cf20 //--------------------------------------}\par
00047     {\cf20 //             COMPARISON}\par
00048     {\cf20 //--------------------------------------}\par
00049     {\cf17 const} Monomial m1(1, 1), m2(2, 2);\par
00050     {\cf20 // Equality}\par
00051     assert((m1 == m1) && (m1 == Monomial(1, 1)) && (Monomial(1, 1) == m1) && (Monomial(1, 1) == Monomial(1, 1)) && {\cf22 "Error on equal operator: equal monomials are not diffent!"});\par
00052     assert((m1 != m2) && (m1 != Monomial(2, 2)) && (Monomial(2, 2) != m1) && (Monomial(1, 1) != Monomial(2, 2)) && {\cf22 "Error on equal operator: diffent monomials are not equal!"});\par
00053     {\cf20 // Size}\par
00054     assert((m2 > m1) && (m2 > Monomial(1, 1)) && (Monomial(2, 2) > m1) && (Monomial(2, 2) > Monomial(1, 1)) && {\cf22 "Error on greater monomial operator!"});\par
00055     assert((m1 < m2) && (m1 < Monomial(2, 2)) && (Monomial(1, 1) < m2) && (Monomial(1, 1) < Monomial(2, 2)) && {\cf22 "Error on lesser monomial operator!"});\par
00056     assert((m2 >= m1 && m2 >= m2) && (m2 >= Monomial(1, 1) && m2 >= Monomial(2, 2)) && (Monomial(2, 2) >= m1 && Monomial(2, 2) >= m2) && (Monomial(2, 2) >= Monomial(1, 1) && Monomial(2, 2) >= Monomial(2, 2)) && {\cf22 "Error on greater or equal monomial operator!"});\par
00057     assert((m1 <= m2 && m1 <= m1) && (m1 <= Monomial(2, 2) && m1 <= Monomial(1, 1)) && (Monomial(1, 1) <= m2 && Monomial(1, 1) <= m1) && (Monomial(1, 1) <= Monomial(2, 2) && Monomial(1, 1) >= Monomial(1, 1)) && {\cf22 "Error on lesser or equal monomial operator!"});\par
00058     {\cf20 //--------------------------------------}\par
00059     {\cf20 //             ARITHMETIC}\par
00060     {\cf20 //--------------------------------------}\par
00061     Monomial m3(3, 3), m4(4, 4), mn3(-3, -3), mn4(-4, -4);\par
00062     {\cf20 // Addition}\par
00063     assert(((m3 + m4).get_coeff() == 3) && ((m3 + m4).get_degree() == 3) && {\cf22 "Error on addition operator: different degree monomials addition didnt return default value"});\par
00064     assert(((m3 + m3).get_coeff() == 6) && ((m3 + m3).get_degree() == 3) && ((Monomial(3, 3) + Monomial(3, 3)).get_coeff() == 6) && ((Monomial(3, 3) + Monomial(3, 3)).get_degree() == 3) && {\cf22 "Error on addition operator: positive values addition failed!"});\par
00065     assert(((mn3 + mn3).get_coeff() == -6) && ((mn3 + mn3).get_degree() == -3) && ((Monomial(-3, -3) + Monomial(-3, -3)).get_coeff() == -6) && ((Monomial(-3, -3) + Monomial(-3, -3)).get_degree() == -3) && {\cf22 "Error on addition operator: negative values addition failed!"});\par
00066     {\cf20 // Substraction}\par
00067     assert(((m3 - m4).get_coeff() == 3) && ((m3 - m4).get_degree() == 3) && {\cf22 "Error on substraction operator: different degree monomials substraction didnt return default value"});\par
00068     assert(((m3 - m3).get_coeff() == 0) && ((m3 - m3).get_degree() == 3) && ((Monomial(3, 3) - Monomial(3, 3)).get_coeff() == 0) && ((Monomial(3, 3) - Monomial(3, 3)).get_degree() == 3) && {\cf22 "Error on substraction operator: positive values substraction failed!"});\par
00069     assert(((mn3 - mn3).get_coeff() == 0) && ((mn3 - mn3).get_degree() == -3) && ((Monomial(-3, -3) - Monomial(-3, -3)).get_coeff() == 0) && ((Monomial(-3, -3) - Monomial(-3, -3)).get_degree() == -3) && {\cf22 "Error on substraction operator: negative values substraction failed!"});\par
00070     {\cf20 // Multiplication}\par
00071     assert(((m3 * m4).get_coeff() == 12) && ((m3 * m4).get_degree() == 7) && ((Monomial(3, 3) * Monomial(4, 4)).get_coeff() == 12) && ((Monomial(3, 3) * Monomial(4, 4)).get_degree() == 7) && {\cf22 "Error on multiplication operator: positive values multiplication failed!"});\par
00072     assert(((mn3 * mn4).get_coeff() == 12) && ((mn3 * mn4).get_degree() == -7) && ((Monomial(-3, -3) * Monomial(-4, -4)).get_coeff() == 12) && ((Monomial(-3, -3) * Monomial(-4, -4)).get_degree() == -7) && {\cf22 "Error on multiplication operator: negative values multiplication failed!"});\par
00073     {\cf20 // Division}\par
00074     assert(((m3 / Monomial(0, 0)).get_coeff() == 3) && ((m3 / Monomial(0, 0)).get_degree() == 3) && {\cf22 "Error on division operator: divide by zero didnt return default value"});\par
00075     assert(((m3 / m4).get_coeff() == 0.75) && ((m3 / m4).get_degree() == -1) && ((Monomial(3, 3) / Monomial(4, 4)).get_coeff() == 0.75) && ((Monomial(3, 3) / Monomial(4, 4)).get_degree() == -1) && {\cf22 "Error on division operator: positive values division failed!"});\par
00076     assert(((mn3 / mn4).get_coeff() == 0.75) && ((mn3 / mn4).get_degree() == 1) && ((Monomial(-3, -3) / Monomial(-4, -4)).get_coeff() == 0.75) && ((Monomial(-3, -3) / Monomial(-4, -4)).get_degree() == 1) && {\cf22 "Error on division operator: negative values division failed!"});\par
00077     {\cf20 // Modulus}\par
00078     assert(((m3 % Monomial(0, 0)).get_coeff() == 3) && ((m3 % Monomial(0, 0)).get_degree() == 3) && {\cf22 "Error on modulus operator: divide by zero didnt return default value"});\par
00079     assert(((m4 % m3).get_coeff() == 1) && ((m4 % m3).get_degree() == 1) && ((Monomial(4, 4) % Monomial(3, 3)).get_coeff() == 1) && ((Monomial(4, 4) % Monomial(3, 3)).get_degree() == 1) && {\cf22 "Error on modulus operator: positive values modulus failed!"});\par
00080     assert(((mn4 % mn3).get_coeff() == -1) && ((mn4 % mn3).get_degree() == -1) && ((Monomial(-4, -4) % Monomial(-3, -3)).get_coeff() == -1) && ((Monomial(-4, -4) % Monomial(-3, -3)).get_degree() == -1) && {\cf22 "Error on modulus operator: negative values modulus failed!"});\par
00081     {\cf20 //--------------------------------------}\par
00082     {\cf20 //               STREAM}\par
00083     {\cf20 //--------------------------------------}\par
00084     std::stringstream ss, sss;\par
00085     Monomial m5(5, 5), mn5(-5, -5);\par
00086     assert(((ss << m5).str() == {\cf22 "5x^5"}) && ((sss << mn5).str() == {\cf22 "-5x^-5"}) && {\cf22 "Error on stream operator!"});\par
00087     {\cf20 //--------------------------------------}\par
00088     {\cf20 //                 MISC}\par
00089     {\cf20 //--------------------------------------}\par
00090     {\cf20 // Expression getter}\par
00091     assert((m5.get_expression() == {\cf22 "5x^5"}) && (mn5.get_expression() == {\cf22 "-5x^-5"}) && {\cf22 "Error on expression getter!"});\par
00092     {\cf20 // Value getter}\par
00093     assert((m5.get_value(2) == 160) && (mn5.get_value(2) == -0.15625) && {\cf22 "Error on value getter!"});\par
00094     {\cf20 // Well done!}\par
00095     std::cout << {\cf22 "Monomial tests passed!"} << std::endl;\par
00096     {\cf19 return} 0;\par
00097 \}\par
00102 {\cf18 int} test_polynomial() \{\par
00103     {\cf20 //--------------------------------------}\par
00104     {\cf20 //             CONSTRUCTORS}\par
00105     {\cf20 //--------------------------------------}\par
00106     {\cf20 // Default constructor}\par
00107     Polynomial pd;\par
00108     assert((pd.get_monomials().crbegin()->second.get_coeff() == 0) && {\cf22 "Error on default Polynomial constructor: monomial coeff is not default!"});\par
00109     assert((pd.get_monomials().crbegin()->second.get_degree() == 0) && {\cf22 "Error on default Polynomial constructor: monomial degree is not default!"});\par
00110     {\cf20 // Normal constructor}\par
00111     Polynomial pn(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}\}));\par
00112     assert((pn.get_monomials().crbegin()->second.get_coeff() == 1) && {\cf22 "Error on normal Polynomial constructor: monomial coeff is not coeff!"});\par
00113     assert((pn.get_monomials().crbegin()->second.get_degree() == 1) && {\cf22 "Error on normal Polynomial constructor: monomial degree is not degree!"});\par
00114     assert((pn.get_degree() == 1) && {\cf22 "Error on normal Polynomial constructor: polynomial degree is not degree!"});\par
00115     {\cf20 // List constructor}\par
00116     Polynomial pl(\{Monomial(1, 1), Monomial(2, 2)\});\par
00117     assert((pl.get_monomials().crbegin()->second.get_coeff() == 2) && {\cf22 "Error on list Polynomial constructor: last monomial coeff is not coeff!"});\par
00118     assert((pl.get_monomials().crbegin()->second.get_degree() == 2) && {\cf22 "Error on list Polynomial constructor: last monomial degree is not degree!"});\par
00119     assert((pl.get_monomials().cbegin()->second.get_coeff() == 1) && {\cf22 "Error on list Polynomial constructor: first monomial coeff is not coeff!"});\par
00120     assert((pl.get_monomials().cbegin()->second.get_degree() == 1) && {\cf22 "Error on list Polynomial constructor: first monomial degree is not degree!"});\par
00121     assert((pl.get_degree() == 2) && {\cf22 "Error on list Polynomial constructor: polynomial degree is not degree!"});\par
00122     {\cf20 // Vector constructor}\par
00123     Polynomial pv(std::vector<Monomial>(\{Monomial(1, 1), Monomial(2, 2)\}));\par
00124     assert((pv.get_monomials().crbegin()->second.get_coeff() == 2) && {\cf22 "Error on vector Polynomial constructor: last monomial coeff is not coeff!"});\par
00125     assert((pv.get_monomials().crbegin()->second.get_degree() == 2) && {\cf22 "Error on vector Polynomial constructor: last monomial degree is not degree!"});\par
00126     assert((pv.get_monomials().cbegin()->second.get_coeff() == 1) && {\cf22 "Error on vector Polynomial constructor: first monomial coeff is not coeff!"});\par
00127     assert((pv.get_monomials().cbegin()->second.get_degree() == 1) && {\cf22 "Error on vector Polynomial constructor: first monomial degree is not degree!"});\par
00128     assert((pv.get_degree() == 2) && {\cf22 "Error on vector Polynomial constructor: polynomial degree is not degree!"});\par
00129     {\cf20 // Copy constructor}\par
00130     Polynomial pc(pn);\par
00131     assert((pc.get_monomials().crbegin()->second.get_coeff() == 1) && {\cf22 "Error on copy Polynomial constructor: coeff is not copy coeff!"});\par
00132     assert((pc.get_monomials().crbegin()->second.get_degree() == 1) && {\cf22 "Error on copy Polynomial constructor: degree is not copy degree!"});\par
00133     assert((pc.get_degree() == 1) && {\cf22 "Error on copy Polynomial constructor: polynomial degree is not copy degree!"});\par
00134     {\cf20 // Move constructor}\par
00135     Polynomial pm(Polynomial(std::map<int, Monomial>(\{\{2, Monomial(2, 2)\}\})));\par
00136     assert((pm.get_monomials().crbegin()->second.get_coeff() == 2) && {\cf22 "Error on move Polynomial constructor: coeff is not move coeff!"});\par
00137     assert((pm.get_monomials().crbegin()->second.get_degree() == 2) && {\cf22 "Error on move Polynomial constructor: degree is not move degree!"});\par
00138     assert((pm.get_degree() == 2) && {\cf22 "Error on move Polynomial constructor: polynomial degree is not move degree!"});\par
00139     {\cf20 //--------------------------------------}\par
00140     {\cf20 //             ASSIGMENT}\par
00141     {\cf20 //--------------------------------------}\par
00142     {\cf20 // Copy assigment}\par
00143     pc = pm;\par
00144     assert((pc.get_monomials().crbegin()->second.get_coeff() == 2) && {\cf22 "Error on copy assigment operator: coeff is not copy coeff!"});\par
00145     assert((pc.get_monomials().crbegin()->second.get_degree() == 2) && {\cf22 "Error on copy assigment operator: degree is not copy degree!"});\par
00146     assert((pc.get_degree() == 2) && {\cf22 "Error on copy assigment operator: polynomial degree is not copy degree!"});\par
00147     {\cf20 // Move assigment}\par
00148     pm = Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}\}));\par
00149     assert((pm.get_monomials().crbegin()->second.get_coeff() == 3) && {\cf22 "Error on move assigment operator: coeff is not move coeff!"});\par
00150     assert((pm.get_monomials().crbegin()->second.get_degree() == 3) && {\cf22 "Error on move assigment operator: degree is not move degree!"});\par
00151     assert((pm.get_degree() == 3) && {\cf22 "Error on move assigment operator: polynomial degree is not move degree!"});\par
00152     {\cf20 //--------------------------------------}\par
00153     {\cf20 //             COMPARISON}\par
00154     {\cf20 //--------------------------------------}\par
00155     {\cf17 const} Polynomial p2(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})), p4(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}));\par
00156     {\cf20 // Equality}\par
00157     assert((p2 == p2) && (p2 == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) == p2) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && {\cf22 "Error on equal operator: equal monomials are not diffent!"});\par
00158     assert((p2 != p4) && (p2 != Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) != p2) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) != Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && {\cf22 "Error on equal operator: diffent monomials are not equal!"});\par
00159     {\cf20 // Size}\par
00160     assert((p4 > p2) && (p4 > Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) > p2) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) > Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && {\cf22 "Error on greater monomial operator!"});\par
00161     assert((p2 < p4) && (p2 < Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) < p4) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) < Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && {\cf22 "Error on lesser monomial operator!"});\par
00162     assert((p4 >= p2 && p4 >= p4) && (p4 >= Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) && p4 >= Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) >= p2 && Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) >= p4) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) >= Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) && Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) >= Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && {\cf22 "Error on greater or equal monomial operator!"});\par
00163     assert((p2 <= p4 && p2 <= p2) && (p2 <= Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) && p2 <= Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) <= p4 && Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) <= p2) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) <= Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) && Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) >= Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && {\cf22 "Error on lesser or equal monomial operator!"});\par
00164     {\cf20 //--------------------------------------}\par
00165     {\cf20 //             ARITHMETIC}\par
00166     {\cf20 //--------------------------------------}\par
00167     Polynomial pn1(std::map<int, Monomial>(\{\{1, Monomial(2, 1)\}, \{2, Monomial(2, 2)\}\})), pn3(std::map<int, Monomial>(\{\{1, Monomial(2, 1)\}, \{3, Monomial(3, 3)\}\}));\par
00168     {\cf20 // Addition}\par
00169     assert(pn1 + pn3 == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(4, 1)\}, \{2, Monomial(2, 2)\}, \{3, Monomial(3, 3)\}\})) && {\cf22 "Error on addition operator: wrong results"});\par
00170     {\cf20 // Substraction}\par
00171     assert(pn1 - pn3 == Polynomial(std::map<int, Monomial>(\{\{2, Monomial(2, 2)\}, \{3, Monomial(-3, 3)\}\})) && {\cf22 "Error on substraction operator: wrong results"});\par
00172     {\cf20 // Multiplication}\par
00173     assert(pn1 * pn3 == Polynomial(std::map<int, Monomial>(\{\{2, Monomial(4, 2)\}, \{3, Monomial(4, 3)\}, \{4, Monomial(6, 4)\}, \{5, Monomial(6, 5)\}\})) && {\cf22 "Error on multiplication operator: wrong results"});\par
00174     {\cf20 // Division}\par
00175     assert(pn3 / pn1 == Polynomial(std::map<int, Monomial>(\{\{0, Monomial(-1.5, 0)\}, \{1, Monomial(1.5, 1)\}\})) && {\cf22 "Error on division operator: wrong results"});\par
00176     {\cf20 // Modulus}\par
00177     assert(pn3 % pn1 == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(5, 1)\}\})) && {\cf22 "Error on modulus operator: wrong results"});\par
00178     {\cf20 //--------------------------------------}\par
00179     {\cf20 //               STREAM}\par
00180     {\cf20 //--------------------------------------}\par
00181     std::stringstream ss;\par
00182     {\cf17 const} Polynomial ps(std::map<int, Monomial>(\{\{0, Monomial(1, 0)\}, \{1, Monomial(1, 1)\}, \{2, Monomial(1, 2)\}\}));\par
00183     assert(((ss << ps).str() == {\cf22 "1x^2 1x^1 1x^0 "}) && {\cf22 "Error on stream operator!"}); {\cf20 //"x^2 + x + 1"}\par
00184     {\cf20 //--------------------------------------}\par
00185     {\cf20 //                 MISC}\par
00186     {\cf20 //--------------------------------------}\par
00187     {\cf20 // Expression getter}\par
00188     assert((ps.get_expression() == {\cf22 "1x^2 1x^1 1x^0 "}) && {\cf22 "Error on expression getter!"});\par
00189     {\cf20 // Value getter}\par
00190     assert((ps.get_value(1) == 3) && (ps.get_value(2) == 7) && {\cf22 "Error on value getter!"});\par
00191     {\cf20 //--------------------------------------}\par
00192     {\cf20 //               CALCULUS}\par
00193     {\cf20 //--------------------------------------}\par
00194     {\cf20 // Derivative getter}\par
00195     assert((ps.get_derivative() == Polynomial(std::map<int, Monomial>(\{\{0, Monomial(1, 0)\}, \{1, Monomial(2, 1)\}\}))) && {\cf22 "Error on derivative getter!"});\par
00196     {\cf20 // Integral getter}\par
00197     assert((ps.get_integral() == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(0.5, 2)\}, \{3, Monomial(1.0/3.0, 3)\}\}))) && {\cf22 "Error on integral getter!"});\par
00198     {\cf20 // Well done!}\par
00199     std::cout << {\cf22 "Polynomial tests passed!"} << std::endl;\par
00200     {\cf19 return} 0;\par
00201 \}\par
00206 {\cf18 int} main() \{{\cf19 return} test_monomial() + test_polynomial();\}\par
}
}