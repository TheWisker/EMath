{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment EMath++ }EMath++}
{\comment Generated by doxygen 1.9.6.}
{\creatim \yr2023\mo1\dy29\hr18\min52\sec38}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt EMath++}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Sun Jan 29 2023 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
EMath++ Project\par \pard\plain 
{\tc \v EMath++ Project}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Introduction
\par}
{\tc\tcl2 \v Introduction}
This is a project that aims to provide some wrapper classes for algebraic mathematical concepts.\par
At the moment it includes the Monomial and Polynomial classes for general calculus. The library is currently in expansion.\par
Any feedback is much appreciated!\par}
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Installation
\par}
{\tc\tcl2 \v Installation}
The project comes with a folder with some bash files that complete some Meson related tasks.\par
All bash files must be executed from the project's root directory to work properly.\par
To install the project, there is only need to execute two of them files.\par
Once installed just include the {\b emath.h} header file in your code and link it with its implementation.\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Step one: Setup the Project
\par}
{\tc\tcl3 \v Step one: Setup the Project}
To setup the Meson project run the setup.sh bash file: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bash ./scripts/setup.sh\par
}
\par}
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Step two: Install the Library
\par}
{\tc\tcl3 \v Step two: Install the Library}
To install the emath library run the install.sh bash file:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bash ./scripts/install.sh\par
}
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Note\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
You will need a privileged user's credentials\par
}}\par}
\par}
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Testing
\par}
{\tc\tcl2 \v Testing}
The project comes with some test files located in the test folder.\par
To test that the library code works properly run the following bash file: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bash ./scripts/test.sh\par
}
 \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all documented namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b emth} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Englobes all the classes and functions of the emath library })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b emth::Arithmetic} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class with some functions for arithmetic math })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b emth::Monomial} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating monomials })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b emth::Polynomial} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating polynomials })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all documented files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b include/{\b emath.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the main header file for the emath library })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b emath.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the main source file for the mathematical equation operations })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/{\b emath.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the main test file of the emath library. It contains all the tests needed to assure that the library works properly })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emth Namespace Reference\par \pard\plain 
{\tc\tcl2 \v emth}
{\xe \v emth}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Englobes all the classes and functions of the emath library. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Arithmetic}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class with some functions for arithmetic math. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Monomial}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating monomials. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Polynomial}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating polynomials. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Englobes all the classes and functions of the emath library. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The emth namespace contains three classes: {\b Arithmetic}, {\b Monomial} and {\b Polynomial}. The first contains functions for arithmetic operations. The last two are wrappers on abstract algebraic concepts. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emth::Arithmetic Class Reference\par \pard\plain 
{\tc\tcl2 \v emth::Arithmetic}
{\xe \v emth::Arithmetic}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class with some functions for arithmetic math. }}\par
{
{\f2 #include <emath.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b get_divisors} (int n, std::vector< int > &v) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the all the positive divisors for an integer. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class with some functions for arithmetic math. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The class consists of the functions that operate with real numbers. \par
}{
Definition at line {\b 67} of file {\b emath.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v get_divisors\:emth::Arithmetic}
{\xe \v emth::Arithmetic\:get_divisors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void emth::Arithmetic::get_divisors (int  {\i n}, std::vector< int > &  {\i v}){\f2 [static]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Gets the all the positive divisors for an integer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i n} \cell }{The integer to get the divisors for. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i v} \cell }{The vector reference where to store the divisors. \cell }
{\row }
}
}{
Definition at line {\b 15} of file {\b emath.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
include/{\b emath.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b emath.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emth::Monomial Class Reference\par \pard\plain 
{\tc\tcl2 \v emth::Monomial}
{\xe \v emth::Monomial}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating monomials. }}\par
{
{\f2 #include <emath.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} () noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default constructor for when initialized with no arguments. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} (const double cf, const int dgr) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Normal constructor for initialization with coeff and degree. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} (const {\b Monomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy constructor for when initialized with an lvalue {\b Monomial} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} ({\b Monomial} &&ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Move constructor for when initialized with an rvalue {\b Monomial} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} & {\b operator=} (const {\b Monomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assigment operator overload for when called with an lvalue. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} & {\b operator=} ({\b Monomial} &&ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Move assigment operator overload for when called with an rvalue. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator==} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Equal logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator!=} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Not equal logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator>} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Greater than logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less than logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator>=} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Greater or equal than logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<=} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less or equal than logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} {\b operator+} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Addition operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} {\b operator-} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substraction operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} {\b operator*} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplication operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} {\b operator/} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Division operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} {\b operator%} (const {\b Monomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Modulus operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} & {\b operator+=} (const {\b Monomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Addition assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} & {\b operator-=} (const {\b Monomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substraction assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} & {\b operator*=} (const {\b Monomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplication assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} & {\b operator/=} (const {\b Monomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Division assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Monomial} & {\b operator%=} (const {\b Monomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Modulus assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_degree} () const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the degree of the {\b Monomial}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b get_coeff} () const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the coefficient of the {\b Monomial}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_expression} () const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the expression of the {\b Monomial}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b get_value} (const double &x) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculus function for getting the value of the {\b Monomial} at a point. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ~Monomial} (){\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The class destructor. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::stringstream & {\b operator<<} (std::stringstream &ss, const {\b Monomial} &m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A friend operator to insert the {\b Monomial} into a std::stringstream. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::ostream & {\b operator<<} (std::ostream &out, const {\b Monomial} &m)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A friend operator to insert the {\b Monomial} into a std::ostream. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating monomials. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The class consists of the constructors, the operators, the getters, the properties and some private functions. \par
}{
Definition at line {\b 81} of file {\b emath.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Monomial\:emth::Monomial}
{\xe \v emth::Monomial\:Monomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Monomial::Monomial (){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default constructor for when initialized with no arguments. }}\par
{
Definition at line {\b 30} of file {\b emath.cpp}.}\par
}
{\xe \v Monomial\:emth::Monomial}
{\xe \v emth::Monomial\:Monomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Monomial::Monomial (const double  {\i cf}, const int  {\i dgr}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Normal constructor for initialization with coeff and degree. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cf} \cell }{The coefficient as a double. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i dgr} \cell }{The degree as a integer. \cell }
{\row }
}
}{
Definition at line {\b 36} of file {\b emath.cpp}.}\par
}
{\xe \v Monomial\:emth::Monomial}
{\xe \v emth::Monomial\:Monomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Monomial::Monomial (const {\b Monomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy constructor for when initialized with an lvalue {\b Monomial} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The lvalue {\b Monomial} object. \cell }
{\row }
}
}{
Definition at line {\b 41} of file {\b emath.cpp}.}\par
}
{\xe \v Monomial\:emth::Monomial}
{\xe \v emth::Monomial\:Monomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Monomial::Monomial ({\b Monomial} &&  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Move constructor for when initialized with an rvalue {\b Monomial} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The rvalue {\b Monomial} object. \cell }
{\row }
}
}{
Definition at line {\b 46} of file {\b emath.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v get_coeff\:emth::Monomial}
{\xe \v emth::Monomial\:get_coeff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double emth::Monomial::get_coeff () const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the coefficient of the {\b Monomial}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(double) The coefficient of the {\b Monomial}. \par
}}}{
Definition at line {\b 212} of file {\b emath.cpp}.}\par
}
{\xe \v get_degree\:emth::Monomial}
{\xe \v emth::Monomial\:get_degree}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int emth::Monomial::get_degree () const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the degree of the {\b Monomial}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(int) The degree of the {\b Monomial}. \par
}}}{
Definition at line {\b 207} of file {\b emath.cpp}.}\par
}
{\xe \v get_expression\:emth::Monomial}
{\xe \v emth::Monomial\:get_expression}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string emth::Monomial::get_expression () const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the expression of the {\b Monomial}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(std::string) The expression of the {\b Monomial}. \par
}}}{
Definition at line {\b 217} of file {\b emath.cpp}.}\par
}
{\xe \v get_value\:emth::Monomial}
{\xe \v emth::Monomial\:get_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double emth::Monomial::get_value (const double &  {\i x}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculus function for getting the value of the {\b Monomial} at a point. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{The point to evaluate. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(double) The result of the evaluation of the {\b Monomial}. \par
}}}{
Definition at line {\b 223} of file {\b emath.cpp}.}\par
}
{\xe \v operator!=\:emth::Monomial}
{\xe \v emth::Monomial\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Monomial::operator!= (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Not equal logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If {\b Monomial} objects coefficients and degrees dont match. \par
(false) If {\b Monomial} objects coefficients and degrees match. \par
}}}{
Definition at line {\b 72} of file {\b emath.cpp}.}\par
}
{\xe \v operator%\:emth::Monomial}
{\xe \v emth::Monomial\:operator%}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} emth::Monomial::operator% (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Modulus operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to divide by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}) A brand new {\b Monomial} that represents the result. \par
}}}{
Definition at line {\b 130} of file {\b emath.cpp}.}\par
}
{\xe \v operator%=\:emth::Monomial}
{\xe \v emth::Monomial\:operator%=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} & emth::Monomial::operator%= (const {\b Monomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Modulus assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to divide by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 182} of file {\b emath.cpp}.}\par
}
{\xe \v operator*\:emth::Monomial}
{\xe \v emth::Monomial\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} emth::Monomial::operator* (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplication operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to multiply by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}) A brand new {\b Monomial} that represents the result. \par
}}}{
Definition at line {\b 118} of file {\b emath.cpp}.}\par
}
{\xe \v operator*=\:emth::Monomial}
{\xe \v emth::Monomial\:operator*=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} & emth::Monomial::operator*= (const {\b Monomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplication assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to multiply by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 160} of file {\b emath.cpp}.}\par
}
{\xe \v operator+\:emth::Monomial}
{\xe \v emth::Monomial\:operator+}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} emth::Monomial::operator+ (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Addition operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to add. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}) A brand new {\b Monomial} that represents the result. \par
}}}{
Definition at line {\b 106} of file {\b emath.cpp}.}\par
}
{\xe \v operator+=\:emth::Monomial}
{\xe \v emth::Monomial\:operator+=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} & emth::Monomial::operator+= (const {\b Monomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Addition assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to add. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 136} of file {\b emath.cpp}.}\par
}
{\xe \v operator-\:emth::Monomial}
{\xe \v emth::Monomial\:operator-}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} emth::Monomial::operator- (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substraction operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to substract by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}) A brand new {\b Monomial} that represents the result. \par
}}}{
Definition at line {\b 112} of file {\b emath.cpp}.}\par
}
{\xe \v operator-=\:emth::Monomial}
{\xe \v emth::Monomial\:operator-=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} & emth::Monomial::operator-= (const {\b Monomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substraction assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to substract by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 148} of file {\b emath.cpp}.}\par
}
{\xe \v operator/\:emth::Monomial}
{\xe \v emth::Monomial\:operator/}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} emth::Monomial::operator/ (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Division operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to divide by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}) A brand new {\b Monomial} that represents the result. \par
}}}{
Definition at line {\b 124} of file {\b emath.cpp}.}\par
}
{\xe \v operator/=\:emth::Monomial}
{\xe \v emth::Monomial\:operator/=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} & emth::Monomial::operator/= (const {\b Monomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Division assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to divide by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 170} of file {\b emath.cpp}.}\par
}
{\xe \v operator<\:emth::Monomial}
{\xe \v emth::Monomial\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Monomial::operator< (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less than logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If the {\b Monomial} object degree is less than the degree of the passed {\b Monomial}. \par
(false) If the {\b Monomial} object degree is equal or greater than the degree of the passed {\b Monomial}. \par
}}}{
Definition at line {\b 86} of file {\b emath.cpp}.}\par
}
{\xe \v operator<=\:emth::Monomial}
{\xe \v emth::Monomial\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Monomial::operator<= (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less or equal than logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If the {\b Monomial} object degree is less or equal than the degree of the passed {\b Monomial}. \par
(false) If the {\b Monomial} object degree is greater than the degree of the passed {\b Monomial}. \par
}}}{
Definition at line {\b 100} of file {\b emath.cpp}.}\par
}
{\xe \v operator=\:emth::Monomial}
{\xe \v emth::Monomial\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} & emth::Monomial::operator= (const {\b Monomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assigment operator overload for when called with an lvalue. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The lvalue {\b Monomial} object. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}&) A reference to the lvalue of the operation \par
}}}{
Definition at line {\b 52} of file {\b emath.cpp}.}\par
}
{\xe \v operator=\:emth::Monomial}
{\xe \v emth::Monomial\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Monomial} & emth::Monomial::operator= ({\b emth::Monomial} &&  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Move assigment operator overload for when called with an rvalue. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The rvalue {\b Monomial} object. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Monomial}&) A reference to the lvalue of the operation \par
}}}{
Definition at line {\b 58} of file {\b emath.cpp}.}\par
}
{\xe \v operator==\:emth::Monomial}
{\xe \v emth::Monomial\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Monomial::operator== (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Equal logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If {\b Monomial} objects coefficients and degrees match. \par
(false) If {\b Monomial} objects coefficients and degrees dont match. \par
}}}{
Definition at line {\b 65} of file {\b emath.cpp}.}\par
}
{\xe \v operator>\:emth::Monomial}
{\xe \v emth::Monomial\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Monomial::operator> (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Greater than logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If the {\b Monomial} object degree is greater than the degree of the passed {\b Monomial}. \par
(false) If the {\b Monomial} object degree is equal or less than the degree of the passed {\b Monomial}. \par
}}}{
Definition at line {\b 79} of file {\b emath.cpp}.}\par
}
{\xe \v operator>=\:emth::Monomial}
{\xe \v emth::Monomial\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Monomial::operator>= (const {\b Monomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Greater or equal than logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Monomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If the {\b Monomial} object degree is greater or equal than the degree of the passed {\b Monomial}. \par
(false) If the {\b Monomial} object degree is less than the degree of the passed {\b Monomial}. \par
}}}{
Definition at line {\b 93} of file {\b emath.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Function Documentation\par
\pard\plain 
{\xe \v operator<<\:emth::Monomial}
{\xe \v emth::Monomial\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::ostream & operator<< (std::ostream &  {\i out}, const {\b Monomial} &  {\i m}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A friend operator to insert the {\b Monomial} into a std::ostream. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i out} \cell }{The std::ostream. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{The {\b Monomial} object to insert. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(std::ostream&) A reference to the std::ostream. \par
}}}}
{\xe \v operator<<\:emth::Monomial}
{\xe \v emth::Monomial\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::stringstream & operator<< (std::stringstream &  {\i ss}, const {\b Monomial} &  {\i m}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A friend operator to insert the {\b Monomial} into a std::stringstream. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ss} \cell }{The std::stringstream. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{The {\b Monomial} object to insert. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(std::stringstream&) A reference to the std::stringstream. \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
include/{\b emath.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b emath.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emth::Polynomial Class Reference\par \pard\plain 
{\tc\tcl2 \v emth::Polynomial}
{\xe \v emth::Polynomial}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating polynomials. }}\par
{
{\f2 #include <emath.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} () noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default constructor for when initialized with no arguments. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} (const std::map< int, {\b Monomial} > mns) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Normal constructor for initialization with a std::map<int, Monomial> }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} (const std::initializer_list< {\b Monomial} > mns) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
List constructor for initialization with a std::initializer_list<Monomial> }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} (const std::vector< {\b Monomial} > mns) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Vector constructor for initialization with a std::vector<Monomial> }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} (const {\b Polynomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy constructor for when initialized with an lvalue {\b Polynomial} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} ({\b Polynomial} &&ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Move constructor for when initialized with an rvalue {\b Polynomial} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} & {\b operator=} (const {\b Polynomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assigment operator overload for when called with an lvalue. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} & {\b operator=} ({\b Polynomial} &&ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Move assigment operator overload for when called with an rvalue. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator==} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Equal logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator!=} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Not equal logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator>} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Greater than logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less than logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator>=} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Greater or equal than logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<=} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less or equal than logic operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} {\b operator+} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Addition operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} {\b operator-} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substraction operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} {\b operator*} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplication operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} {\b operator/} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Division operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} {\b operator%} (const {\b Polynomial} &ogn) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Modulus operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} & {\b operator+=} (const {\b Polynomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Addition assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} & {\b operator-=} (const {\b Polynomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substraction assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} & {\b operator*=} (const {\b Polynomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplication assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} & {\b operator/=} (const {\b Polynomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Division assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} & {\b operator%=} (const {\b Polynomial} &ogn) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Modulus assigment operator overload. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_degree} () const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the degree of the {\b Polynomial}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::map< int, {\b Monomial} > {\b get_monomials} () const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the monomials of the {\b Polynomial}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_expression} () const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the expression of the {\b Polynomial}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b get_value} (const double &x) const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculus function for getting the value of the {\b Polynomial} at a point. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} {\b get_derivative} () const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculus function for getting the derivative of the {\b Polynomial}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Polynomial} {\b get_integral} () const noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculus function for getting the integral of the {\b Polynomial}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ~Polynomial} (){\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The class destructor. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::stringstream & {\b operator<<} (std::stringstream &ss, const {\b Polynomial} &p) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A friend operator to insert the {\b Polynomial} into a std::stringstream. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::ostream & {\b operator<<} (std::ostream &out, const {\b Polynomial} &p) noexcept\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A friend operator to insert the {\b Polynomial} into a std::ostream. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating polynomials. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The class consists of the constructors, the operators, the getters, the properties and some private functions. \par
}{
Definition at line {\b 276} of file {\b emath.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Polynomial\:emth::Polynomial}
{\xe \v emth::Polynomial\:Polynomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Polynomial::Polynomial (){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Default constructor for when initialized with no arguments. }}\par
{
Definition at line {\b 240} of file {\b emath.cpp}.}\par
}
{\xe \v Polynomial\:emth::Polynomial}
{\xe \v emth::Polynomial\:Polynomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Polynomial::Polynomial (const std::map< int, {\b Monomial} >  {\i mns}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Normal constructor for initialization with a std::map<int, Monomial> }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mns} \cell }{The std::map<int, Monomial>. \cell }
{\row }
}
}}
{\xe \v Polynomial\:emth::Polynomial}
{\xe \v emth::Polynomial\:Polynomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Polynomial::Polynomial (const std::initializer_list< {\b Monomial} >  {\i mns}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
List constructor for initialization with a std::initializer_list<Monomial> }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mns} \cell }{The std::initializer_list<Monomial>. \cell }
{\row }
}
}}
{\xe \v Polynomial\:emth::Polynomial}
{\xe \v emth::Polynomial\:Polynomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Polynomial::Polynomial (const std::vector< {\b Monomial} >  {\i mns}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Vector constructor for initialization with a std::vector<Monomial> }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i mns} \cell }{The std::vector<Monomial>. \cell }
{\row }
}
}}
{\xe \v Polynomial\:emth::Polynomial}
{\xe \v emth::Polynomial\:Polynomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Polynomial::Polynomial (const {\b Polynomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copy constructor for when initialized with an lvalue {\b Polynomial} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The lvalue {\b Polynomial} object. \cell }
{\row }
}
}{
Definition at line {\b 260} of file {\b emath.cpp}.}\par
}
{\xe \v Polynomial\:emth::Polynomial}
{\xe \v emth::Polynomial\:Polynomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
emth::Polynomial::Polynomial ({\b emth::Polynomial} &&  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Move constructor for when initialized with an rvalue {\b Polynomial} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The rvalue {\b Polynomial} object. \cell }
{\row }
}
}{
Definition at line {\b 265} of file {\b emath.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v get_degree\:emth::Polynomial}
{\xe \v emth::Polynomial\:get_degree}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int emth::Polynomial::get_degree () const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the degree of the {\b Polynomial}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(int) The degree of the {\b Polynomial}. \par
}}}{
Definition at line {\b 438} of file {\b emath.cpp}.}\par
}
{\xe \v get_derivative\:emth::Polynomial}
{\xe \v emth::Polynomial\:get_derivative}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} emth::Polynomial::get_derivative () const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculus function for getting the derivative of the {\b Polynomial}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}) The result of the derivative of the {\b Polynomial}. \par
}}}{
Definition at line {\b 463} of file {\b emath.cpp}.}\par
}
{\xe \v get_expression\:emth::Polynomial}
{\xe \v emth::Polynomial\:get_expression}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string emth::Polynomial::get_expression () const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the expression of the {\b Polynomial}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(std::string) The expression of the {\b Polynomial}. \par
}}}{
Definition at line {\b 448} of file {\b emath.cpp}.}\par
}
{\xe \v get_integral\:emth::Polynomial}
{\xe \v emth::Polynomial\:get_integral}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} emth::Polynomial::get_integral () const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculus function for getting the integral of the {\b Polynomial}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}) The result of the integral of the {\b Polynomial}. \par
}}}{
Definition at line {\b 474} of file {\b emath.cpp}.}\par
}
{\xe \v get_monomials\:emth::Polynomial}
{\xe \v emth::Polynomial\:get_monomials}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::map< int, {\b emth::Monomial} > emth::Polynomial::get_monomials () const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter function for getting the monomials of the {\b Polynomial}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(std::map<int, Monomial>) The monomials of the {\b Polynomial}. \par
}}}{
Definition at line {\b 443} of file {\b emath.cpp}.}\par
}
{\xe \v get_value\:emth::Polynomial}
{\xe \v emth::Polynomial\:get_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double emth::Polynomial::get_value (const double &  {\i x}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calculus function for getting the value of the {\b Polynomial} at a point. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{The point to evaluate. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(double) The result of the evaluation of the {\b Polynomial}. \par
}}}{
Definition at line {\b 454} of file {\b emath.cpp}.}\par
}
{\xe \v operator!=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Polynomial::operator!= (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Not equal logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If {\b Polynomial} objects degrees and monomials dont match. \par
(false) If {\b Polynomial} objects degrees and monomials match. \par
}}}{
Definition at line {\b 291} of file {\b emath.cpp}.}\par
}
{\xe \v operator%\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator%}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} emth::Polynomial::operator% (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Modulus operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to divide by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}) A brand new {\b Polynomial} that represents the result. \par
}}}{
Definition at line {\b 349} of file {\b emath.cpp}.}\par
}
{\xe \v operator%=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator%=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} & emth::Polynomial::operator%= (const {\b Polynomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Modulus assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to divide by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 405} of file {\b emath.cpp}.}\par
}
{\xe \v operator*\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} emth::Polynomial::operator* (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplication operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to multiply by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}) A brand new {\b Polynomial} that represents the result. \par
}}}{
Definition at line {\b 337} of file {\b emath.cpp}.}\par
}
{\xe \v operator*=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator*=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} & emth::Polynomial::operator*= (const {\b Polynomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplication assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to multiply by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 373} of file {\b emath.cpp}.}\par
}
{\xe \v operator+\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator+}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} emth::Polynomial::operator+ (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Addition operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to add. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}) A brand new {\b Polynomial} that represents the result. \par
}}}{
Definition at line {\b 325} of file {\b emath.cpp}.}\par
}
{\xe \v operator+=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator+=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} & emth::Polynomial::operator+= (const {\b Polynomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Addition assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to add. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 355} of file {\b emath.cpp}.}\par
}
{\xe \v operator-\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator-}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} emth::Polynomial::operator- (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substraction operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to substract by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}) A brand new {\b Polynomial} that represents the result. \par
}}}{
Definition at line {\b 331} of file {\b emath.cpp}.}\par
}
{\xe \v operator-=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator-=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} & emth::Polynomial::operator-= (const {\b Polynomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Substraction assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to substract by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 364} of file {\b emath.cpp}.}\par
}
{\xe \v operator/\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator/}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} emth::Polynomial::operator/ (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Division operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to divide by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}) A brand new {\b Polynomial} that represents the result. \par
}}}{
Definition at line {\b 343} of file {\b emath.cpp}.}\par
}
{\xe \v operator/=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator/=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} & emth::Polynomial::operator/= (const {\b Polynomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Division assigment operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to divide by. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}&) A reference to the lvalue of the operation. \par
}}}{
Definition at line {\b 388} of file {\b emath.cpp}.}\par
{
\ql
References {\b emth::Monomial::get_degree()}.}\par
}
{\xe \v operator<\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Polynomial::operator< (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less than logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If the {\b Polynomial} object degree is less than the degree of the passed {\b Polynomial}. \par
(false) If the {\b Polynomial} object degree is equal or greater than the degree of the passed {\b Polynomial}. \par
}}}{
Definition at line {\b 305} of file {\b emath.cpp}.}\par
}
{\xe \v operator<=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Polynomial::operator<= (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less or equal than logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If the {\b Polynomial} object degree is less or equal than the degree of the passed {\b Polynomial}. \par
(false) If the {\b Polynomial} object degree is greater than the degree of the passed {\b Polynomial}. \par
}}}{
Definition at line {\b 319} of file {\b emath.cpp}.}\par
}
{\xe \v operator=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} & emth::Polynomial::operator= (const {\b Polynomial} &  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Assigment operator overload for when called with an lvalue. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The lvalue {\b Polynomial} object. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}&) A reference to the lvalue of the operation \par
}}}{
Definition at line {\b 271} of file {\b emath.cpp}.}\par
}
{\xe \v operator=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b emth::Polynomial} & emth::Polynomial::operator= ({\b emth::Polynomial} &&  {\i ogn}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Move assigment operator overload for when called with an rvalue. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The rvalue {\b Polynomial} object. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
({\b Polynomial}&) A reference to the lvalue of the operation \par
}}}{
Definition at line {\b 277} of file {\b emath.cpp}.}\par
}
{\xe \v operator==\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Polynomial::operator== (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Equal logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If {\b Polynomial} objects degrees and monomials match. \par
(false) If {\b Polynomial} objects degrees and monomials dont match. \par
}}}{
Definition at line {\b 284} of file {\b emath.cpp}.}\par
}
{\xe \v operator>\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Polynomial::operator> (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Greater than logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If the {\b Polynomial} object degree is greater than the degree of the passed {\b Polynomial}. \par
(false) If the {\b Polynomial} object degree is equal or less than the degree of the passed {\b Polynomial}. \par
}}}{
Definition at line {\b 298} of file {\b emath.cpp}.}\par
}
{\xe \v operator>=\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool emth::Polynomial::operator>= (const {\b Polynomial} &  {\i ogn}) const{\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Greater or equal than logic operator overload. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ogn} \cell }{The {\b Polynomial} object to compare to. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(true) If the {\b Polynomial} object degree is greater or equal than the degree of the passed {\b Polynomial}. \par
(false) If the {\b Polynomial} object degree is less than the degree of the passed {\b Polynomial}. \par
}}}{
Definition at line {\b 312} of file {\b emath.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Function Documentation\par
\pard\plain 
{\xe \v operator<<\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::ostream & operator<< (std::ostream &  {\i out}, const {\b Polynomial} &  {\i p}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A friend operator to insert the {\b Polynomial} into a std::ostream. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i out} \cell }{The std::ostream. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{The {\b Polynomial} object to insert. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(std::ostream&) A reference to the std::ostream. \par
}}}}
{\xe \v operator<<\:emth::Polynomial}
{\xe \v emth::Polynomial\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::stringstream & operator<< (std::stringstream &  {\i ss}, const {\b Polynomial} &  {\i p}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A friend operator to insert the {\b Polynomial} into a std::stringstream. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ss} \cell }{The std::stringstream. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i m} \cell }{The {\b Polynomial} object to insert. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(std::stringstream&) A reference to the std::stringstream. \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
include/{\b emath.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b emath.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
include/emath.h File Reference\par \pard\plain 
{\tc\tcl2 \v include/emath.h}
{\xe \v include/emath.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the main header file for the emath library. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <map>}\par
{\f2 #include <cmath>}\par
{\f2 #include <complex>}\par
{\f2 #include <vector>}\par
{\f2 #include <string>}\par
{\f2 #include <set.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for emath.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "emath_8h__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "emath_8h__dep__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b emth::Arithmetic}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class with some functions for arithmetic math. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b emth::Monomial}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating monomials. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b emth::Polynomial}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for representing and operating polynomials. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b emth}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Englobes all the classes and functions of the emath library. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the main header file for the emath library. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This file declares the functions of the emath library.\par
It consists of two classes, the Monomial class and the Polynomial class.\par
The Monomial class declares all the functions, operators, and properties for representing and operating monomials.\par
The Polynomial class declares all the functions, operators, and properties for representing and operating polynomials.\par
}{
Definition in file {\b emath.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emath.h\par \pard\plain 
{\tc\tcl2 \v include/emath.h}
{\xe \v include/emath.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00050 {\cf21 #include <map>}\par
00051 {\cf21 #include <cmath>}\par
00052 {\cf21 #include <complex>}\par
00053 {\cf21 #include <vector>}\par
00054 {\cf21 #include <string>}\par
00055 {\cf21 #include <set.h>}\par
00061 {\cf17 namespace }emth \{\par
00067     {\cf17 class }Arithmetic \{\par
00068         {\cf17 public}:\par
00074             {\cf17 static} {\cf18 void} get_divisors({\cf18 int} n, std::vector<int>& v) {\cf17 noexcept};\par
00075     \};\par
00081     {\cf17 class }Monomial \{\par
00082         {\cf17 public}:\par
00086             Monomial() {\cf17 noexcept}; {\cf20 //Default constructor}\par
00092 {\cf20 }            Monomial({\cf17 const} {\cf18 double} cf, {\cf17 const} {\cf18 int} dgr) {\cf17 noexcept}; {\cf20 //Constructor}\par
00097 {\cf20 }            Monomial({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Copy constructor}\par
00102 {\cf20 }            Monomial(Monomial&& ogn) {\cf17 noexcept}; {\cf20 //Move constructor}\par
00108 {\cf20 }            Monomial& operator =({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Assigment operator}\par
00114 {\cf20 }            Monomial& operator =(Monomial&& ogn) {\cf17 noexcept}; {\cf20 //Move assigment operator}\par
00121 {\cf20 }            {\cf18 bool} operator ==({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Equal logic operator}\par
00128 {\cf20 }            {\cf18 bool} operator !=({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Not Equal logic operator}\par
00135 {\cf20 }            {\cf18 bool} operator >({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Greater than logic operator}\par
00142 {\cf20 }            {\cf18 bool} operator <({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Less than logic operator}\par
00149 {\cf20 }            {\cf18 bool} operator >=({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Greater or Equal than logic operator}\par
00156 {\cf20 }            {\cf18 bool} operator <=({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Less or Equal than logic operator}\par
00162 {\cf20 }            Monomial operator +({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Addition operator}\par
00168 {\cf20 }            Monomial operator -({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Substraction operator}\par
00174 {\cf20 }            Monomial operator *({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Multiplication operator}\par
00180 {\cf20 }            Monomial operator /({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Division operator}\par
00186 {\cf20 }            Monomial operator %({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Modulus operator}\par
00192 {\cf20 }            Monomial& operator +=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Addition assigment operator}\par
00198 {\cf20 }            Monomial& operator -=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Substraction assigment operator}\par
00204 {\cf20 }            Monomial& operator *=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Multiplication assigment operator}\par
00210 {\cf20 }            Monomial& operator /=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Division assigment operator}\par
00216 {\cf20 }            Monomial& operator %=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Modulus assigment operator}\par
00223 {\cf20 }            {\cf17 friend} std::stringstream& operator<<(std::stringstream& ss, {\cf17 const} Monomial& m); {\cf20 //Stream operator}\par
00230 {\cf20 }            {\cf17 friend} std::ostream& operator<<(std::ostream& out, {\cf17 const} Monomial& m); {\cf20 //Stream operator}\par
00235 {\cf20 }            {\cf18 int} get_degree() const noexcept; {\cf20 //Degree getter}\par
00240 {\cf20 }            {\cf18 double} get_coeff() const noexcept; {\cf20 //Coefficient getter}\par
00245 {\cf20 }            std::{\cf18 string} get_expression() const noexcept; {\cf20 //String expression getter}\par
00251 {\cf20 }            {\cf18 double} get_value(const {\cf18 double}& x) const noexcept; {\cf20 //Value for x getter}\par
00255 {\cf20 }            ~Monomial(); {\cf20 //Destructor}\par
00256         private:\par
00260             {\cf18 double} coeff;\par
00264             {\cf18 int} degree;\par
00269             {\cf18 void} swap(Monomial& ogn) noexcept; {\cf20 //Swap function}\par
00270     \};\par
00276     class Polynomial \{\par
00277         {\cf17 public}:\par
00281             Polynomial() {\cf17 noexcept}; {\cf20 //Default constructor}\par
00286 {\cf20 }            Polynomial({\cf17 const} std::map<int, Monomial> mns) {\cf17 noexcept}; {\cf20 //Constructor}\par
00291 {\cf20 }            Polynomial({\cf17 const} std::initializer_list<Monomial> mns) {\cf17 noexcept}; {\cf20 //List Constructor}\par
00296 {\cf20 }            Polynomial({\cf17 const} std::vector<Monomial> mns) {\cf17 noexcept}; {\cf20 //Vector Constructor}\par
00301 {\cf20 }            Polynomial({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Copy constructor}\par
00306 {\cf20 }            Polynomial(Polynomial&& ogn) {\cf17 noexcept}; {\cf20 //Move constructor}\par
00312 {\cf20 }            Polynomial& operator =({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Assigment operator}\par
00318 {\cf20 }            Polynomial& operator =(Polynomial&& ogn) {\cf17 noexcept}; {\cf20 //Move assigment operator}\par
00325 {\cf20 }            {\cf18 bool} operator ==({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Equal logic operator}\par
00332 {\cf20 }            {\cf18 bool} operator !=({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Not equal logic operator}\par
00339 {\cf20 }            {\cf18 bool} operator >({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Greater than logic operator}\par
00346 {\cf20 }            {\cf18 bool} operator <({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Lesser than logic operator}\par
00353 {\cf20 }            {\cf18 bool} operator >=({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Greater or Equal than logic operator}\par
00360 {\cf20 }            {\cf18 bool} operator <=({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Lesser or Equal than logic operator}\par
00366 {\cf20 }            Polynomial operator +({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Addition operator}\par
00372 {\cf20 }            Polynomial operator -({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Substraction operator}\par
00378 {\cf20 }            Polynomial operator *({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Multiplication operator}\par
00384 {\cf20 }            Polynomial operator /({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Division operator}\par
00390 {\cf20 }            Polynomial operator %({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Modulus operator}\par
00396 {\cf20 }            Polynomial& operator +=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Addition assigment operator}\par
00402 {\cf20 }            Polynomial& operator -=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Substraction assigment operator}\par
00408 {\cf20 }            Polynomial& operator *=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Multiplication assigment operator}\par
00414 {\cf20 }            Polynomial& operator /=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Division assigment operator}\par
00420 {\cf20 }            Polynomial& operator %=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Modulus assigment operator}\par
00427 {\cf20 }            {\cf17 friend} std::stringstream& operator<<(std::stringstream& ss, {\cf17 const} Polynomial& p) {\cf17 noexcept}; {\cf20 //Stream operator}\par
00434 {\cf20 }            {\cf17 friend} std::ostream& operator<<(std::ostream& out, {\cf17 const} Polynomial& p) {\cf17 noexcept}; {\cf20 //Stream operator}\par
00439 {\cf20 }            {\cf18 int} get_degree() const noexcept; {\cf20 //Degree getter}\par
00444 {\cf20 }            std::map<{\cf18 int}, Monomial> get_monomials()  const noexcept; {\cf20 //Monomials getter}\par
00449 {\cf20 }            std::{\cf18 string} get_expression() const noexcept; {\cf20 //String expression getter}\par
00455 {\cf20 }            {\cf18 double} get_value(const {\cf18 double}& x) const noexcept; {\cf20 //Value for x getter}\par
00460 {\cf20 }            Polynomial get_derivative() const noexcept; {\cf20 //Gets the derivative}\par
00465 {\cf20 }            Polynomial get_integral() const noexcept; {\cf20 //Gets the integral}\par
00469 {\cf20 }            ~Polynomial(); {\cf20 //Destructor}\par
00470         private:\par
00474             std::map<{\cf18 int}, Monomial> monomials;\par
00479             {\cf18 void} swap(Polynomial& ogn) noexcept; {\cf20 //Swap function}\par
00483 {\cf20 }            Polynomial& redux() noexcept; {\cf20 //Reduces the polynomial}\par
00484     \};\par
00485 \};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/emath.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/emath.cpp}
{\xe \v src/emath.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the main source file for the mathematical equation operations. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "emath.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for emath.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "src_2emath_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the main source file for the mathematical equation operations. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This file implements the functions declared in {\b emath.h}.\par
It consists of two classes, the Monomial class and the Polynomial class.\par
The Monomial class implements all the functions, operators, and properties for representing and operating monomials.\par
The Polynomial class implements all the functions, operators, and properties for representing and operating polynomials.\par
}{
Definition in file {\b emath.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emath.cpp\par \pard\plain 
{\tc\tcl2 \v src/emath.cpp}
{\xe \v src/emath.cpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00009 {\cf21 #include "emath.h"}\par
00015 {\cf18 void} emth::Arithmetic::get_divisors({\cf18 int} n, std::vector<int>& v) {\cf17 noexcept} \{\par
00016     {\cf18 int} limit(std::sqrt(n));\par
00017     {\cf19 for} ({\cf18 int} i = 1; i <= limit; i++) \{\par
00018         {\cf19 if} (std::fmod(n, i) == 0) \{\par
00019             v.push_back(i);\par
00020             {\cf19 if} (i != n / i) \{\par
00021                 v.push_back(n / i);\par
00022             \}\par
00023         \}\par
00024     \}\par
00025     {\cf19 return};\par
00026 \}\par
00030 emth::Monomial::Monomial() noexcept : coeff(0), degree(0) \{\}\par
00036 emth::Monomial::Monomial({\cf17 const} {\cf18 double} cf, {\cf17 const} {\cf18 int} dgr) noexcept : coeff(cf), degree(dgr) \{\}\par
00041 emth::Monomial::Monomial({\cf17 const} Monomial& ogn) noexcept : coeff(ogn.coeff), degree(ogn.degree) \{\}\par
00046 emth::Monomial::Monomial(Monomial&& ogn) noexcept : coeff(std::move(ogn.coeff)), degree(std::move(ogn.degree)) \{\}\par
00052 emth::Monomial& emth::Monomial::operator =({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{Monomial copy(ogn); this->swap(copy); {\cf19 return} *{\cf17 this};\}\par
00058 emth::Monomial& emth::Monomial::operator =(emth::Monomial&& ogn) {\cf17 noexcept} \{this->swap(ogn); {\cf19 return} *{\cf17 this};\}\par
00065 {\cf18 bool} emth::Monomial::operator ==({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} ((this->coeff == ogn.coeff) && (this->degree == ogn.degree));\}\par
00072 {\cf18 bool} emth::Monomial::operator !=({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (!(*{\cf17 this} == ogn));\}\par
00079 {\cf18 bool} emth::Monomial::operator >({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->degree > ogn.degree);\};\par
00086 {\cf18 bool} emth::Monomial::operator <({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->degree < ogn.degree);\};\par
00093 {\cf18 bool} emth::Monomial::operator >=({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->degree >= ogn.degree);\};\par
00100 {\cf18 bool} emth::Monomial::operator <=({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->degree <= ogn.degree);\};\par
00106 emth::Monomial emth::Monomial::operator +({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) += ogn;\}\par
00112 emth::Monomial emth::Monomial::operator -({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) -= ogn;\}\par
00118 emth::Monomial emth::Monomial::operator *({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) *= ogn;\}\par
00124 emth::Monomial emth::Monomial::operator /({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) /= ogn;\}\par
00130 emth::Monomial emth::Monomial::operator %({\cf17 const} emth::Monomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Monomial(*{\cf17 this}) %= ogn;\}\par
00136 emth::Monomial& emth::Monomial::operator +=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00137     {\cf19 if} ((this->degree == ogn.degree) || this->coeff == 0) \{\par
00138         {\cf19 if} (this->coeff == 0) \{this->degree = ogn.degree;\}\par
00139         this->coeff += ogn.coeff;\par
00140     \}\par
00141     {\cf19 return} *{\cf17 this};\par
00142 \}\par
00148 emth::Monomial& emth::Monomial::operator -=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00149     {\cf19 if} ((this->degree == ogn.degree) || this->coeff == 0) \{\par
00150         {\cf19 if} (this->coeff == 0) \{this->degree = ogn.degree;\}\par
00151         this->coeff -= ogn.coeff;\par
00152     \}\par
00153     {\cf19 return} *{\cf17 this};\par
00154 \}\par
00160 emth::Monomial& emth::Monomial::operator *=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00161     this->coeff *= ogn.coeff;\par
00162     this->degree += ogn.degree;\par
00163     {\cf19 return} *{\cf17 this};\par
00164 \}\par
00170 emth::Monomial& emth::Monomial::operator /=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00171     {\cf19 if} (ogn.coeff != 0) \{\par
00172         this->coeff /= ogn.coeff;\par
00173         this->degree -= ogn.degree;\par
00174     \}\par
00175     {\cf19 return} *{\cf17 this};\par
00176 \}\par
00182 emth::Monomial& emth::Monomial::operator %=({\cf17 const} emth::Monomial& ogn) {\cf17 noexcept} \{\par
00183     {\cf19 if} (ogn.coeff != 0) \{\par
00184         this->coeff = std::fmod(this->coeff, ogn.coeff);\par
00185         this->degree -= ogn.degree;\par
00186     \}\par
00187     {\cf19 return} *{\cf17 this};\par
00188 \}\par
00195 std::stringstream& emth::operator<<(std::stringstream& ss, {\cf17 const} emth::Monomial& m) \{ss << m.coeff << {\cf22 "x^"} << m.degree; {\cf19 return} ss;\}\par
00202 std::ostream& emth::operator<<(std::ostream& out, {\cf17 const} emth::Monomial& m) \{out << m.coeff << {\cf22 "x^"} << m.degree; {\cf19 return} out;\}\par
00207 {\cf18 int} emth::Monomial::get_degree() const noexcept \{{\cf19 return} this->degree;\}\par
00212 {\cf18 double} emth::Monomial::get_coeff() const noexcept \{{\cf19 return} this->coeff;\}\par
00217 std::string emth::Monomial::get_expression() const noexcept \{{\cf19 return} (std::stringstream() << *{\cf17 this}).str();\}\par
00223 {\cf18 double} emth::Monomial::get_value({\cf17 const} {\cf18 double}& x) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->coeff * std::pow(x, this->degree));\};\par
00228 {\cf18 void} emth::Monomial::swap(emth::Monomial& ogn) {\cf17 noexcept} \{\par
00229     std::swap(this->coeff, ogn.coeff);\par
00230     std::swap(this->degree, ogn.degree);\par
00231     {\cf19 return};\par
00232 \}\par
00236 emth::Monomial::~Monomial() = {\cf19 default};\par
00240 emth::Polynomial::Polynomial() noexcept \{this->monomials[0] = emth::Monomial(0, 0);\}\par
00245 emth::Polynomial::Polynomial({\cf17 const} std::map<int, emth::Monomial> mns) noexcept : monomials(mns) \{\}\par
00250 emth::Polynomial::Polynomial({\cf17 const} std::initializer_list<emth::Monomial> mns) {\cf17 noexcept} \{{\cf19 for}({\cf17 const} emth::Monomial& mn: mns) \{this->monomials.emplace(mn.get_degree(), mn);\}\}\par
00255 emth::Polynomial::Polynomial({\cf17 const} std::vector<emth::Monomial> mns) {\cf17 noexcept} \{{\cf19 for}({\cf17 const} emth::Monomial& mn: mns) \{this->monomials.emplace(mn.get_degree(), mn);\}\}\par
00260 emth::Polynomial::Polynomial({\cf17 const} emth::Polynomial& ogn) noexcept : monomials(ogn.monomials) \{\} \par
00265 emth::Polynomial::Polynomial(emth::Polynomial&& ogn) noexcept : monomials(std::move(ogn.monomials)) \{\}\par
00271 emth::Polynomial& emth::Polynomial::operator =({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{emth::Polynomial copy(ogn); this->swap(copy); {\cf19 return} *{\cf17 this};\}\par
00277 emth::Polynomial& emth::Polynomial::operator =(emth::Polynomial&& ogn) {\cf17 noexcept} \{this->swap(ogn); {\cf19 return} *{\cf17 this};\}\par
00284 {\cf18 bool} emth::Polynomial::operator ==({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} ((this->get_degree() == ogn.get_degree()) && (this->monomials == ogn.monomials));\}\par
00291 {\cf18 bool} emth::Polynomial::operator !=({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (!(*{\cf17 this} == ogn));\}\par
00298 {\cf18 bool} emth::Polynomial::operator >({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->get_degree() > ogn.get_degree());\};\par
00305 {\cf18 bool} emth::Polynomial::operator <({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->get_degree() < ogn.get_degree());\};\par
00312 {\cf18 bool} emth::Polynomial::operator >=({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->get_degree() >= ogn.get_degree());\};\par
00319 {\cf18 bool} emth::Polynomial::operator <=({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} (this->get_degree() <= ogn.get_degree());\};\par
00325 emth::Polynomial emth::Polynomial::operator +({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) += ogn;\}\par
00331 emth::Polynomial emth::Polynomial::operator -({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) -= ogn;\}\par
00337 emth::Polynomial emth::Polynomial::operator *({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) *= ogn;\}\par
00343 emth::Polynomial emth::Polynomial::operator /({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) /= ogn;\}\par
00349 emth::Polynomial emth::Polynomial::operator %({\cf17 const} emth::Polynomial& ogn) {\cf17 const} {\cf17 noexcept} \{{\cf19 return} emth::Polynomial(*{\cf17 this}) %= ogn;\}\par
00355 emth::Polynomial& emth::Polynomial::operator +=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00356     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv : ogn.monomials) \{this->monomials[kv.first] += kv.second;\}\par
00357     {\cf19 return} this->redux();\par
00358 \}\par
00364 emth::Polynomial& emth::Polynomial::operator -=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00365     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv : ogn.monomials) \{this->monomials[kv.first] -= kv.second;\}\par
00366     {\cf19 return} this->redux();\par
00367 \}\par
00373 emth::Polynomial& emth::Polynomial::operator *=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00374     std::map<int, emth::Monomial> rs;\par
00375     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv : this->monomials) \{\par
00376         {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kkvv : ogn.monomials) \{\par
00377             rs[kv.first + kkvv.first] += kv.second * kkvv.second;\par
00378         \}\par
00379     \}\par
00380     this->monomials = std::move(rs);\par
00381     {\cf19 return} this->redux();\par
00382 \}\par
00388 emth::Polynomial& emth::Polynomial::operator /=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00389     {\cf19 if} (!ogn.monomials.empty()) \{\par
00390         emth::Polynomial quotient;\par
00391         {\cf19 while} (!this->monomials.empty() && this->monomials.crbegin()->second.get_degree() >= ogn.monomials.crbegin()->second.get_degree()) \{\par
00392             emth::Monomial mon = this->monomials.crbegin()->second / ogn.monomials.crbegin()->second;\par
00393             quotient.monomials[mon.get_degree()] = mon;\par
00394             *{\cf17 this} -= (ogn * emth::Polynomial(\{mon\}));\par
00395         \}\par
00396         this->monomials = quotient.monomials;\par
00397     \}\par
00398     {\cf19 return} this->redux();\par
00399 \}\par
00405 emth::Polynomial& emth::Polynomial::operator %=({\cf17 const} emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00406     {\cf19 if} (!ogn.monomials.empty()) \{\par
00407         {\cf19 while} (!this->monomials.empty() && this->monomials.crbegin()->second.get_degree() >= ogn.monomials.crbegin()->second.get_degree()) \{\par
00408             emth::Monomial mon = this->monomials.crbegin()->second / ogn.monomials.crbegin()->second;\par
00409             *{\cf17 this} -= (ogn * emth::Polynomial(\{mon\}));\par
00410         \}\par
00411     \}\par
00412     {\cf19 return} this->redux();\par
00413 \}\par
00420 std::stringstream& emth::operator<<(std::stringstream& ss, {\cf17 const} emth::Polynomial& p) {\cf17 noexcept} \{\par
00421     {\cf19 for}(std::reverse_iterator<std::map<const int, emth::Monomial>::const_iterator> it = p.monomials.crbegin(); it != p.monomials.crend(); it++) \{ss << it->second << {\cf22 " "};\}\par
00422     {\cf19 return} ss;\par
00423 \}\par
00430 std::ostream& emth::operator<<(std::ostream& out, {\cf17 const} emth::Polynomial& p) {\cf17 noexcept} \{\par
00431     {\cf19 for}(std::reverse_iterator<std::map<const int, emth::Monomial>::const_iterator> it = p.monomials.crbegin(); it != p.monomials.crend(); it++) \{out << it->second << {\cf22 " "};\}\par
00432     {\cf19 return} out;\par
00433 \}\par
00438 {\cf18 int} emth::Polynomial::get_degree() const noexcept \{{\cf19 return} this->monomials.crbegin()->first;\}\par
00443 std::map<int, emth::Monomial> emth::Polynomial::get_monomials() const noexcept \{{\cf19 return} this->monomials;\}\par
00448 std::string emth::Polynomial::get_expression() const noexcept \{{\cf19 return} (std::stringstream() << *{\cf17 this}).str();\}\par
00454 {\cf18 double} emth::Polynomial::get_value({\cf17 const} {\cf18 double}& x) {\cf17 const} {\cf17 noexcept} \{\par
00455     {\cf18 double} y = 0;\par
00456     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv: this->monomials) \{y += kv.second.get_value(x);\}\par
00457     {\cf19 return} y;\par
00458 \};\par
00463 emth::Polynomial emth::Polynomial::get_derivative() const noexcept \{\par
00464     std::map<int, emth::Monomial> fdx;\par
00465     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv: this->monomials) \{\par
00466         {\cf19 if} (kv.second.get_degree() != 0) \{fdx[kv.second.get_degree() - 1] = emth::Monomial(kv.second.get_coeff() * kv.second.get_degree(), kv.second.get_degree() - 1);\}\par
00467     \}\par
00468     {\cf19 return} emth::Polynomial(std::move(fdx)).redux();\par
00469 \};\par
00474 emth::Polynomial emth::Polynomial::get_integral() const noexcept \{\par
00475     std::map<int, emth::Monomial> sdx;\par
00476     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv: this->monomials) \{\par
00477         sdx[kv.second.get_degree() + 1] = emth::Monomial(kv.second.get_coeff() / (kv.second.get_degree() + 1), kv.second.get_degree() + 1);\par
00478     \}\par
00479     {\cf19 return} emth::Polynomial(std::move(sdx)).redux();\par
00480 \};\par
00485 {\cf18 void} emth::Polynomial::swap(emth::Polynomial& ogn) {\cf17 noexcept} \{\par
00486     std::swap(this->monomials, ogn.monomials);\par
00487     {\cf19 return};\par
00488 \}\par
00492 emth::Polynomial& emth::Polynomial::redux() noexcept \{\par
00493     std::vector<int> ks;\par
00494     {\cf19 for}({\cf17 const} std::pair<const int, emth::Monomial>& kv: this->monomials) \{\par
00495         {\cf19 if} (kv.second.get_coeff() == 0) \{ks.push_back(kv.first);\}\par
00496     \}\par
00497     {\cf19 for}({\cf18 int}& k: ks) \{this->monomials.erase(k);\}\par
00498     {\cf19 return} *{\cf17 this};\par
00499 \}\par
00503 emth::Polynomial::~Polynomial() = {\cf19 default};\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/emath.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/emath.cpp}
{\xe \v test/emath.cpp}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the main test file of the emath library. It contains all the tests needed to assure that the library works properly. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cassert>}\par
{\f2 #include <iostream>}\par
{\f2 #include "emath.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for emath.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test_2emath_8cpp__incl.svg" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b test_monomial} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Runs all the monomial class tests. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b test_polynomial} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Runs all the polynomial class tests. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calls the monomial and polynomial tests. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the main test file of the emath library. It contains all the tests needed to assure that the library works properly. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This file contains a main function that calls a function for the monomials and a function for the polynomials that test that every method works as it should.\par
If it doesn't then a message gets printed to the console describing the error. If this does happen open an issue on my github page. \par
}{
Definition in file {\b emath.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:emath.cpp}
{\xe \v emath.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calls the monomial and polynomial tests. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(int) The sum of the test_monomial and test_polynomial function wich should be zero when all tests pass \par
}}}{
Definition at line {\b 206} of file {\b emath.cpp}.}\par
{
\ql
References {\b test_monomial()}, and {\b test_polynomial()}.}\par
}
{\xe \v test_monomial\:emath.cpp}
{\xe \v emath.cpp\:test_monomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int test_monomial ()}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Runs all the monomial class tests. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(int) Returns 0 to specify to Meson that the tests finished correctly \par
}}}{
Definition at line {\b 15} of file {\b emath.cpp}.}\par
{
\ql
References {\b emth::Monomial::get_coeff()}, {\b emth::Monomial::get_degree()}, {\b emth::Monomial::get_expression()}, and {\b emth::Monomial::get_value()}.}\par
}
{\xe \v test_polynomial\:emath.cpp}
{\xe \v emath.cpp\:test_polynomial}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int test_polynomial ()}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Runs all the polynomial class tests. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
(int) Returns 0 to specify to Meson that the tests finished correctly \par
}}}{
Definition at line {\b 102} of file {\b emath.cpp}.}\par
{
\ql
References {\b emth::Polynomial::get_degree()}, {\b emth::Polynomial::get_derivative()}, {\b emth::Polynomial::get_expression()}, {\b emth::Polynomial::get_integral()}, {\b emth::Polynomial::get_monomials()}, and {\b emth::Polynomial::get_value()}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emath.cpp\par \pard\plain 
{\tc\tcl2 \v test/emath.cpp}
{\xe \v test/emath.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00007 {\cf21 #include <cassert>}\par
00008 {\cf21 #include <iostream>}\par
00009 {\cf21 #include "emath.h"}\par
00010 {\cf17 using namespace }emth;\par
00015 {\cf18 int} test_monomial() \{\par
00016     {\cf20 //--------------------------------------}\par
00017     {\cf20 //             CONSTRUCTORS}\par
00018     {\cf20 //--------------------------------------}\par
00019     {\cf20 // Default constructor}\par
00020     Monomial md;\par
00021     assert((md.get_coeff() == 0) && {\cf22 "Error on default Monomial constructor: coeff is not default!"});\par
00022     assert((md.get_degree() == 0) && {\cf22 "Error on default Monomial constructor: degree is not default!"});\par
00023     {\cf20 // Normal constructor}\par
00024     Monomial mn(1, 1);\par
00025     assert((mn.get_coeff() == 1) && {\cf22 "Error on normal Monomial constructor: coeff is not coeff!"});\par
00026     assert((mn.get_degree() == 1) && {\cf22 "Error on normal Monomial constructor: degree is not degree!"});\par
00027     {\cf20 // Copy constructor}\par
00028     Monomial mc(mn);\par
00029     assert((mc.get_coeff() == 1) && {\cf22 "Error on copy Monomial constructor: coeff is not copy coeff!"});\par
00030     assert((mc.get_degree() == 1) && {\cf22 "Error on copy Monomial constructor: degree is not copy degree!"});\par
00031     {\cf20 // Move constructor}\par
00032     Monomial mm(Monomial(2,2));\par
00033     assert((mm.get_coeff() == 2) && {\cf22 "Error on move Monomial constructor: coeff is not move coeff!"});\par
00034     assert((mm.get_degree() == 2) && {\cf22 "Error on move Monomial constructor: degree is not move degree!"});\par
00035     {\cf20 //--------------------------------------}\par
00036     {\cf20 //             ASSIGMENT}\par
00037     {\cf20 //--------------------------------------}\par
00038     {\cf20 // Copy assigment}\par
00039     mc = mm;\par
00040     assert((mc.get_coeff() == 2) && {\cf22 "Error on copy assigment operator: coeff is not copy coeff!"});\par
00041     assert((mc.get_degree() == 2) && {\cf22 "Error on copy assigment operator: degree is not copy degree!"});\par
00042     {\cf20 // Move assigment}\par
00043     mm = Monomial(3, 3);\par
00044     assert((mm.get_coeff() == 3) && {\cf22 "Error on move assigment operator: coeff is not move coeff!"});\par
00045     assert((mm.get_degree() == 3) && {\cf22 "Error on move assigment operator: degree is not move degree!"});\par
00046     {\cf20 //--------------------------------------}\par
00047     {\cf20 //             COMPARISON}\par
00048     {\cf20 //--------------------------------------}\par
00049     {\cf17 const} Monomial m1(1, 1), m2(2, 2);\par
00050     {\cf20 // Equality}\par
00051     assert((m1 == m1) && (m1 == Monomial(1, 1)) && (Monomial(1, 1) == m1) && (Monomial(1, 1) == Monomial(1, 1)) && {\cf22 "Error on equal operator: equal monomials are not diffent!"});\par
00052     assert((m1 != m2) && (m1 != Monomial(2, 2)) && (Monomial(2, 2) != m1) && (Monomial(1, 1) != Monomial(2, 2)) && {\cf22 "Error on equal operator: diffent monomials are not equal!"});\par
00053     {\cf20 // Size}\par
00054     assert((m2 > m1) && (m2 > Monomial(1, 1)) && (Monomial(2, 2) > m1) && (Monomial(2, 2) > Monomial(1, 1)) && {\cf22 "Error on greater monomial operator!"});\par
00055     assert((m1 < m2) && (m1 < Monomial(2, 2)) && (Monomial(1, 1) < m2) && (Monomial(1, 1) < Monomial(2, 2)) && {\cf22 "Error on lesser monomial operator!"});\par
00056     assert((m2 >= m1 && m2 >= m2) && (m2 >= Monomial(1, 1) && m2 >= Monomial(2, 2)) && (Monomial(2, 2) >= m1 && Monomial(2, 2) >= m2) && (Monomial(2, 2) >= Monomial(1, 1) && Monomial(2, 2) >= Monomial(2, 2)) && {\cf22 "Error on greater or equal monomial operator!"});\par
00057     assert((m1 <= m2 && m1 <= m1) && (m1 <= Monomial(2, 2) && m1 <= Monomial(1, 1)) && (Monomial(1, 1) <= m2 && Monomial(1, 1) <= m1) && (Monomial(1, 1) <= Monomial(2, 2) && Monomial(1, 1) >= Monomial(1, 1)) && {\cf22 "Error on lesser or equal monomial operator!"});\par
00058     {\cf20 //--------------------------------------}\par
00059     {\cf20 //             ARITHMETIC}\par
00060     {\cf20 //--------------------------------------}\par
00061     Monomial m3(3, 3), m4(4, 4), mn3(-3, -3), mn4(-4, -4);\par
00062     {\cf20 // Addition}\par
00063     assert(((m3 + m4).get_coeff() == 3) && ((m3 + m4).get_degree() == 3) && {\cf22 "Error on addition operator: different degree monomials addition didnt return default value"});\par
00064     assert(((m3 + m3).get_coeff() == 6) && ((m3 + m3).get_degree() == 3) && ((Monomial(3, 3) + Monomial(3, 3)).get_coeff() == 6) && ((Monomial(3, 3) + Monomial(3, 3)).get_degree() == 3) && {\cf22 "Error on addition operator: positive values addition failed!"});\par
00065     assert(((mn3 + mn3).get_coeff() == -6) && ((mn3 + mn3).get_degree() == -3) && ((Monomial(-3, -3) + Monomial(-3, -3)).get_coeff() == -6) && ((Monomial(-3, -3) + Monomial(-3, -3)).get_degree() == -3) && {\cf22 "Error on addition operator: negative values addition failed!"});\par
00066     {\cf20 // Substraction}\par
00067     assert(((m3 - m4).get_coeff() == 3) && ((m3 - m4).get_degree() == 3) && {\cf22 "Error on substraction operator: different degree monomials substraction didnt return default value"});\par
00068     assert(((m3 - m3).get_coeff() == 0) && ((m3 - m3).get_degree() == 3) && ((Monomial(3, 3) - Monomial(3, 3)).get_coeff() == 0) && ((Monomial(3, 3) - Monomial(3, 3)).get_degree() == 3) && {\cf22 "Error on substraction operator: positive values substraction failed!"});\par
00069     assert(((mn3 - mn3).get_coeff() == 0) && ((mn3 - mn3).get_degree() == -3) && ((Monomial(-3, -3) - Monomial(-3, -3)).get_coeff() == 0) && ((Monomial(-3, -3) - Monomial(-3, -3)).get_degree() == -3) && {\cf22 "Error on substraction operator: negative values substraction failed!"});\par
00070     {\cf20 // Multiplication}\par
00071     assert(((m3 * m4).get_coeff() == 12) && ((m3 * m4).get_degree() == 7) && ((Monomial(3, 3) * Monomial(4, 4)).get_coeff() == 12) && ((Monomial(3, 3) * Monomial(4, 4)).get_degree() == 7) && {\cf22 "Error on multiplication operator: positive values multiplication failed!"});\par
00072     assert(((mn3 * mn4).get_coeff() == 12) && ((mn3 * mn4).get_degree() == -7) && ((Monomial(-3, -3) * Monomial(-4, -4)).get_coeff() == 12) && ((Monomial(-3, -3) * Monomial(-4, -4)).get_degree() == -7) && {\cf22 "Error on multiplication operator: negative values multiplication failed!"});\par
00073     {\cf20 // Division}\par
00074     assert(((m3 / Monomial(0, 0)).get_coeff() == 3) && ((m3 / Monomial(0, 0)).get_degree() == 3) && {\cf22 "Error on division operator: divide by zero didnt return default value"});\par
00075     assert(((m3 / m4).get_coeff() == 0.75) && ((m3 / m4).get_degree() == -1) && ((Monomial(3, 3) / Monomial(4, 4)).get_coeff() == 0.75) && ((Monomial(3, 3) / Monomial(4, 4)).get_degree() == -1) && {\cf22 "Error on division operator: positive values division failed!"});\par
00076     assert(((mn3 / mn4).get_coeff() == 0.75) && ((mn3 / mn4).get_degree() == 1) && ((Monomial(-3, -3) / Monomial(-4, -4)).get_coeff() == 0.75) && ((Monomial(-3, -3) / Monomial(-4, -4)).get_degree() == 1) && {\cf22 "Error on division operator: negative values division failed!"});\par
00077     {\cf20 // Modulus}\par
00078     assert(((m3 % Monomial(0, 0)).get_coeff() == 3) && ((m3 % Monomial(0, 0)).get_degree() == 3) && {\cf22 "Error on modulus operator: divide by zero didnt return default value"});\par
00079     assert(((m4 % m3).get_coeff() == 1) && ((m4 % m3).get_degree() == 1) && ((Monomial(4, 4) % Monomial(3, 3)).get_coeff() == 1) && ((Monomial(4, 4) % Monomial(3, 3)).get_degree() == 1) && {\cf22 "Error on modulus operator: positive values modulus failed!"});\par
00080     assert(((mn4 % mn3).get_coeff() == -1) && ((mn4 % mn3).get_degree() == -1) && ((Monomial(-4, -4) % Monomial(-3, -3)).get_coeff() == -1) && ((Monomial(-4, -4) % Monomial(-3, -3)).get_degree() == -1) && {\cf22 "Error on modulus operator: negative values modulus failed!"});\par
00081     {\cf20 //--------------------------------------}\par
00082     {\cf20 //               STREAM}\par
00083     {\cf20 //--------------------------------------}\par
00084     std::stringstream ss, sss;\par
00085     Monomial m5(5, 5), mn5(-5, -5);\par
00086     assert(((ss << m5).str() == {\cf22 "5x^5"}) && ((sss << mn5).str() == {\cf22 "-5x^-5"}) && {\cf22 "Error on stream operator!"});\par
00087     {\cf20 //--------------------------------------}\par
00088     {\cf20 //                 MISC}\par
00089     {\cf20 //--------------------------------------}\par
00090     {\cf20 // Expression getter}\par
00091     assert((m5.get_expression() == {\cf22 "5x^5"}) && (mn5.get_expression() == {\cf22 "-5x^-5"}) && {\cf22 "Error on expression getter!"});\par
00092     {\cf20 // Value getter}\par
00093     assert((m5.get_value(2) == 160) && (mn5.get_value(2) == -0.15625) && {\cf22 "Error on value getter!"});\par
00094     {\cf20 // Well done!}\par
00095     std::cout << {\cf22 "Monomial tests passed!"} << std::endl;\par
00096     {\cf19 return} 0;\par
00097 \}\par
00102 {\cf18 int} test_polynomial() \{\par
00103     {\cf20 //--------------------------------------}\par
00104     {\cf20 //             CONSTRUCTORS}\par
00105     {\cf20 //--------------------------------------}\par
00106     {\cf20 // Default constructor}\par
00107     Polynomial pd;\par
00108     assert((pd.get_monomials().crbegin()->second.get_coeff() == 0) && {\cf22 "Error on default Polynomial constructor: monomial coeff is not default!"});\par
00109     assert((pd.get_monomials().crbegin()->second.get_degree() == 0) && {\cf22 "Error on default Polynomial constructor: monomial degree is not default!"});\par
00110     {\cf20 // Normal constructor}\par
00111     Polynomial pn(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}\}));\par
00112     assert((pn.get_monomials().crbegin()->second.get_coeff() == 1) && {\cf22 "Error on normal Polynomial constructor: monomial coeff is not coeff!"});\par
00113     assert((pn.get_monomials().crbegin()->second.get_degree() == 1) && {\cf22 "Error on normal Polynomial constructor: monomial degree is not degree!"});\par
00114     assert((pn.get_degree() == 1) && {\cf22 "Error on normal Polynomial constructor: polynomial degree is not degree!"});\par
00115     {\cf20 // List constructor}\par
00116     Polynomial pl(\{Monomial(1, 1), Monomial(2, 2)\});\par
00117     assert((pl.get_monomials().crbegin()->second.get_coeff() == 2) && {\cf22 "Error on list Polynomial constructor: last monomial coeff is not coeff!"});\par
00118     assert((pl.get_monomials().crbegin()->second.get_degree() == 2) && {\cf22 "Error on list Polynomial constructor: last monomial degree is not degree!"});\par
00119     assert((pl.get_monomials().cbegin()->second.get_coeff() == 1) && {\cf22 "Error on list Polynomial constructor: first monomial coeff is not coeff!"});\par
00120     assert((pl.get_monomials().cbegin()->second.get_degree() == 1) && {\cf22 "Error on list Polynomial constructor: first monomial degree is not degree!"});\par
00121     assert((pl.get_degree() == 2) && {\cf22 "Error on list Polynomial constructor: polynomial degree is not degree!"});\par
00122     {\cf20 // Vector constructor}\par
00123     Polynomial pv(std::vector<Monomial>(\{Monomial(1, 1), Monomial(2, 2)\}));\par
00124     assert((pv.get_monomials().crbegin()->second.get_coeff() == 2) && {\cf22 "Error on vector Polynomial constructor: last monomial coeff is not coeff!"});\par
00125     assert((pv.get_monomials().crbegin()->second.get_degree() == 2) && {\cf22 "Error on vector Polynomial constructor: last monomial degree is not degree!"});\par
00126     assert((pv.get_monomials().cbegin()->second.get_coeff() == 1) && {\cf22 "Error on vector Polynomial constructor: first monomial coeff is not coeff!"});\par
00127     assert((pv.get_monomials().cbegin()->second.get_degree() == 1) && {\cf22 "Error on vector Polynomial constructor: first monomial degree is not degree!"});\par
00128     assert((pv.get_degree() == 2) && {\cf22 "Error on vector Polynomial constructor: polynomial degree is not degree!"});\par
00129     {\cf20 // Copy constructor}\par
00130     Polynomial pc(pn);\par
00131     assert((pc.get_monomials().crbegin()->second.get_coeff() == 1) && {\cf22 "Error on copy Polynomial constructor: coeff is not copy coeff!"});\par
00132     assert((pc.get_monomials().crbegin()->second.get_degree() == 1) && {\cf22 "Error on copy Polynomial constructor: degree is not copy degree!"});\par
00133     assert((pc.get_degree() == 1) && {\cf22 "Error on copy Polynomial constructor: polynomial degree is not copy degree!"});\par
00134     {\cf20 // Move constructor}\par
00135     Polynomial pm(Polynomial(std::map<int, Monomial>(\{\{2, Monomial(2, 2)\}\})));\par
00136     assert((pm.get_monomials().crbegin()->second.get_coeff() == 2) && {\cf22 "Error on move Polynomial constructor: coeff is not move coeff!"});\par
00137     assert((pm.get_monomials().crbegin()->second.get_degree() == 2) && {\cf22 "Error on move Polynomial constructor: degree is not move degree!"});\par
00138     assert((pm.get_degree() == 2) && {\cf22 "Error on move Polynomial constructor: polynomial degree is not move degree!"});\par
00139     {\cf20 //--------------------------------------}\par
00140     {\cf20 //             ASSIGMENT}\par
00141     {\cf20 //--------------------------------------}\par
00142     {\cf20 // Copy assigment}\par
00143     pc = pm;\par
00144     assert((pc.get_monomials().crbegin()->second.get_coeff() == 2) && {\cf22 "Error on copy assigment operator: coeff is not copy coeff!"});\par
00145     assert((pc.get_monomials().crbegin()->second.get_degree() == 2) && {\cf22 "Error on copy assigment operator: degree is not copy degree!"});\par
00146     assert((pc.get_degree() == 2) && {\cf22 "Error on copy assigment operator: polynomial degree is not copy degree!"});\par
00147     {\cf20 // Move assigment}\par
00148     pm = Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}\}));\par
00149     assert((pm.get_monomials().crbegin()->second.get_coeff() == 3) && {\cf22 "Error on move assigment operator: coeff is not move coeff!"});\par
00150     assert((pm.get_monomials().crbegin()->second.get_degree() == 3) && {\cf22 "Error on move assigment operator: degree is not move degree!"});\par
00151     assert((pm.get_degree() == 3) && {\cf22 "Error on move assigment operator: polynomial degree is not move degree!"});\par
00152     {\cf20 //--------------------------------------}\par
00153     {\cf20 //             COMPARISON}\par
00154     {\cf20 //--------------------------------------}\par
00155     {\cf17 const} Polynomial p2(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})), p4(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}));\par
00156     {\cf20 // Equality}\par
00157     assert((p2 == p2) && (p2 == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) == p2) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && {\cf22 "Error on equal operator: equal monomials are not diffent!"});\par
00158     assert((p2 != p4) && (p2 != Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) != p2) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) != Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && {\cf22 "Error on equal operator: diffent monomials are not equal!"});\par
00159     {\cf20 // Size}\par
00160     assert((p4 > p2) && (p4 > Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) > p2) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) > Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && {\cf22 "Error on greater monomial operator!"});\par
00161     assert((p2 < p4) && (p2 < Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) < p4) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) < Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && {\cf22 "Error on lesser monomial operator!"});\par
00162     assert((p4 >= p2 && p4 >= p4) && (p4 >= Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) && p4 >= Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) >= p2 && Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) >= p4) && (Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) >= Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) && Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) >= Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\}))) && {\cf22 "Error on greater or equal monomial operator!"});\par
00163     assert((p2 <= p4 && p2 <= p2) && (p2 <= Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) && p2 <= Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) <= p4 && Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) <= p2) && (Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) <= Polynomial(std::map<int, Monomial>(\{\{3, Monomial(3, 3)\}, \{4, Monomial(4, 4)\}\})) && Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\})) >= Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(2, 2)\}\}))) && {\cf22 "Error on lesser or equal monomial operator!"});\par
00164     {\cf20 //--------------------------------------}\par
00165     {\cf20 //             ARITHMETIC}\par
00166     {\cf20 //--------------------------------------}\par
00167     Polynomial pn1(std::map<int, Monomial>(\{\{1, Monomial(2, 1)\}, \{2, Monomial(2, 2)\}\})), pn3(std::map<int, Monomial>(\{\{1, Monomial(2, 1)\}, \{3, Monomial(3, 3)\}\}));\par
00168     {\cf20 // Addition}\par
00169     assert(pn1 + pn3 == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(4, 1)\}, \{2, Monomial(2, 2)\}, \{3, Monomial(3, 3)\}\})) && {\cf22 "Error on addition operator: wrong results"});\par
00170     {\cf20 // Substraction}\par
00171     assert(pn1 - pn3 == Polynomial(std::map<int, Monomial>(\{\{2, Monomial(2, 2)\}, \{3, Monomial(-3, 3)\}\})) && {\cf22 "Error on substraction operator: wrong results"});\par
00172     {\cf20 // Multiplication}\par
00173     assert(pn1 * pn3 == Polynomial(std::map<int, Monomial>(\{\{2, Monomial(4, 2)\}, \{3, Monomial(4, 3)\}, \{4, Monomial(6, 4)\}, \{5, Monomial(6, 5)\}\})) && {\cf22 "Error on multiplication operator: wrong results"});\par
00174     {\cf20 // Division}\par
00175     assert(pn3 / pn1 == Polynomial(std::map<int, Monomial>(\{\{0, Monomial(-1.5, 0)\}, \{1, Monomial(1.5, 1)\}\})) && {\cf22 "Error on division operator: wrong results"});\par
00176     {\cf20 // Modulus}\par
00177     assert(pn3 % pn1 == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(5, 1)\}\})) && {\cf22 "Error on modulus operator: wrong results"});\par
00178     {\cf20 //--------------------------------------}\par
00179     {\cf20 //               STREAM}\par
00180     {\cf20 //--------------------------------------}\par
00181     std::stringstream ss;\par
00182     {\cf17 const} Polynomial ps(std::map<int, Monomial>(\{\{0, Monomial(1, 0)\}, \{1, Monomial(1, 1)\}, \{2, Monomial(1, 2)\}\}));\par
00183     assert(((ss << ps).str() == {\cf22 "1x^2 1x^1 1x^0 "}) && {\cf22 "Error on stream operator!"}); {\cf20 //"x^2 + x + 1"}\par
00184     {\cf20 //--------------------------------------}\par
00185     {\cf20 //                 MISC}\par
00186     {\cf20 //--------------------------------------}\par
00187     {\cf20 // Expression getter}\par
00188     assert((ps.get_expression() == {\cf22 "1x^2 1x^1 1x^0 "}) && {\cf22 "Error on expression getter!"});\par
00189     {\cf20 // Value getter}\par
00190     assert((ps.get_value(1) == 3) && (ps.get_value(2) == 7) && {\cf22 "Error on value getter!"});\par
00191     {\cf20 //--------------------------------------}\par
00192     {\cf20 //               CALCULUS}\par
00193     {\cf20 //--------------------------------------}\par
00194     {\cf20 // Derivative getter}\par
00195     assert((ps.get_derivative() == Polynomial(std::map<int, Monomial>(\{\{0, Monomial(1, 0)\}, \{1, Monomial(2, 1)\}\}))) && {\cf22 "Error on derivative getter!"});\par
00196     {\cf20 // Integral getter}\par
00197     assert((ps.get_integral() == Polynomial(std::map<int, Monomial>(\{\{1, Monomial(1, 1)\}, \{2, Monomial(0.5, 2)\}, \{3, Monomial(1.0/3.0, 3)\}\}))) && {\cf22 "Error on integral getter!"});\par
00198     {\cf20 // Well done!}\par
00199     std::cout << {\cf22 "Polynomial tests passed!"} << std::endl;\par
00200     {\cf19 return} 0;\par
00201 \}\par
00206 {\cf18 int} main() \{{\cf19 return} test_monomial() + test_polynomial();\}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
