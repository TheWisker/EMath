{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
emath.h\par \pard\plain 
{\tc\tcl2 \v include/emath.h}
{\xe \v include/emath.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00050 {\cf21 #ifndef EMATH_H}\par
00051 {\cf21 #define EMATH_H}\par
00052 {\cf21 #include <map>}\par
00053 {\cf21 #include <cmath>}\par
00054 {\cf21 #include <complex>}\par
00055 {\cf21 #include <vector>}\par
00056 {\cf21 #include <string>}\par
00057 {\cf21 #include <unsupported/Eigen/Polynomials>}\par
00058 {\cf21 #include "set.h"}\par
00059 {\cf21 #pragma once}\par
00065 {\cf17 namespace }emth \{\par
00066 {\cf21     #define R_TOL std::numeric_limits<double>::epsilon()}\par
00067 {\cf21     #define R_ITR 1000}\par
00073     {\cf17 class }Arithmetic \{\par
00074         {\cf17 public}:\par
00080             {\cf17 static} {\cf18 void} get_divisors({\cf18 int} n, std::vector<int>& v) {\cf17 noexcept};\par
00081     \};\par
00087     {\cf17 class }Monomial \{\par
00088         {\cf17 public}:\par
00092             Monomial() {\cf17 noexcept}; {\cf20 //Default constructor}\par
00098 {\cf20 }            Monomial({\cf17 const} {\cf18 double} cf, {\cf17 const} {\cf18 int} dgr) {\cf17 noexcept}; {\cf20 //Constructor}\par
00103 {\cf20 }            Monomial({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Copy constructor}\par
00108 {\cf20 }            Monomial(Monomial&& ogn) {\cf17 noexcept}; {\cf20 //Move constructor}\par
00114 {\cf20 }            Monomial& operator =({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Assigment operator}\par
00120 {\cf20 }            Monomial& operator =(Monomial&& ogn) {\cf17 noexcept}; {\cf20 //Move assigment operator}\par
00127 {\cf20 }            {\cf18 bool} operator ==({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Equal logic operator}\par
00134 {\cf20 }            {\cf18 bool} operator !=({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Not Equal logic operator}\par
00141 {\cf20 }            {\cf18 bool} operator >({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Greater than logic operator}\par
00148 {\cf20 }            {\cf18 bool} operator <({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Less than logic operator}\par
00155 {\cf20 }            {\cf18 bool} operator >=({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Greater or Equal than logic operator}\par
00162 {\cf20 }            {\cf18 bool} operator <=({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Less or Equal than logic operator}\par
00168 {\cf20 }            Monomial operator +({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Addition operator}\par
00174 {\cf20 }            Monomial operator -({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Substraction operator}\par
00180 {\cf20 }            Monomial operator *({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Multiplication operator}\par
00186 {\cf20 }            Monomial operator /({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Division operator}\par
00192 {\cf20 }            Monomial operator %({\cf17 const} Monomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Modulus operator}\par
00198 {\cf20 }            Monomial& operator +=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Addition assigment operator}\par
00204 {\cf20 }            Monomial& operator -=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Substraction assigment operator}\par
00210 {\cf20 }            Monomial& operator *=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Multiplication assigment operator}\par
00216 {\cf20 }            Monomial& operator /=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Division assigment operator}\par
00222 {\cf20 }            Monomial& operator %=({\cf17 const} Monomial& ogn) {\cf17 noexcept}; {\cf20 //Modulus assigment operator}\par
00229 {\cf20 }            {\cf17 friend} std::stringstream& operator<<(std::stringstream& ss, {\cf17 const} Monomial& m); {\cf20 //Stream operator}\par
00236 {\cf20 }            {\cf17 friend} std::ostream& operator<<(std::ostream& out, {\cf17 const} Monomial& m); {\cf20 //Stream operator}\par
00241 {\cf20 }            {\cf18 double} get_coeff() const noexcept; {\cf20 //Coefficient getter}\par
00246 {\cf20 }            {\cf18 int} get_degree() const noexcept; {\cf20 //Degree getter}\par
00251 {\cf20 }            {\cf18 void} set_coeff({\cf18 double} cf) noexcept; {\cf20 //Coefficient setter}\par
00256 {\cf20 }            {\cf18 void} set_degree({\cf18 int} dgr) noexcept; {\cf20 //Degree setter}\par
00261 {\cf20 }            std::{\cf18 string} get_expression() const noexcept; {\cf20 //String expression getter}\par
00267 {\cf20 }            {\cf18 double} get_value(const {\cf18 double}& x) const noexcept; {\cf20 //Value for x getter}\par
00271 {\cf20 }            ~Monomial(); {\cf20 //Destructor}\par
00272         private:\par
00276             {\cf18 double} coeff;\par
00280             {\cf18 int} degree;\par
00285             {\cf18 void} swap(Monomial& ogn) noexcept; {\cf20 //Swap function}\par
00286     \};\par
00292     class Polynomial \{\par
00293         {\cf17 public}:\par
00297             Polynomial() {\cf17 noexcept}; {\cf20 //Default constructor}\par
00302 {\cf20 }            Polynomial({\cf17 const} std::map<int, Monomial> mns) {\cf17 noexcept}; {\cf20 //Constructor}\par
00307 {\cf20 }            Polynomial({\cf17 const} std::initializer_list<Monomial> mns) {\cf17 noexcept}; {\cf20 //List Constructor}\par
00312 {\cf20 }            Polynomial({\cf17 const} std::vector<Monomial> mns) {\cf17 noexcept}; {\cf20 //Vector Constructor}\par
00317 {\cf20 }            Polynomial({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Copy constructor}\par
00322 {\cf20 }            Polynomial(Polynomial&& ogn) {\cf17 noexcept}; {\cf20 //Move constructor}\par
00328 {\cf20 }            Polynomial& operator =({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Assigment operator}\par
00334 {\cf20 }            Polynomial& operator =(Polynomial&& ogn) {\cf17 noexcept}; {\cf20 //Move assigment operator}\par
00341 {\cf20 }            {\cf18 bool} operator ==({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Equal logic operator}\par
00348 {\cf20 }            {\cf18 bool} operator !=({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Not equal logic operator}\par
00355 {\cf20 }            {\cf18 bool} operator >({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Greater than logic operator}\par
00362 {\cf20 }            {\cf18 bool} operator <({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Lesser than logic operator}\par
00369 {\cf20 }            {\cf18 bool} operator >=({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Greater or Equal than logic operator}\par
00376 {\cf20 }            {\cf18 bool} operator <=({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Lesser or Equal than logic operator}\par
00382 {\cf20 }            Polynomial operator +({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Addition operator}\par
00388 {\cf20 }            Polynomial operator -({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Substraction operator}\par
00394 {\cf20 }            Polynomial operator *({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Multiplication operator}\par
00400 {\cf20 }            Polynomial operator /({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Division operator}\par
00406 {\cf20 }            Polynomial operator %({\cf17 const} Polynomial& ogn) {\cf17 const} {\cf17 noexcept}; {\cf20 //Modulus operator}\par
00412 {\cf20 }            Polynomial& operator +=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Addition assigment operator}\par
00418 {\cf20 }            Polynomial& operator -=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Substraction assigment operator}\par
00424 {\cf20 }            Polynomial& operator *=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Multiplication assigment operator}\par
00430 {\cf20 }            Polynomial& operator /=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Division assigment operator}\par
00436 {\cf20 }            Polynomial& operator %=({\cf17 const} Polynomial& ogn) {\cf17 noexcept}; {\cf20 //Modulus assigment operator}\par
00443 {\cf20 }            {\cf17 friend} std::stringstream& operator<<(std::stringstream& ss, {\cf17 const} Polynomial& p) {\cf17 noexcept}; {\cf20 //Stream operator}\par
00450 {\cf20 }            {\cf17 friend} std::ostream& operator<<(std::ostream& out, {\cf17 const} Polynomial& p) {\cf17 noexcept}; {\cf20 //Stream operator}\par
00455 {\cf20 }            {\cf18 int} get_degree() const noexcept; {\cf20 //Degree getter}\par
00460 {\cf20 }            std::map<{\cf18 int}, Monomial> get_monomials() const noexcept; {\cf20 //Monomials getter}\par
00465 {\cf20 }            {\cf18 bool} is_empty() const noexcept;\par
00471             {\cf18 bool} push_monomial(const Monomial& m) noexcept; {\cf20 //Monomials appender}\par
00477 {\cf20 }            {\cf18 bool} push_monomial(Monomial&& m) noexcept; {\cf20 //Monomials appender}\par
00482 {\cf20 }            std::{\cf18 string} get_expression() const noexcept; {\cf20 //String expression getter}\par
00488 {\cf20 }            {\cf18 double} get_value(const {\cf18 double}& x) const noexcept; {\cf20 //Value for x getter}\par
00493 {\cf20 }            Polynomial get_derivative() const noexcept; {\cf20 //Gets the derivative}\par
00498 {\cf20 }            Polynomial get_integral() const noexcept; {\cf20 //Gets the integral}\par
00503 {\cf20 }            std::vector<std::complex<{\cf18 double}>> get_roots() const noexcept;\par
00507             ~Polynomial(); {\cf20 //Destructor}\par
00508         private:\par
00512             std::map<{\cf18 int}, Monomial> monomials;\par
00517             {\cf18 void} swap(Polynomial& ogn) noexcept; {\cf20 //Swap function}\par
00521 {\cf20 }            Polynomial& redux() noexcept; {\cf20 //Reduces the polynomial}\par
00522     \};\par
00523 \};\par
00524 {\cf21 #endif}\par
}
}