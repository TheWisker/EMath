
/*
double evaluate(const Equation& eq, double x) {
    double result = 0.0;
    for (int i = 0; i <= eq.degree; i++) {
        result += eq.values[i] * std::pow(x, eq.degree - i);
    }
    return result;
}*/

int Storage::save() {

    Json::Value json; // create a JSON object

    json["key"] = "value"; // add a key-value pair to the object
    json["number"] = 123; // add another key-value pair to the object

    std::ofstream out; // open a file for writing
    out.open("file.json");
    out << json; // write the JSON object to the file
    out.close(); // close the file

    out.open("files.json");
    out << json; // write the JSON object to the file
    out.close(); // close the file

    return 0;

}

class Core {
    public:
        Core() {
            storage = new Storage();
        }

        int add() {
            Equation* eq = new Equation;
            std::cout << "Ecuation degree:"; std::cin >> eq->degree;

            double value;
            for(int i = 0; i < eq->degree; i++) {
                std::cout << "Coefficient N" << i+1 << ":"; std::cin >> value;
                eq->values.push_back(value);
            }

            storage->save(eq);

            delete eq, &value;
        }

        int remove() {
            int id;
            std::cout << "Id of the ecuation:"; std::cin >> id;
            storage->remove(id);
            delete &id;
        }

    private:
        Storage* storage;

        struct Equation {
            int degree;
            std::vector<double> values;
        };



};





class Console {
    public:
        Console() {
            core = new Core();
            std::cout << "Welcome to the ecuation calculator!" << std::endl;
        }

        int launch() {
            char action;
            bool active = true;

            while(active) {
                action = 'v';
                std::cout << "[1] New ecuation" << std::endl;
                std::cout << "[2] Show ecuation" << std::endl;
                std::cout << "[3] Delete ecuation" << std::endl;
                std::cout << "[4] Exit calculator" << std::endl;
                std::cin >> action;
                clear();

                switch (action) {
                    case 'n':
                        core->add();
                        break;
                    case 's':

                        break;
                    case 'd':

                        break;
                    case 'e':
                        active = false;
                }
            }

            delete &action, &active;
            return 0;
        }
    private:
        Core* core;

        void clear() {
            #if defined _WIN32
                clrscr();
            #elif defined (__LINUX__) || defined(__gnu_linux__) || defined(__linux__)
                std::cout << u8"\033[2J\033[1;1H";
            #endif
        }
};